{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createUserUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { Permission, Permissions } from \"../Permission\";\nimport { UserResponse } from \"./UserResponse\";\n/**\n * Used to read, replace, and delete Users.\n *\n * Additionally, you can access the permissions for a given user via `user.permission` and `user.permissions`.\n *\n * @see {@link Users} to create, upsert, query, or read all.\n */\n\nexport class User {\n  /**\n   * @hidden\n   * @param database The parent {@link Database}.\n   * @param id\n   */\n  constructor(database, id, clientContext) {\n    this.database = database;\n    this.id = id;\n    this.clientContext = clientContext;\n    this.permissions = new Permissions(this, this.clientContext);\n  }\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n\n\n  get url() {\n    return createUserUri(this.database.id, this.id);\n  }\n  /**\n   * Operations to read, replace, or delete a specific Permission by id.\n   *\n   * See `client.permissions` for creating, upserting, querying, or reading all operations.\n   * @param id\n   */\n\n\n  permission(id) {\n    return new Permission(this, id, this.clientContext);\n  }\n  /**\n   * Read the {@link UserDefinition} for the given {@link User}.\n   * @param options\n   */\n\n\n  read(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.read({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options\n      });\n      return new UserResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Replace the given {@link User}'s definition with the specified {@link UserDefinition}.\n   * @param body The specified {@link UserDefinition} to replace the definition.\n   * @param options\n   */\n\n\n  replace(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options\n      });\n      return new UserResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Delete the given {@link User}.\n   * @param options\n   */\n\n\n  delete(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.delete({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options\n      });\n      return new UserResponse(response.result, response.headers, response.code, this);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/User/User.ts"],"names":[],"mappings":";AAGA,SACE,aADF,EAEE,aAFF,EAGE,eAHF,EAIE,eAJF,EAKE,YALF,QAMO,cANP;AASA,SAAS,UAAT,EAAqB,WAArB,QAAwC,eAAxC;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AAEA;;;;;;;;AAOA,OAAM,MAAO,IAAP,CAAW;AAaf;;;;;AAKA,EAAA,WAAA,CACkB,QADlB,EAEkB,EAFlB,EAGmB,aAHnB,EAG+C;AAF7B,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,EAAA,GAAA,EAAA;AACC,SAAA,aAAA,GAAA,aAAA;AAEjB,SAAK,WAAL,GAAmB,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,KAAK,aAA3B,CAAnB;AACD;AAjBD;;;;;AAGA,MAAW,GAAX,GAAc;AACZ,WAAO,aAAa,CAAC,KAAK,QAAL,CAAc,EAAf,EAAmB,KAAK,EAAxB,CAApB;AACD;AAcD;;;;;;;;AAMO,EAAA,UAAU,CAAC,EAAD,EAAW;AAC1B,WAAO,IAAI,UAAJ,CAAe,IAAf,EAAqB,EAArB,EAAyB,KAAK,aAA9B,CAAP;AACD;AAED;;;;;;AAIa,EAAA,IAAI,CAAC,OAAD,EAAyB;;AACxC,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AACA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,IAAnB,CAAwC;AAC7D,QAAA,IAD6D;AAE7D,QAAA,YAAY,EAAE,YAAY,CAAC,IAFkC;AAG7D,QAAA,UAAU,EAAE,EAHiD;AAI7D,QAAA;AAJ6D,OAAxC,CAAvB;AAMA,aAAO,IAAI,YAAJ,CAAiB,QAAQ,CAAC,MAA1B,EAAkC,QAAQ,CAAC,OAA3C,EAAoD,QAAQ,CAAC,IAA7D,EAAmE,IAAnE,CAAP;AACD,K;AAAA;AAED;;;;;;;AAKa,EAAA,OAAO,CAAC,IAAD,EAAuB,OAAvB,EAA+C;;AACjE,YAAM,GAAG,GAAG,EAAZ;;AACA,UAAI,CAAC,eAAe,CAAC,IAAD,EAAO,GAAP,CAApB,EAAiC;AAC/B,cAAM,GAAN;AACD;;AAED,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,OAAnB,CAA2C;AAChE,QAAA,IADgE;AAEhE,QAAA,IAFgE;AAGhE,QAAA,YAAY,EAAE,YAAY,CAAC,IAHqC;AAIhE,QAAA,UAAU,EAAE,EAJoD;AAKhE,QAAA;AALgE,OAA3C,CAAvB;AAOA,aAAO,IAAI,YAAJ,CAAiB,QAAQ,CAAC,MAA1B,EAAkC,QAAQ,CAAC,OAA3C,EAAoD,QAAQ,CAAC,IAA7D,EAAmE,IAAnE,CAAP;AACD,K;AAAA;AAED;;;;;;AAIa,EAAA,MAAM,CAAC,OAAD,EAAyB;;AAC1C,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,MAAnB,CAA0C;AAC/D,QAAA,IAD+D;AAE/D,QAAA,YAAY,EAAE,YAAY,CAAC,IAFoC;AAG/D,QAAA,UAAU,EAAE,EAHmD;AAI/D,QAAA;AAJ+D,OAA1C,CAAvB;AAMA,aAAO,IAAI,YAAJ,CAAiB,QAAQ,CAAC,MAA1B,EAAkC,QAAQ,CAAC,OAA3C,EAAoD,QAAQ,CAAC,IAA7D,EAAmE,IAAnE,CAAP;AACD,K;AAAA;;AA3Fc","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  createUserUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType\n} from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Database } from \"../Database\";\nimport { Permission, Permissions } from \"../Permission\";\nimport { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\n\n/**\n * Used to read, replace, and delete Users.\n *\n * Additionally, you can access the permissions for a given user via `user.permission` and `user.permissions`.\n *\n * @see {@link Users} to create, upsert, query, or read all.\n */\nexport class User {\n  /**\n   * Operations for creating, upserting, querying, or reading all operations.\n   *\n   * See `client.permission(id)` to read, replace, or delete a specific Permission by id.\n   */\n  public readonly permissions: Permissions;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return createUserUri(this.database.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param database The parent {@link Database}.\n   * @param id\n   */\n  constructor(\n    public readonly database: Database,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {\n    this.permissions = new Permissions(this, this.clientContext);\n  }\n\n  /**\n   * Operations to read, replace, or delete a specific Permission by id.\n   *\n   * See `client.permissions` for creating, upserting, querying, or reading all operations.\n   * @param id\n   */\n  public permission(id: string): Permission {\n    return new Permission(this, id, this.clientContext);\n  }\n\n  /**\n   * Read the {@link UserDefinition} for the given {@link User}.\n   * @param options\n   */\n  public async read(options?: RequestOptions): Promise<UserResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<UserDefinition>({\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    return new UserResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Replace the given {@link User}'s definition with the specified {@link UserDefinition}.\n   * @param body The specified {@link UserDefinition} to replace the definition.\n   * @param options\n   */\n  public async replace(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.replace<UserDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    return new UserResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Delete the given {@link User}.\n   * @param options\n   */\n  public async delete(options?: RequestOptions): Promise<UserResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete<UserDefinition>({\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    return new UserResponse(response.result, response.headers, response.code, this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}