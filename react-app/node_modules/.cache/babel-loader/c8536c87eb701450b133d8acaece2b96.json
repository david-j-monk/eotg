{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OrderByDocumentProducerComparator } from \"../orderByDocumentProducerComparator\";\n/** @hidden */\n\nexport class MinAggregator {\n  /**\n   * Represents an aggregator for MIN operator.\n   * @constructor MinAggregator\n   * @ignore\n   */\n  constructor() {\n    this.value = undefined;\n    this.comparer = new OrderByDocumentProducerComparator([\"Ascending\"]);\n  }\n  /**\n   * Add the provided item to aggregation result.\n   * @memberof MinAggregator\n   * @instance\n   * @param other\n   */\n\n\n  aggregate(other) {\n    if (this.value === undefined) {\n      // || typeof this.value === \"object\"\n      this.value = other.min;\n    } else {\n      const otherType = other.min === null ? \"NoValue\" : typeof other.min; // || typeof other === \"object\"\n\n      const thisType = this.value === null ? \"NoValue\" : typeof this.value;\n\n      if (this.comparer.compareValue(other.min, otherType, this.value, thisType) < 0) {\n        this.value = other.min;\n      }\n    }\n  }\n  /**\n   * Get the aggregation result.\n   * @memberof MinAggregator\n   * @instance\n   */\n\n\n  getResult() {\n    return this.value;\n  }\n\n}","map":{"version":3,"sources":["../../../src/queryExecutionContext/Aggregators/MinAggregator.ts"],"names":[],"mappings":"AAAA;AACA;AACA,SAAS,iCAAT,QAAkD,sCAAlD;AAQA;;AACA,OAAM,MAAO,aAAP,CAAoB;AAGxB;;;;;AAKA,EAAA,WAAA,GAAA;AACE,SAAK,KAAL,GAAa,SAAb;AACA,SAAK,QAAL,GAAgB,IAAI,iCAAJ,CAAsC,CAAC,WAAD,CAAtC,CAAhB;AACD;AACD;;;;;;;;AAMO,EAAA,SAAS,CAAC,KAAD,EAA0B;AACxC,QAAI,KAAK,KAAL,KAAe,SAAnB,EAA8B;AAC5B;AACA,WAAK,KAAL,GAAa,KAAK,CAAC,GAAnB;AACD,KAHD,MAGO;AACL,YAAM,SAAS,GAAG,KAAK,CAAC,GAAN,KAAc,IAAd,GAAqB,SAArB,GAAiC,OAAO,KAAK,CAAC,GAAhE,CADK,CACgE;;AACrE,YAAM,QAAQ,GAAG,KAAK,KAAL,KAAe,IAAf,GAAsB,SAAtB,GAAkC,OAAO,KAAK,KAA/D;;AACA,UAAI,KAAK,QAAL,CAAc,YAAd,CAA2B,KAAK,CAAC,GAAjC,EAAsC,SAAtC,EAAiD,KAAK,KAAtD,EAA6D,QAA7D,IAAyE,CAA7E,EAAgF;AAC9E,aAAK,KAAL,GAAa,KAAK,CAAC,GAAnB;AACD;AACF;AACF;AAED;;;;;;;AAKO,EAAA,SAAS,GAAA;AACd,WAAO,KAAK,KAAZ;AACD;;AAtCuB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OrderByDocumentProducerComparator } from \"../orderByDocumentProducerComparator\";\nimport { Aggregator } from \"./Aggregator\";\n\nexport interface MinAggregateResult {\n  min: number;\n  count: number;\n}\n\n/** @hidden */\nexport class MinAggregator implements Aggregator {\n  private value: number;\n  private comparer: OrderByDocumentProducerComparator;\n  /**\n   * Represents an aggregator for MIN operator.\n   * @constructor MinAggregator\n   * @ignore\n   */\n  constructor() {\n    this.value = undefined;\n    this.comparer = new OrderByDocumentProducerComparator([\"Ascending\"]);\n  }\n  /**\n   * Add the provided item to aggregation result.\n   * @memberof MinAggregator\n   * @instance\n   * @param other\n   */\n  public aggregate(other: MinAggregateResult) {\n    if (this.value === undefined) {\n      // || typeof this.value === \"object\"\n      this.value = other.min;\n    } else {\n      const otherType = other.min === null ? \"NoValue\" : typeof other.min; // || typeof other === \"object\"\n      const thisType = this.value === null ? \"NoValue\" : typeof this.value;\n      if (this.comparer.compareValue(other.min, otherType, this.value, thisType) < 0) {\n        this.value = other.min;\n      }\n    }\n  }\n\n  /**\n   * Get the aggregation result.\n   * @memberof MinAggregator\n   * @instance\n   */\n  public getResult() {\n    return this.value;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}