{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport function encodeUTF8(str) {\n  const bytes = new Uint8Array(str.length);\n\n  for (let i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n\n  return bytes;\n}\nexport function encodeBase64(value) {\n  if (\"function\" !== typeof btoa) {\n    throw new Error(\"Your browser environment is missing the global `btoa` function\");\n  }\n\n  let binary = \"\";\n  const bytes = new Uint8Array(value);\n  const len = bytes.byteLength;\n\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n\n  return btoa(binary);\n}","map":{"version":3,"sources":["../../src/utils/encode.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,OAAM,SAAU,UAAV,CAAqB,GAArB,EAAgC;AACpC,QAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,GAAG,CAAC,MAAnB,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,GAAG,CAAC,UAAJ,CAAe,CAAf,CAAX;AACD;;AACD,SAAO,KAAP;AACD;AAED,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAyC;AAC7C,MAAI,eAAe,OAAO,IAA1B,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAU,gEAAV,CAAN;AACD;;AAED,MAAI,MAAM,GAAG,EAAb;AACA,QAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,KAAf,CAAd;AACA,QAAM,GAAG,GAAG,KAAK,CAAC,UAAlB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,IAAA,MAAM,IAAI,MAAM,CAAC,YAAP,CAAoB,KAAK,CAAC,CAAD,CAAzB,CAAV;AACD;;AACD,SAAO,IAAI,CAAC,MAAD,CAAX;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function encodeUTF8(str: string): Uint8Array {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport function encodeBase64(value: ArrayBuffer): string {\n  if (\"function\" !== typeof btoa) {\n    throw new Error(\"Your browser environment is missing the global `btoa` function\");\n  }\n\n  let binary = \"\";\n  const bytes = new Uint8Array(value);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}