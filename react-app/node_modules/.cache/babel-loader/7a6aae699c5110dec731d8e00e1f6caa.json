{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nimport { ConsistencyLevel } from \"./ConsistencyLevel\";\n/**\n * Represents a DatabaseAccount in the Azure Cosmos DB database service.\n */\n\nexport class DatabaseAccount {\n  // TODO: body - any\n  constructor(body, headers) {\n    /** The list of writable locations for a geo-replicated database account. */\n    this.writableLocations = [];\n    /** The list of readable locations for a geo-replicated database account. */\n\n    this.readableLocations = [];\n    this.databasesLink = \"/dbs/\";\n    this.mediaLink = \"/media/\";\n    this.maxMediaStorageUsageInMB = headers[Constants.HttpHeaders.MaxMediaStorageUsageInMB];\n    this.currentMediaStorageUsageInMB = headers[Constants.HttpHeaders.CurrentMediaStorageUsageInMB];\n    this.consistencyPolicy = body.UserConsistencyPolicy ? body.UserConsistencyPolicy.defaultConsistencyLevel : ConsistencyLevel.Session;\n\n    if (body[Constants.WritableLocations] && body.id !== \"localhost\") {\n      this.writableLocations = body[Constants.WritableLocations];\n    }\n\n    if (body[Constants.ReadableLocations] && body.id !== \"localhost\") {\n      this.readableLocations = body[Constants.ReadableLocations];\n    }\n\n    if (body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS]) {\n      this.enableMultipleWritableLocations = body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === true || body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === \"true\";\n    }\n  }\n  /**\n   * The self-link for Databases in the databaseAccount.\n   * @deprecated Use `databasesLink`\n   */\n\n\n  get DatabasesLink() {\n    return this.databasesLink;\n  }\n  /**\n   * The self-link for Media in the databaseAccount.\n   * @deprecated Use `mediaLink`\n   */\n\n\n  get MediaLink() {\n    return this.mediaLink;\n  }\n  /**\n   * Attachment content (media) storage quota in MBs ( Retrieved from gateway ).\n   * @deprecated use `maxMediaStorageUsageInMB\n   */\n\n\n  get MaxMediaStorageUsageInMB() {\n    return this.maxMediaStorageUsageInMB;\n  }\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   *\n   * @deprecated use `currentMediaStorageUsageInMB`\n   */\n\n\n  get CurrentMediaStorageUsageInMB() {\n    return this.currentMediaStorageUsageInMB;\n  }\n  /**\n   * Gets the UserConsistencyPolicy settings.\n   * @deprecated use `consistencyPolicy`\n   */\n\n\n  get ConsistencyPolicy() {\n    return this.consistencyPolicy;\n  }\n\n}","map":{"version":3,"sources":["../../src/documents/DatabaseAccount.ts"],"names":[],"mappings":"AAAA;AACA;AACA,SAAS,SAAT,QAA0B,WAA1B;AAEA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA;;;;AAGA,OAAM,MAAO,eAAP,CAAsB;AA6D1B;AACA,EAAA,WAAA,CAAmB,IAAnB,EAAiD,OAAjD,EAAuE;AA7DvE;AACgB,SAAA,iBAAA,GAAgC,EAAhC;AAChB;;AACgB,SAAA,iBAAA,GAAgC,EAAhC;AA2Dd,SAAK,aAAL,GAAqB,OAArB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,wBAAL,GAAgC,OAAO,CAAC,SAAS,CAAC,WAAV,CAAsB,wBAAvB,CAAvC;AACA,SAAK,4BAAL,GAAoC,OAAO,CAAC,SAAS,CAAC,WAAV,CAAsB,4BAAvB,CAA3C;AACA,SAAK,iBAAL,GAAyB,IAAI,CAAC,qBAAL,GACpB,IAAI,CAAC,qBAAL,CAA2B,uBADP,GAErB,gBAAgB,CAAC,OAFrB;;AAGA,QAAI,IAAI,CAAC,SAAS,CAAC,iBAAX,CAAJ,IAAqC,IAAI,CAAC,EAAL,KAAY,WAArD,EAAkE;AAChE,WAAK,iBAAL,GAAyB,IAAI,CAAC,SAAS,CAAC,iBAAX,CAA7B;AACD;;AACD,QAAI,IAAI,CAAC,SAAS,CAAC,iBAAX,CAAJ,IAAqC,IAAI,CAAC,EAAL,KAAY,WAArD,EAAkE;AAChE,WAAK,iBAAL,GAAyB,IAAI,CAAC,SAAS,CAAC,iBAAX,CAA7B;AACD;;AACD,QAAI,IAAI,CAAC,SAAS,CAAC,kCAAX,CAAR,EAAwD;AACtD,WAAK,+BAAL,GACE,IAAI,CAAC,SAAS,CAAC,kCAAX,CAAJ,KAAuD,IAAvD,IACA,IAAI,CAAC,SAAS,CAAC,kCAAX,CAAJ,KAAuD,MAFzD;AAGD;AACF;AA5ED;;;;;;AAIA,MAAW,aAAX,GAAwB;AACtB,WAAO,KAAK,aAAZ;AACD;AAGD;;;;;;AAIA,MAAW,SAAX,GAAoB;AAClB,WAAO,KAAK,SAAZ;AACD;AAGD;;;;;;AAIA,MAAW,wBAAX,GAAmC;AACjC,WAAO,KAAK,wBAAZ;AACD;AAGD;;;;;;;;;;AAQA,MAAW,4BAAX,GAAuC;AACrC,WAAO,KAAK,4BAAZ;AACD;AAQD;;;;;;AAIA,MAAW,iBAAX,GAA4B;AAC1B,WAAO,KAAK,iBAAZ;AACD;;AAxDyB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nimport { CosmosHeaders } from \"../queryExecutionContext\";\nimport { ConsistencyLevel } from \"./ConsistencyLevel\";\n\n/**\n * Represents a DatabaseAccount in the Azure Cosmos DB database service.\n */\nexport class DatabaseAccount {\n  /** The list of writable locations for a geo-replicated database account. */\n  public readonly writableLocations: Location[] = [];\n  /** The list of readable locations for a geo-replicated database account. */\n  public readonly readableLocations: Location[] = [];\n  /**\n   * The self-link for Databases in the databaseAccount.\n   * @deprecated Use `databasesLink`\n   */\n  public get DatabasesLink() {\n    return this.databasesLink;\n  }\n  /** The self-link for Databases in the databaseAccount. */\n  public readonly databasesLink: string;\n  /**\n   * The self-link for Media in the databaseAccount.\n   * @deprecated Use `mediaLink`\n   */\n  public get MediaLink() {\n    return this.mediaLink;\n  }\n  /** The self-link for Media in the databaseAccount. */\n  public readonly mediaLink: string;\n  /**\n   * Attachment content (media) storage quota in MBs ( Retrieved from gateway ).\n   * @deprecated use `maxMediaStorageUsageInMB\n   */\n  public get MaxMediaStorageUsageInMB() {\n    return this.maxMediaStorageUsageInMB;\n  }\n  /** Attachment content (media) storage quota in MBs ( Retrieved from gateway ). */\n  public readonly maxMediaStorageUsageInMB: number;\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   *\n   * @deprecated use `currentMediaStorageUsageInMB`\n   */\n  public get CurrentMediaStorageUsageInMB() {\n    return this.currentMediaStorageUsageInMB;\n  }\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   */\n  public readonly currentMediaStorageUsageInMB: number;\n  /**\n   * Gets the UserConsistencyPolicy settings.\n   * @deprecated use `consistencyPolicy`\n   */\n  public get ConsistencyPolicy() {\n    return this.consistencyPolicy;\n  }\n  /** Gets the UserConsistencyPolicy settings. */\n  public readonly consistencyPolicy: ConsistencyLevel;\n  public readonly enableMultipleWritableLocations: boolean;\n\n  // TODO: body - any\n  public constructor(body: { [key: string]: any }, headers: CosmosHeaders) {\n    this.databasesLink = \"/dbs/\";\n    this.mediaLink = \"/media/\";\n    this.maxMediaStorageUsageInMB = headers[Constants.HttpHeaders.MaxMediaStorageUsageInMB];\n    this.currentMediaStorageUsageInMB = headers[Constants.HttpHeaders.CurrentMediaStorageUsageInMB];\n    this.consistencyPolicy = body.UserConsistencyPolicy\n      ? (body.UserConsistencyPolicy.defaultConsistencyLevel as ConsistencyLevel)\n      : ConsistencyLevel.Session;\n    if (body[Constants.WritableLocations] && body.id !== \"localhost\") {\n      this.writableLocations = body[Constants.WritableLocations] as Location[];\n    }\n    if (body[Constants.ReadableLocations] && body.id !== \"localhost\") {\n      this.readableLocations = body[Constants.ReadableLocations] as Location[];\n    }\n    if (body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS]) {\n      this.enableMultipleWritableLocations =\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === true ||\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === \"true\";\n    }\n  }\n}\n\n/**\n * Used to specify the locations that are available, read is index 1 and write is index 0.\n */\nexport interface Location {\n  name: string;\n  databaseAccountEndpoint: string;\n  unavailable?: boolean;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}