{"ast":null,"code":"import { ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\n/**\n * Use to query or read all Offers.\n *\n * @see {@link Offer} to read or replace an existing {@link Offer} by id.\n */\n\nexport class Offers {\n  /**\n   * @hidden\n   * @param client The parent {@link CosmosClient} for the offers.\n   */\n  constructor(client, clientContext) {\n    this.client = client;\n    this.clientContext = clientContext;\n  }\n\n  query(query, options) {\n    return new QueryIterator(this.clientContext, query, options, innerOptions => {\n      return this.clientContext.queryFeed({\n        path: \"/offers\",\n        resourceType: ResourceType.offer,\n        resourceId: \"\",\n        resultFn: result => result.Offers,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n  /**\n   * Read all offers.\n   * @param options\n   * @example Read all offers to array.\n   * ```typescript\n   * const {body: offerList} = await client.offers.readAll().fetchAll();\n   * ```\n   */\n\n\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Offer/Offers.ts"],"names":[],"mappings":"AAGA,SAAS,YAAT,QAA6B,cAA7B;AAGA,SAAS,aAAT,QAA8B,qBAA9B;AAKA;;;;;;AAKA,OAAM,MAAO,MAAP,CAAa;AACjB;;;;AAIA,EAAA,WAAA,CACkB,MADlB,EAEmB,aAFnB,EAE+C;AAD7B,SAAA,MAAA,GAAA,MAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;;AAcG,EAAA,KAAK,CAAI,KAAJ,EAAyB,OAAzB,EAA8C;AACxD,WAAO,IAAI,aAAJ,CAAkB,KAAK,aAAvB,EAAsC,KAAtC,EAA6C,OAA7C,EAAuD,YAAD,IAAiB;AAC5E,aAAO,KAAK,aAAL,CAAmB,SAAnB,CAAgC;AACrC,QAAA,IAAI,EAAE,SAD+B;AAErC,QAAA,YAAY,EAAE,YAAY,CAAC,KAFU;AAGrC,QAAA,UAAU,EAAE,EAHyB;AAIrC,QAAA,QAAQ,EAAG,MAAD,IAAY,MAAM,CAAC,MAJQ;AAKrC,QAAA,KALqC;AAMrC,QAAA,OAAO,EAAE;AAN4B,OAAhC,CAAP;AAQD,KATM,CAAP;AAUD;AAED;;;;;;;;;;AAQO,EAAA,OAAO,CAAC,OAAD,EAAsB;AAClC,WAAO,KAAK,KAAL,CAAuC,SAAvC,EAAkD,OAAlD,CAAP;AACD;;AA7CgB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { ResourceType } from \"../../common\";\nimport { CosmosClient } from \"../../CosmosClient\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { OfferDefinition } from \"./OfferDefinition\";\n\n/**\n * Use to query or read all Offers.\n *\n * @see {@link Offer} to read or replace an existing {@link Offer} by id.\n */\nexport class Offers {\n  /**\n   * @hidden\n   * @param client The parent {@link CosmosClient} for the offers.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Query all offers.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all offers.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    return new QueryIterator(this.clientContext, query, options, (innerOptions) => {\n      return this.clientContext.queryFeed<T>({\n        path: \"/offers\",\n        resourceType: ResourceType.offer,\n        resourceId: \"\",\n        resultFn: (result) => result.Offers,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n\n  /**\n   * Read all offers.\n   * @param options\n   * @example Read all offers to array.\n   * ```typescript\n   * const {body: offerList} = await client.offers.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<OfferDefinition & Resource> {\n    return this.query<OfferDefinition & Resource>(undefined, options);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}