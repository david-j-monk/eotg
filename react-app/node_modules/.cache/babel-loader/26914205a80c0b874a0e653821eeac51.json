{"ast":null,"code":"var _jsxFileName = \"D:\\\\eotg\\\\react-app\\\\src\\\\components\\\\MapContainer.js\";\nimport React from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport Geocode from 'react-geocode';\nimport { CSSTransition } from 'react-transition-group';\nimport { Search } from './Search';\nimport Locate from './Locate';\nimport '@reach/combobox/styles.css';\nimport mapStyles from '../styles/mapStyles';\nimport { ReportBox } from './ReportBox';\n\nconst cosmos = require('./CosmosDB');\n\nconst libraries = ['places'];\nconst mapContainerStyle = {\n  position: 'absolute',\n  top: '0',\n  left: '0',\n  height: '100%',\n  width: '100%'\n};\nconst center = {\n  lat: 54.029578,\n  lng: -4.153496\n};\nexport default function MapContainer() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const [gotIssues, setGotIssues] = React.useState(false);\n  const [reportBoxOpen, setReportBoxState] = React.useState(false);\n  const [reportMarkerSelected, setReportMarkerSelected] = React.useState(null);\n  const [reportMarker, setReportMarker] = React.useState(null);\n  const [options, setOptions] = React.useState({\n    styles: mapStyles,\n    disableDefaultUI: true,\n    zoomControl: true,\n    draggable: true\n  });\n  const markerSize = 30;\n  const mapRef = React.useRef();\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }, zoomLevel) => {\n    if (zoomLevel !== null) {\n      mapRef.current.setZoom(zoomLevel);\n    }\n\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n  }, []);\n  const onMapClick = React.useCallback(event => {\n    if (!reportBoxOpen) {\n      setReportMarker({\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date()\n      });\n      panTo({\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng()\n      }, null);\n      setSelected(null);\n      setReportMarkerSelected(true);\n      setReportBoxState(false);\n      setOptions({\n        draggable: true\n      });\n    }\n  }, [panTo, reportBoxOpen]);\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n    navigator.geolocation.getCurrentPosition(position => {\n      panTo({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }, 18);\n    });\n  }, [panTo]);\n\n  async function getIssues() {\n    if (!gotIssues) {\n      setGotIssues(true);\n      setMarkers([]);\n      await cosmos.getIssues().then(results => results.map(e => setMarkers(current => [...current, {\n        id: e.issueItems.id,\n        lat: e.issueItems.lat,\n        lng: e.issueItems.lng,\n        county: e.issueItems.county,\n        time: new Date(e.issueItems.time),\n        category: e.issueItems.category,\n        content: e.issueItems.content\n      }])));\n    }\n  }\n\n  async function submitReport(category, content) {\n    Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n    Geocode.fromLatLng(reportMarker.lat, reportMarker.lng).then(async response => {\n      await response.results[0].address_components.filter(e => e.types.includes('administrative_area_level_2')).map(async filtered => {\n        await cosmos.createIssueItem({\n          lat: reportMarker.lat,\n          lng: reportMarker.lng,\n          county: filtered.long_name,\n          time: new Date(),\n          category,\n          content\n        }).then(() => setGotIssues(false), getIssues(), setReportBoxState(false), setReportMarker(null), setOptions({\n          draggable: true\n        }), panTo({\n          lat: mapRef.current.center.lat() - 0.00002,\n          lng: mapRef.current.center.lng()\n        }, 18));\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  const closeReportBox = () => {\n    mapRef.current.setZoom(14);\n    setSelected(null);\n    setReportMarkerSelected(false);\n    setReportBoxState(false);\n    setReportMarker(false);\n    setOptions({\n      draggable: true\n    });\n  };\n\n  const openReportForm = React.useCallback(report => {\n    setOptions({\n      draggable: false\n    });\n    setReportMarkerSelected(false);\n    setReportBoxState(true);\n    panTo({\n      lat: report.lat,\n      lng: report.lng\n    }, 20);\n  }, [panTo]);\n  if (loadError) return 'Error loading Map';\n  if (!isLoaded) return 'Loading Map...';\n  return getIssues(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, !reportBoxOpen ? /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 27\n    }\n  }) : null, !reportBoxOpen ? /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 27\n    }\n  }) : null, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 10,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, reportMarker ? /*#__PURE__*/React.createElement(Marker, {\n    key: reportMarker.time + reportMarker.lat + reportMarker.lng,\n    position: {\n      lat: reportMarker.lat,\n      lng: reportMarker.lng\n    },\n    animation: window.google.maps.Animation.BOUNCE,\n    icon: {\n      url: '/images/warning.svg',\n      scaledSize: new window.google.maps.Size(markerSize, markerSize),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(markerSize / 2, markerSize / 2)\n    },\n    onClick: () => {\n      panTo({\n        lat: reportMarker.lat,\n        lng: reportMarker.lng\n      }, 20);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }) : null, reportMarkerSelected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: reportMarker.lat + 0.00002,\n      lng: reportMarker.lng\n    },\n    onCloseClick: () => {\n      setReportMarkerSelected(false);\n      setReportMarker(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }, \"Need to report an issue?\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => openReportForm(reportMarker),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }\n  }, \"Tap to open a report form\"))) : null, reportBoxOpen ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CSSTransition, {\n    in: true,\n    appear: true,\n    timeout: 1000,\n    classNames: \"animation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ReportBox, {\n    closeBox: closeReportBox,\n    submitReport: submitReport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 17\n    }\n  }))) : null, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time + marker.lat + marker.lng,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: '/images/warning.svg',\n      scaledSize: new window.google.maps.Size(markerSize, markerSize),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(markerSize / 2, markerSize / 2)\n    },\n    onClick: () => {\n      setSelected(marker);\n      setReportMarkerSelected(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    onLoad: panTo({\n      lat: selected.lat,\n      lng: selected.lng\n    }, 20),\n    onCloseClick: () => {\n      setSelected(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"issue-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"issue-box-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }\n  }, selected.category), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"issue-box-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, \"Reported at \", selected.time.toLocaleString()), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"issue-box-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }, selected.content))) : null));\n}","map":{"version":3,"sources":["D:/eotg/react-app/src/components/MapContainer.js"],"names":["React","GoogleMap","useLoadScript","Marker","InfoWindow","Geocode","CSSTransition","Search","Locate","mapStyles","ReportBox","cosmos","require","libraries","mapContainerStyle","position","top","left","height","width","center","lat","lng","MapContainer","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","markers","setMarkers","useState","selected","setSelected","gotIssues","setGotIssues","reportBoxOpen","setReportBoxState","reportMarkerSelected","setReportMarkerSelected","reportMarker","setReportMarker","options","setOptions","styles","disableDefaultUI","zoomControl","draggable","markerSize","mapRef","useRef","panTo","useCallback","zoomLevel","current","setZoom","onMapClick","event","latLng","time","Date","onMapLoad","map","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","getIssues","then","results","e","id","issueItems","county","category","content","submitReport","setApiKey","fromLatLng","response","address_components","filter","types","includes","filtered","createIssueItem","long_name","error","console","closeReportBox","openReportForm","report","window","google","maps","Animation","BOUNCE","url","scaledSize","Size","origin","Point","anchor","marker","toLocaleString"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n} from '@react-google-maps/api';\r\nimport Geocode from 'react-geocode';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { Search } from './Search';\r\nimport Locate from './Locate';\r\nimport '@reach/combobox/styles.css';\r\nimport mapStyles from '../styles/mapStyles';\r\nimport { ReportBox } from './ReportBox';\r\n\r\nconst cosmos = require('./CosmosDB');\r\n\r\nconst libraries = ['places'];\r\nconst mapContainerStyle = {\r\n  position: 'absolute',\r\n  top: '0',\r\n  left: '0',\r\n  height: '100%',\r\n  width: '100%',\r\n};\r\nconst center = {\r\n  lat: 54.029578,\r\n  lng: -4.153496,\r\n};\r\n\r\nexport default function MapContainer() {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries,\r\n  });\r\n  const [markers, setMarkers] = React.useState([]);\r\n  const [selected, setSelected] = React.useState(null);\r\n  const [gotIssues, setGotIssues] = React.useState(false);\r\n  const [reportBoxOpen, setReportBoxState] = React.useState(false);\r\n  const [reportMarkerSelected, setReportMarkerSelected] = React.useState(null);\r\n  const [reportMarker, setReportMarker] = React.useState(null);\r\n  const [options, setOptions] = React.useState({\r\n    styles: mapStyles,\r\n    disableDefaultUI: true,\r\n    zoomControl: true,\r\n    draggable: true,\r\n  });\r\n  const markerSize = 30;\r\n  const mapRef = React.useRef();\r\n  const panTo = React.useCallback(({ lat, lng }, zoomLevel) => {\r\n    if (zoomLevel !== null) {\r\n      mapRef.current.setZoom(zoomLevel);\r\n    }\r\n    mapRef.current.panTo({ lat, lng });\r\n  }, []);\r\n  const onMapClick = React.useCallback(\r\n    (event) => {\r\n      if (!reportBoxOpen) {\r\n        setReportMarker({\r\n          lat: event.latLng.lat(),\r\n          lng: event.latLng.lng(),\r\n          time: new Date(),\r\n        });\r\n        panTo(\r\n          {\r\n            lat: event.latLng.lat(),\r\n            lng: event.latLng.lng(),\r\n          },\r\n          null,\r\n        );\r\n        setSelected(null);\r\n        setReportMarkerSelected(true);\r\n        setReportBoxState(false);\r\n        setOptions({ draggable: true });\r\n      }\r\n    },\r\n    [panTo, reportBoxOpen],\r\n  );\r\n\r\n  const onMapLoad = React.useCallback(\r\n    (map) => {\r\n      mapRef.current = map;\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        panTo(\r\n          {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          },\r\n          18,\r\n        );\r\n      });\r\n    },\r\n    [panTo],\r\n  );\r\n  async function getIssues() {\r\n    if (!gotIssues) {\r\n      setGotIssues(true);\r\n      setMarkers([]);\r\n      await cosmos.getIssues().then((results) =>\r\n        results.map((e) =>\r\n          setMarkers((current) => [\r\n            ...current,\r\n            {\r\n              id: e.issueItems.id,\r\n              lat: e.issueItems.lat,\r\n              lng: e.issueItems.lng,\r\n              county: e.issueItems.county,\r\n              time: new Date(e.issueItems.time),\r\n              category: e.issueItems.category,\r\n              content: e.issueItems.content,\r\n            },\r\n          ]),\r\n        ),\r\n      );\r\n    }\r\n  }\r\n  async function submitReport(category, content) {\r\n    Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\r\n    Geocode.fromLatLng(reportMarker.lat, reportMarker.lng).then(\r\n      async (response) => {\r\n        await response.results[0].address_components\r\n          .filter((e) => e.types.includes('administrative_area_level_2'))\r\n          .map(async (filtered) => {\r\n            await cosmos\r\n              .createIssueItem({\r\n                lat: reportMarker.lat,\r\n                lng: reportMarker.lng,\r\n                county: filtered.long_name,\r\n                time: new Date(),\r\n                category,\r\n                content,\r\n              })\r\n              .then(\r\n                () => setGotIssues(false),\r\n                getIssues(),\r\n                setReportBoxState(false),\r\n                setReportMarker(null),\r\n                setOptions({ draggable: true }),\r\n                panTo(\r\n                  {\r\n                    lat: mapRef.current.center.lat() - 0.00002,\r\n                    lng: mapRef.current.center.lng(),\r\n                  },\r\n                  18,\r\n                ),\r\n              );\r\n          });\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      },\r\n    );\r\n  }\r\n\r\n  const closeReportBox = () => {\r\n    mapRef.current.setZoom(14);\r\n    setSelected(null);\r\n    setReportMarkerSelected(false);\r\n    setReportBoxState(false);\r\n    setReportMarker(false);\r\n    setOptions({ draggable: true });\r\n  };\r\n\r\n  const openReportForm = React.useCallback(\r\n    (report) => {\r\n      setOptions({ draggable: false });\r\n      setReportMarkerSelected(false);\r\n      setReportBoxState(true);\r\n      panTo(\r\n        {\r\n          lat: report.lat,\r\n          lng: report.lng,\r\n        },\r\n        20,\r\n      );\r\n    },\r\n    [panTo],\r\n  );\r\n\r\n  if (loadError) return 'Error loading Map';\r\n  if (!isLoaded) return 'Loading Map...';\r\n\r\n  return (\r\n    getIssues(),\r\n    (\r\n      <div className=\"map\">\r\n        {!reportBoxOpen ? <Search panTo={panTo} /> : null}\r\n        {!reportBoxOpen ? <Locate panTo={panTo} /> : null}\r\n\r\n        <GoogleMap\r\n          mapContainerStyle={mapContainerStyle}\r\n          zoom={10}\r\n          center={center}\r\n          options={options}\r\n          onClick={onMapClick}\r\n          onLoad={onMapLoad}\r\n        >\r\n          {reportMarker ? (\r\n            <Marker\r\n              key={reportMarker.time + reportMarker.lat + reportMarker.lng}\r\n              position={{ lat: reportMarker.lat, lng: reportMarker.lng }}\r\n              animation={window.google.maps.Animation.BOUNCE}\r\n              icon={{\r\n                url: '/images/warning.svg',\r\n                scaledSize: new window.google.maps.Size(markerSize, markerSize),\r\n                origin: new window.google.maps.Point(0, 0),\r\n                anchor: new window.google.maps.Point(\r\n                  markerSize / 2,\r\n                  markerSize / 2,\r\n                ),\r\n              }}\r\n              onClick={() => {\r\n                panTo(\r\n                  {\r\n                    lat: reportMarker.lat,\r\n                    lng: reportMarker.lng,\r\n                  },\r\n                  20,\r\n                );\r\n              }}\r\n            />\r\n          ) : null}\r\n          {reportMarkerSelected ? (\r\n            <InfoWindow\r\n              position={{\r\n                lat: reportMarker.lat + 0.00002,\r\n                lng: reportMarker.lng,\r\n              }}\r\n              onCloseClick={() => {\r\n                setReportMarkerSelected(false);\r\n                setReportMarker(null);\r\n              }}\r\n            >\r\n              <div>\r\n                Need to report an issue?\r\n                <br />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => openReportForm(reportMarker)}\r\n                >\r\n                  Tap to open a report form\r\n                </button>\r\n              </div>\r\n            </InfoWindow>\r\n          ) : null}\r\n\r\n          {reportBoxOpen ? (\r\n            <div>\r\n              <CSSTransition in appear timeout={1000} classNames=\"animation\">\r\n                <ReportBox\r\n                  closeBox={closeReportBox}\r\n                  submitReport={submitReport}\r\n                />\r\n              </CSSTransition>\r\n            </div>\r\n          ) : null}\r\n\r\n          {markers.map((marker) => (\r\n            <Marker\r\n              key={marker.time + marker.lat + marker.lng}\r\n              position={{ lat: marker.lat, lng: marker.lng }}\r\n              icon={{\r\n                url: '/images/warning.svg',\r\n                scaledSize: new window.google.maps.Size(markerSize, markerSize),\r\n                origin: new window.google.maps.Point(0, 0),\r\n                anchor: new window.google.maps.Point(\r\n                  markerSize / 2,\r\n                  markerSize / 2,\r\n                ),\r\n              }}\r\n              onClick={() => {\r\n                setSelected(marker);\r\n                setReportMarkerSelected(false);\r\n              }}\r\n            />\r\n          ))}\r\n\r\n          {selected ? (\r\n            <InfoWindow\r\n              position={{ lat: selected.lat, lng: selected.lng }}\r\n              onLoad={panTo(\r\n                {\r\n                  lat: selected.lat,\r\n                  lng: selected.lng,\r\n                },\r\n                20,\r\n              )}\r\n              onCloseClick={() => {\r\n                setSelected(null);\r\n              }}\r\n            >\r\n              <div className=\"issue-box\">\r\n                <h3 className=\"issue-box-heading\">{selected.category}</h3>\r\n                <p className=\"issue-box-info\">\r\n                  Reported at {selected.time.toLocaleString()}\r\n                </p>\r\n                <p className=\"issue-box-content\">{selected.content}</p>\r\n              </div>\r\n            </InfoWindow>\r\n          ) : null}\r\n        </GoogleMap>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}