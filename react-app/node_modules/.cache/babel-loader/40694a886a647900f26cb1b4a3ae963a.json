{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StoredProcedures, StoredProcedure } from \"../StoredProcedure\";\nimport { Trigger, Triggers } from \"../Trigger\";\nimport { UserDefinedFunction, UserDefinedFunctions } from \"../UserDefinedFunction\";\nexport class Scripts {\n  /**\n   * @param container The parent {@link Container}.\n   * @hidden\n   */\n  constructor(container, clientContext) {\n    this.container = container;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link StoredProcedure} by id.\n   *\n   * Use `.storedProcedures` for creating new stored procedures, or querying/reading all stored procedures.\n   * @param id The id of the {@link StoredProcedure}.\n   */\n\n\n  storedProcedure(id) {\n    return new StoredProcedure(this.container, id, this.clientContext);\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Trigger} by id.\n   *\n   * Use `.triggers` for creating new triggers, or querying/reading all triggers.\n   * @param id The id of the {@link Trigger}.\n   */\n\n\n  trigger(id) {\n    return new Trigger(this.container, id, this.clientContext);\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link UserDefinedFunction} by id.\n   *\n   * Use `.userDefinedFunctions` for creating new user defined functions, or querying/reading all user defined functions.\n   * @param id The id of the {@link UserDefinedFunction}.\n   */\n\n\n  userDefinedFunction(id) {\n    return new UserDefinedFunction(this.container, id, this.clientContext);\n  }\n  /**\n   * Operations for creating new stored procedures, and reading/querying all stored procedures.\n   *\n   * For reading, replacing, or deleting an existing stored procedure, use `.storedProcedure(id)`.\n   */\n\n\n  get storedProcedures() {\n    if (!this.$sprocs) {\n      this.$sprocs = new StoredProcedures(this.container, this.clientContext);\n    }\n\n    return this.$sprocs;\n  }\n  /**\n   * Operations for creating new triggers, and reading/querying all triggers.\n   *\n   * For reading, replacing, or deleting an existing trigger, use `.trigger(id)`.\n   */\n\n\n  get triggers() {\n    if (!this.$triggers) {\n      this.$triggers = new Triggers(this.container, this.clientContext);\n    }\n\n    return this.$triggers;\n  }\n  /**\n   * Operations for creating new user defined functions, and reading/querying all user defined functions.\n   *\n   * For reading, replacing, or deleting an existing user defined function, use `.userDefinedFunction(id)`.\n   */\n\n\n  get userDefinedFunctions() {\n    if (!this.$udfs) {\n      this.$udfs = new UserDefinedFunctions(this.container, this.clientContext);\n    }\n\n    return this.$udfs;\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Script/Scripts.ts"],"names":[],"mappings":"AAAA;AACA;AACA,SAAS,gBAAT,EAA2B,eAA3B,QAAkD,oBAAlD;AACA,SAAS,OAAT,EAAkB,QAAlB,QAAkC,YAAlC;AACA,SAAS,mBAAT,EAA8B,oBAA9B,QAA0D,wBAA1D;AAIA,OAAM,MAAO,OAAP,CAAc;AAClB;;;;AAIA,EAAA,WAAA,CACkB,SADlB,EAEmB,aAFnB,EAE+C;AAD7B,SAAA,SAAA,GAAA,SAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;AAEJ;;;;;;;;AAMO,EAAA,eAAe,CAAC,EAAD,EAAW;AAC/B,WAAO,IAAI,eAAJ,CAAoB,KAAK,SAAzB,EAAoC,EAApC,EAAwC,KAAK,aAA7C,CAAP;AACD;AAED;;;;;;;;AAMO,EAAA,OAAO,CAAC,EAAD,EAAW;AACvB,WAAO,IAAI,OAAJ,CAAY,KAAK,SAAjB,EAA4B,EAA5B,EAAgC,KAAK,aAArC,CAAP;AACD;AAED;;;;;;;;AAMO,EAAA,mBAAmB,CAAC,EAAD,EAAW;AACnC,WAAO,IAAI,mBAAJ,CAAwB,KAAK,SAA7B,EAAwC,EAAxC,EAA4C,KAAK,aAAjD,CAAP;AACD;AAGD;;;;;;;AAKA,MAAW,gBAAX,GAA2B;AACzB,QAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,WAAK,OAAL,GAAe,IAAI,gBAAJ,CAAqB,KAAK,SAA1B,EAAqC,KAAK,aAA1C,CAAf;AACD;;AACD,WAAO,KAAK,OAAZ;AACD;AAGD;;;;;;;AAKA,MAAW,QAAX,GAAmB;AACjB,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAK,SAAL,GAAiB,IAAI,QAAJ,CAAa,KAAK,SAAlB,EAA6B,KAAK,aAAlC,CAAjB;AACD;;AACD,WAAO,KAAK,SAAZ;AACD;AAGD;;;;;;;AAKA,MAAW,oBAAX,GAA+B;AAC7B,QAAI,CAAC,KAAK,KAAV,EAAiB;AACf,WAAK,KAAL,GAAa,IAAI,oBAAJ,CAAyB,KAAK,SAA9B,EAAyC,KAAK,aAA9C,CAAb;AACD;;AACD,WAAO,KAAK,KAAZ;AACD;;AA7EiB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StoredProcedures, StoredProcedure } from \"../StoredProcedure\";\nimport { Trigger, Triggers } from \"../Trigger\";\nimport { UserDefinedFunction, UserDefinedFunctions } from \"../UserDefinedFunction\";\nimport { ClientContext } from \"../../ClientContext\";\nimport { Container } from \"../Container/Container\";\n\nexport class Scripts {\n  /**\n   * @param container The parent {@link Container}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link StoredProcedure} by id.\n   *\n   * Use `.storedProcedures` for creating new stored procedures, or querying/reading all stored procedures.\n   * @param id The id of the {@link StoredProcedure}.\n   */\n  public storedProcedure(id: string): StoredProcedure {\n    return new StoredProcedure(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Trigger} by id.\n   *\n   * Use `.triggers` for creating new triggers, or querying/reading all triggers.\n   * @param id The id of the {@link Trigger}.\n   */\n  public trigger(id: string): Trigger {\n    return new Trigger(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link UserDefinedFunction} by id.\n   *\n   * Use `.userDefinedFunctions` for creating new user defined functions, or querying/reading all user defined functions.\n   * @param id The id of the {@link UserDefinedFunction}.\n   */\n  public userDefinedFunction(id: string): UserDefinedFunction {\n    return new UserDefinedFunction(this.container, id, this.clientContext);\n  }\n\n  private $sprocs: StoredProcedures;\n  /**\n   * Operations for creating new stored procedures, and reading/querying all stored procedures.\n   *\n   * For reading, replacing, or deleting an existing stored procedure, use `.storedProcedure(id)`.\n   */\n  public get storedProcedures(): StoredProcedures {\n    if (!this.$sprocs) {\n      this.$sprocs = new StoredProcedures(this.container, this.clientContext);\n    }\n    return this.$sprocs;\n  }\n\n  private $triggers: Triggers;\n  /**\n   * Operations for creating new triggers, and reading/querying all triggers.\n   *\n   * For reading, replacing, or deleting an existing trigger, use `.trigger(id)`.\n   */\n  public get triggers(): Triggers {\n    if (!this.$triggers) {\n      this.$triggers = new Triggers(this.container, this.clientContext);\n    }\n    return this.$triggers;\n  }\n\n  private $udfs: UserDefinedFunctions;\n  /**\n   * Operations for creating new user defined functions, and reading/querying all user defined functions.\n   *\n   * For reading, replacing, or deleting an existing user defined function, use `.userDefinedFunction(id)`.\n   */\n  public get userDefinedFunctions(): UserDefinedFunctions {\n    if (!this.$udfs) {\n      this.$udfs = new UserDefinedFunctions(this.container, this.clientContext);\n    }\n    return this.$udfs;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}