{"ast":null,"code":"import { __awaiter } from \"tslib\";\n/**\n * This class implements the resource throttle retry policy for requests.\n * @hidden\n */\n\nexport class ResourceThrottleRetryPolicy {\n  /**\n   * @constructor ResourceThrottleRetryPolicy\n   * @param {int} maxTries - Max number of retries to be performed for a request.\n   * @param {int} fixedRetryIntervalInMs - Fixed retry interval in milliseconds to wait between each \\\n   * retry ignoring the retryAfter returned as part of the response.\n   * @param {int} timeoutInSeconds - Max wait time in seconds to wait for a request while the \\\n   * retries are happening.\n   */\n  constructor(maxTries = 9, fixedRetryIntervalInMs = 0, timeoutInSeconds = 30) {\n    this.maxTries = maxTries;\n    this.fixedRetryIntervalInMs = fixedRetryIntervalInMs;\n    /** Current retry attempt count. */\n\n    this.currentRetryAttemptCount = 0;\n    /** Cummulative wait time in milliseconds for a request while the retries are happening. */\n\n    this.cummulativeWaitTimeinMs = 0;\n    /** Retry interval in milliseconds to wait before the next request will be sent. */\n\n    this.retryAfterInMs = 0;\n    this.timeoutInMs = timeoutInSeconds * 1000;\n    this.currentRetryAttemptCount = 0;\n    this.cummulativeWaitTimeinMs = 0;\n  }\n  /**\n   * Determines whether the request should be retried or not.\n   * @param {object} err - Error returned by the request.\n   */\n\n\n  shouldRetry(err) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: any custom error object\n      if (err) {\n        if (this.currentRetryAttemptCount < this.maxTries) {\n          this.currentRetryAttemptCount++;\n          this.retryAfterInMs = 0;\n\n          if (this.fixedRetryIntervalInMs) {\n            this.retryAfterInMs = this.fixedRetryIntervalInMs;\n          } else if (err.retryAfterInMs) {\n            this.retryAfterInMs = err.retryAfterInMs;\n          }\n\n          if (this.cummulativeWaitTimeinMs < this.timeoutInMs) {\n            this.cummulativeWaitTimeinMs += this.retryAfterInMs;\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/retry/resourceThrottleRetryPolicy.ts"],"names":[],"mappings":";AAIA;;;;;AAIA,OAAM,MAAO,2BAAP,CAAkC;AAUtC;;;;;;;;AAQA,EAAA,WAAA,CACU,QAAA,GAAmB,CAD7B,EAEU,sBAAA,GAAiC,CAF3C,EAGE,gBAAA,GAA2B,EAH7B,EAG+B;AAFrB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,sBAAA,GAAA,sBAAA;AAnBV;;AACO,SAAA,wBAAA,GAAmC,CAAnC;AACP;;AACO,SAAA,uBAAA,GAAkC,CAAlC;AACP;;AACO,SAAA,cAAA,GAAyB,CAAzB;AAiBL,SAAK,WAAL,GAAmB,gBAAgB,GAAG,IAAtC;AACA,SAAK,wBAAL,GAAgC,CAAhC;AACA,SAAK,uBAAL,GAA+B,CAA/B;AACD;AACD;;;;;;AAIa,EAAA,WAAW,CAAC,GAAD,EAAmB;;AACzC;AACA,UAAI,GAAJ,EAAS;AACP,YAAI,KAAK,wBAAL,GAAgC,KAAK,QAAzC,EAAmD;AACjD,eAAK,wBAAL;AACA,eAAK,cAAL,GAAsB,CAAtB;;AAEA,cAAI,KAAK,sBAAT,EAAiC;AAC/B,iBAAK,cAAL,GAAsB,KAAK,sBAA3B;AACD,WAFD,MAEO,IAAI,GAAG,CAAC,cAAR,EAAwB;AAC7B,iBAAK,cAAL,GAAsB,GAAG,CAAC,cAA1B;AACD;;AAED,cAAI,KAAK,uBAAL,GAA+B,KAAK,WAAxC,EAAqD;AACnD,iBAAK,uBAAL,IAAgC,KAAK,cAArC;AACA,mBAAO,IAAP;AACD;AACF;AACF;;AACD,aAAO,KAAP;AACD,K;AAAA;;AAnDqC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ErrorResponse } from \"../request\";\n\n/**\n * This class implements the resource throttle retry policy for requests.\n * @hidden\n */\nexport class ResourceThrottleRetryPolicy {\n  /** Current retry attempt count. */\n  public currentRetryAttemptCount: number = 0;\n  /** Cummulative wait time in milliseconds for a request while the retries are happening. */\n  public cummulativeWaitTimeinMs: number = 0;\n  /** Retry interval in milliseconds to wait before the next request will be sent. */\n  public retryAfterInMs: number = 0;\n\n  /** Max wait time in milliseconds to wait for a request while the retries are happening. */\n  private timeoutInMs: number;\n  /**\n   * @constructor ResourceThrottleRetryPolicy\n   * @param {int} maxTries - Max number of retries to be performed for a request.\n   * @param {int} fixedRetryIntervalInMs - Fixed retry interval in milliseconds to wait between each \\\n   * retry ignoring the retryAfter returned as part of the response.\n   * @param {int} timeoutInSeconds - Max wait time in seconds to wait for a request while the \\\n   * retries are happening.\n   */\n  constructor(\n    private maxTries: number = 9,\n    private fixedRetryIntervalInMs: number = 0,\n    timeoutInSeconds: number = 30\n  ) {\n    this.timeoutInMs = timeoutInSeconds * 1000;\n    this.currentRetryAttemptCount = 0;\n    this.cummulativeWaitTimeinMs = 0;\n  }\n  /**\n   * Determines whether the request should be retried or not.\n   * @param {object} err - Error returned by the request.\n   */\n  public async shouldRetry(err: ErrorResponse): Promise<boolean> {\n    // TODO: any custom error object\n    if (err) {\n      if (this.currentRetryAttemptCount < this.maxTries) {\n        this.currentRetryAttemptCount++;\n        this.retryAfterInMs = 0;\n\n        if (this.fixedRetryIntervalInMs) {\n          this.retryAfterInMs = this.fixedRetryIntervalInMs;\n        } else if (err.retryAfterInMs) {\n          this.retryAfterInMs = err.retryAfterInMs;\n        }\n\n        if (this.cummulativeWaitTimeinMs < this.timeoutInMs) {\n          this.cummulativeWaitTimeinMs += this.retryAfterInMs;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}