{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getIdFromLink } from \"../common/helper\";\nimport { createCompleteRoutingMap } from \"./CollectionRoutingMapFactory\";\n/** @hidden */\n\nexport class PartitionKeyRangeCache {\n  constructor(clientContext) {\n    this.clientContext = clientContext;\n    this.collectionRoutingMapByCollectionId = {};\n  }\n  /**\n   * Finds or Instantiates the requested Collection Routing Map\n   * @param {string} collectionLink            - Requested collectionLink\n   * @ignore\n   */\n\n\n  onCollectionRoutingMap(collectionLink) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const collectionId = getIdFromLink(collectionLink);\n\n      if (this.collectionRoutingMapByCollectionId[collectionId] === undefined) {\n        this.collectionRoutingMapByCollectionId[collectionId] = this.requestCollectionRoutingMap(collectionLink);\n      }\n\n      return this.collectionRoutingMapByCollectionId[collectionId];\n    });\n  }\n  /**\n   * Given the query ranges and a collection, invokes the callback on the list of overlapping partition key ranges\n   * @param collectionLink\n   * @param queryRange\n   * @ignore\n   */\n\n\n  getOverlappingRanges(collectionLink, queryRange) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const crm = yield this.onCollectionRoutingMap(collectionLink);\n      return crm.getOverlappingRanges(queryRange);\n    });\n  }\n\n  requestCollectionRoutingMap(collectionLink) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        resources\n      } = yield this.clientContext.queryPartitionKeyRanges(collectionLink).fetchAll();\n      return createCompleteRoutingMap(resources.map(r => [r, true]));\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/routing/partitionKeyRangeCache.ts"],"names":[],"mappings":";AAGA,SAAS,aAAT,QAA8B,kBAA9B;AACA,SAAS,wBAAT,QAAyC,+BAAzC;AAIA;;AACA,OAAM,MAAO,sBAAP,CAA6B;AAKjC,EAAA,WAAA,CAAoB,aAApB,EAAgD;AAA5B,SAAA,aAAA,GAAA,aAAA;AAClB,SAAK,kCAAL,GAA0C,EAA1C;AACD;AACD;;;;;;;AAKa,EAAA,sBAAsB,CACjC,cADiC,EACX;;AAEtB,YAAM,YAAY,GAAG,aAAa,CAAC,cAAD,CAAlC;;AACA,UAAI,KAAK,kCAAL,CAAwC,YAAxC,MAA0D,SAA9D,EAAyE;AACvE,aAAK,kCAAL,CAAwC,YAAxC,IAAwD,KAAK,2BAAL,CACtD,cADsD,CAAxD;AAGD;;AACD,aAAO,KAAK,kCAAL,CAAwC,YAAxC,CAAP;AACD,K;AAAA;AAED;;;;;;;;AAMa,EAAA,oBAAoB,CAAC,cAAD,EAAyB,UAAzB,EAA+C;;AAC9E,YAAM,GAAG,GAAG,MAAM,KAAK,sBAAL,CAA4B,cAA5B,CAAlB;AACA,aAAO,GAAG,CAAC,oBAAJ,CAAyB,UAAzB,CAAP;AACD,K;AAAA;;AAEa,EAAA,2BAA2B,CAAC,cAAD,EAAuB;;AAC9D,YAAM;AAAE,QAAA;AAAF,UAAgB,MAAM,KAAK,aAAL,CACzB,uBADyB,CACD,cADC,EAEzB,QAFyB,EAA5B;AAGA,aAAO,wBAAwB,CAAC,SAAS,CAAC,GAAV,CAAe,CAAD,IAAO,CAAC,CAAD,EAAI,IAAJ,CAArB,CAAD,CAA/B;AACD,K;AAAA;;AAzCgC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../ClientContext\";\nimport { getIdFromLink } from \"../common/helper\";\nimport { createCompleteRoutingMap } from \"./CollectionRoutingMapFactory\";\nimport { InMemoryCollectionRoutingMap } from \"./inMemoryCollectionRoutingMap\";\nimport { QueryRange } from \"./QueryRange\";\n\n/** @hidden */\nexport class PartitionKeyRangeCache {\n  private collectionRoutingMapByCollectionId: {\n    [key: string]: Promise<InMemoryCollectionRoutingMap>;\n  };\n\n  constructor(private clientContext: ClientContext) {\n    this.collectionRoutingMapByCollectionId = {};\n  }\n  /**\n   * Finds or Instantiates the requested Collection Routing Map\n   * @param {string} collectionLink            - Requested collectionLink\n   * @ignore\n   */\n  public async onCollectionRoutingMap(\n    collectionLink: string\n  ): Promise<InMemoryCollectionRoutingMap> {\n    const collectionId = getIdFromLink(collectionLink);\n    if (this.collectionRoutingMapByCollectionId[collectionId] === undefined) {\n      this.collectionRoutingMapByCollectionId[collectionId] = this.requestCollectionRoutingMap(\n        collectionLink\n      );\n    }\n    return this.collectionRoutingMapByCollectionId[collectionId];\n  }\n\n  /**\n   * Given the query ranges and a collection, invokes the callback on the list of overlapping partition key ranges\n   * @param collectionLink\n   * @param queryRange\n   * @ignore\n   */\n  public async getOverlappingRanges(collectionLink: string, queryRange: QueryRange) {\n    const crm = await this.onCollectionRoutingMap(collectionLink);\n    return crm.getOverlappingRanges(queryRange);\n  }\n\n  private async requestCollectionRoutingMap(collectionLink: string) {\n    const { resources } = await this.clientContext\n      .queryPartitionKeyRanges(collectionLink)\n      .fetchAll();\n    return createCompleteRoutingMap(resources.map((r) => [r, true]));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}