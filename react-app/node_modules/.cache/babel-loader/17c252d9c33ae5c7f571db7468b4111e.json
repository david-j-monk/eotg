{"ast":null,"code":"const {\n  CosmosClient\n} = require('@azure/cosmos');\n\nconst config = require('../config');\n\nconst {\n  endpoint\n} = config;\nconst {\n  key\n} = config;\nconst databaseID = config.database.id;\nconst issuesContainerId = config.issuesContainer.id;\nconst newsContainerId = config.newsContainer.id;\nconst partitionKey = {\n  kind: 'Hash',\n  paths: ['/county']\n};\nconst client = new CosmosClient({\n  endpoint,\n  key\n});\nexport async function createDatabase() {\n  // eslint-disable-next-line\n  const {\n    database\n  } = await client.databases.createIfNotExists({\n    id: databaseID\n  });\n}\nexport async function createContainer(containerIdentifier) {\n  // eslint-disable-next-line\n  const {\n    container\n  } = await client.database(databaseID).containers.createIfNotExists({\n    id: containerIdentifier,\n    partitionKey\n  }, {\n    offerThroughput: 400\n  });\n}\nexport async function createNewsItem(itemBody) {\n  // eslint-disable-next-line\n  const {\n    item\n  } = await client.database(databaseID).container(newsContainerId).items.upsert(itemBody);\n}\nexport async function createIssueItem(itemBody) {\n  const {\n    item\n  } = await client.database(databaseID).container(issuesContainerId).items.upsert(itemBody);\n  return item;\n}\nexport async function getNews() {\n  const querySpec = {\n    query: 'SELECT {\"id\":r.id, \"county\":r.county, \"date\":r.date, \"title\":r.title, \"content\":r.content} AS newsItems FROM root r'\n  };\n  const {\n    resources: results\n  } = await client.database(databaseID).container(newsContainerId).items.query(querySpec).fetchAll();\n  return results;\n}\nexport async function getIssues() {\n  const querySpec = {\n    query: 'SELECT {\"id\":r.id, \"lat\":r.lat, \"lng\":r.lng, \"county\":r.county, \"time\":r.time, \"category\":r.category, \"content\":r.content} AS issueItems FROM root r'\n  };\n  const {\n    resources: results\n  } = await client.database(databaseID).container(issuesContainerId).items.query(querySpec).fetchAll();\n  return results;\n}","map":{"version":3,"sources":["D:/eotg/react-app/src/components/CosmosDB.js"],"names":["CosmosClient","require","config","endpoint","key","databaseID","database","id","issuesContainerId","issuesContainer","newsContainerId","newsContainer","partitionKey","kind","paths","client","createDatabase","databases","createIfNotExists","createContainer","containerIdentifier","container","containers","offerThroughput","createNewsItem","itemBody","item","items","upsert","createIssueItem","getNews","querySpec","query","resources","results","fetchAll","getIssues"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,eAAD,CAAhC;;AAEA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAeD,MAArB;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAUF,MAAhB;AACA,MAAMG,UAAU,GAAGH,MAAM,CAACI,QAAP,CAAgBC,EAAnC;AACA,MAAMC,iBAAiB,GAAGN,MAAM,CAACO,eAAP,CAAuBF,EAAjD;AACA,MAAMG,eAAe,GAAGR,MAAM,CAACS,aAAP,CAAqBJ,EAA7C;AACA,MAAMK,YAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,KAAK,EAAE,CAAC,SAAD;AAAvB,CAArB;AACA,MAAMC,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAAEG,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAjB,CAAf;AAEA,OAAO,eAAeY,cAAf,GAAgC;AACrC;AACA,QAAM;AAAEV,IAAAA;AAAF,MAAe,MAAMS,MAAM,CAACE,SAAP,CAAiBC,iBAAjB,CAAmC;AAC5DX,IAAAA,EAAE,EAAEF;AADwD,GAAnC,CAA3B;AAGD;AAED,OAAO,eAAec,eAAf,CAA+BC,mBAA/B,EAAoD;AACzD;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgB,MAAMN,MAAM,CAC/BT,QADyB,CAChBD,UADgB,EAEzBiB,UAFyB,CAEdJ,iBAFc,CAGxB;AAAEX,IAAAA,EAAE,EAAEa,mBAAN;AAA2BR,IAAAA;AAA3B,GAHwB,EAIxB;AAAEW,IAAAA,eAAe,EAAE;AAAnB,GAJwB,CAA5B;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,QAA9B,EAAwC;AAC7C;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMX,MAAM,CAC1BT,QADoB,CACXD,UADW,EAEpBgB,SAFoB,CAEVX,eAFU,EAGpBiB,KAHoB,CAGdC,MAHc,CAGPH,QAHO,CAAvB;AAID;AAED,OAAO,eAAeI,eAAf,CAA+BJ,QAA/B,EAAyC;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMX,MAAM,CAC1BT,QADoB,CACXD,UADW,EAEpBgB,SAFoB,CAEVb,iBAFU,EAGpBmB,KAHoB,CAGdC,MAHc,CAGPH,QAHO,CAAvB;AAIA,SAAOC,IAAP;AACD;AAED,OAAO,eAAeI,OAAf,GAAyB;AAC9B,QAAMC,SAAS,GAAG;AAChBC,IAAAA,KAAK,EACH;AAFc,GAAlB;AAIA,QAAM;AAAEC,IAAAA,SAAS,EAAEC;AAAb,MAAyB,MAAMnB,MAAM,CACxCT,QADkC,CACzBD,UADyB,EAElCgB,SAFkC,CAExBX,eAFwB,EAGlCiB,KAHkC,CAG5BK,KAH4B,CAGtBD,SAHsB,EAIlCI,QAJkC,EAArC;AAMA,SAAOD,OAAP;AACD;AAED,OAAO,eAAeE,SAAf,GAA2B;AAChC,QAAML,SAAS,GAAG;AAChBC,IAAAA,KAAK,EACH;AAFc,GAAlB;AAIA,QAAM;AAAEC,IAAAA,SAAS,EAAEC;AAAb,MAAyB,MAAMnB,MAAM,CACxCT,QADkC,CACzBD,UADyB,EAElCgB,SAFkC,CAExBb,iBAFwB,EAGlCmB,KAHkC,CAG5BK,KAH4B,CAGtBD,SAHsB,EAIlCI,QAJkC,EAArC;AAMA,SAAOD,OAAP;AACD","sourcesContent":["const { CosmosClient } = require('@azure/cosmos');\n\nconst config = require('../config');\n\nconst { endpoint } = config;\nconst { key } = config;\nconst databaseID = config.database.id;\nconst issuesContainerId = config.issuesContainer.id;\nconst newsContainerId = config.newsContainer.id;\nconst partitionKey = { kind: 'Hash', paths: ['/county'] };\nconst client = new CosmosClient({ endpoint, key});\n\nexport async function createDatabase() {\n  // eslint-disable-next-line\n  const { database } = await client.databases.createIfNotExists({\n    id: databaseID,\n  });\n}\n\nexport async function createContainer(containerIdentifier) {\n  // eslint-disable-next-line\n  const { container } = await client\n    .database(databaseID)\n    .containers.createIfNotExists(\n      { id: containerIdentifier, partitionKey },\n      { offerThroughput: 400 },\n    );\n}\n\nexport async function createNewsItem(itemBody) {\n  // eslint-disable-next-line\n  const { item } = await client\n    .database(databaseID)\n    .container(newsContainerId)\n    .items.upsert(itemBody);\n}\n\nexport async function createIssueItem(itemBody) {\n  const { item } = await client\n    .database(databaseID)\n    .container(issuesContainerId)\n    .items.upsert(itemBody);\n  return item;\n}\n\nexport async function getNews() {\n  const querySpec = {\n    query:\n      'SELECT {\"id\":r.id, \"county\":r.county, \"date\":r.date, \"title\":r.title, \"content\":r.content} AS newsItems FROM root r',\n  };\n  const { resources: results } = await client\n    .database(databaseID)\n    .container(newsContainerId)\n    .items.query(querySpec)\n    .fetchAll();\n\n  return results;\n}\n\nexport async function getIssues() {\n  const querySpec = {\n    query:\n      'SELECT {\"id\":r.id, \"lat\":r.lat, \"lng\":r.lng, \"county\":r.county, \"time\":r.time, \"category\":r.category, \"content\":r.content} AS issueItems FROM root r',\n  };\n  const { resources: results } = await client\n    .database(databaseID)\n    .container(issuesContainerId)\n    .items.query(querySpec)\n    .fetchAll();\n\n  return results;\n}\n"]},"metadata":{},"sourceType":"module"}