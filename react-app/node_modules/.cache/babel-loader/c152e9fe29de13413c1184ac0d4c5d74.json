{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter } from \"tslib\";\nimport { encodeUTF8, encodeBase64 } from \"./encode\";\nimport atob from \"./atob\";\nimport { globalCrypto } from \"./globalCrypto\";\nexport function hmac(key, message) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const importParams = {\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    };\n    const encodedMessage = new Uint8Array([...unescape(encodeURIComponent(message))].map(c => c.charCodeAt(0)));\n    const encodedKey = encodeUTF8(atob(key));\n    const cryptoKey = yield globalCrypto.subtle.importKey(\"raw\", encodedKey, importParams, false, [\"sign\"]);\n    const signature = yield globalCrypto.subtle.sign(importParams, cryptoKey, encodedMessage);\n    return encodeBase64(signature);\n  });\n}","map":{"version":3,"sources":["../../src/utils/hmac.browser.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA,SAAS,UAAT,EAAqB,YAArB,QAAyC,UAAzC;AACA,OAAO,IAAP,MAAiB,QAAjB;AACA,SAAS,YAAT,QAA6B,gBAA7B;AAEA,OAAM,SAAgB,IAAhB,CAAqB,GAArB,EAAkC,OAAlC,EAAiD;;AACrD,UAAM,YAAY,GAAqB;AAAE,MAAA,IAAI,EAAE,MAAR;AAAgB,MAAA,IAAI,EAAE;AAAE,QAAA,IAAI,EAAE;AAAR;AAAtB,KAAvC;AACA,UAAM,cAAc,GAAG,IAAI,UAAJ,CACrB,CAAC,GAAG,QAAQ,CAAC,kBAAkB,CAAC,OAAD,CAAnB,CAAZ,EAA2C,GAA3C,CAAgD,CAAD,IAAO,CAAC,CAAC,UAAF,CAAa,CAAb,CAAtD,CADqB,CAAvB;AAGA,UAAM,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,GAAD,CAAL,CAA7B;AACA,UAAM,SAAS,GAAG,MAAM,YAAY,CAAC,MAAb,CAAoB,SAApB,CAA8B,KAA9B,EAAqC,UAArC,EAAiD,YAAjD,EAA+D,KAA/D,EAAsE,CAC5F,MAD4F,CAAtE,CAAxB;AAGA,UAAM,SAAS,GAAG,MAAM,YAAY,CAAC,MAAb,CAAoB,IAApB,CAAyB,YAAzB,EAAuC,SAAvC,EAAkD,cAAlD,CAAxB;AAEA,WAAO,YAAY,CAAC,SAAD,CAAnB;AACD,G;AAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { encodeUTF8, encodeBase64 } from \"./encode\";\nimport atob from \"./atob\";\nimport { globalCrypto } from \"./globalCrypto\";\n\nexport async function hmac(key: string, message: string) {\n  const importParams: HmacImportParams = { name: \"HMAC\", hash: { name: \"SHA-256\" } };\n  const encodedMessage = new Uint8Array(\n    [...unescape(encodeURIComponent(message))].map((c) => c.charCodeAt(0))\n  );\n  const encodedKey = encodeUTF8(atob(key));\n  const cryptoKey = await globalCrypto.subtle.importKey(\"raw\", encodedKey, importParams, false, [\n    \"sign\"\n  ]);\n  const signature = await globalCrypto.subtle.sign(importParams, cryptoKey, encodedMessage);\n\n  return encodeBase64(signature);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}