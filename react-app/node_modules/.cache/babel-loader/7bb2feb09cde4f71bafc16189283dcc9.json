{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { User } from \"./User\";\nimport { UserResponse } from \"./UserResponse\";\n/**\n * Used to create, upsert, query, and read all users.\n *\n * @see {@link User} to read, replace, or delete a specific User by id.\n */\n\nexport class Users {\n  /**\n   * @hidden\n   * @param database The parent {@link Database}.\n   */\n  constructor(database, clientContext) {\n    this.database = database;\n    this.clientContext = clientContext;\n  }\n\n  query(query, options) {\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n    return new QueryIterator(this.clientContext, query, options, innerOptions => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        resultFn: result => result.Users,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n  /**\n   * Read all users.\n   * @param options\n   * @example Read all users to array.\n   * ```typescript\n   * const {body: usersList} = await database.users.readAll().fetchAll();\n   * ```\n   */\n\n\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n  /**\n   * Create a database user with the specified {@link UserDefinition}.\n   * @param body The specified {@link UserDefinition}.\n   * @param options\n   */\n\n\n  create(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n      const response = yield this.clientContext.create({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(response.result, response.headers, response.code, ref);\n    });\n  }\n  /**\n   * Upsert a database user with a specified {@link UserDefinition}.\n   * @param body The specified {@link UserDefinition}.\n   * @param options\n   */\n\n\n  upsert(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n      const response = yield this.clientContext.upsert({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(response.result, response.headers, response.code, ref);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/User/Users.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Database } from \"../Database\";\nimport { Resource } from \"../Resource\";\nimport { User } from \"./User\";\nimport { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\n\n/**\n * Used to create, upsert, query, and read all users.\n *\n * @see {@link User} to read, replace, or delete a specific User by id.\n */\nexport class Users {\n  /**\n   * @hidden\n   * @param database The parent {@link Database}.\n   */\n  constructor(public readonly database: Database, private readonly clientContext: ClientContext) {}\n\n  /**\n   * Query all users.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all users.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n\n    return new QueryIterator(this.clientContext, query, options, (innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        resultFn: (result) => result.Users,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n\n  /**\n   * Read all users.\n   * @param options\n   * @example Read all users to array.\n   * ```typescript\n   * const {body: usersList} = await database.users.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<UserDefinition & Resource> {\n    return this.query<UserDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a database user with the specified {@link UserDefinition}.\n   * @param body The specified {@link UserDefinition}.\n   * @param options\n   */\n  public async create(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n    const response = await this.clientContext.create<UserDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    const ref = new User(this.database, response.result.id, this.clientContext);\n    return new UserResponse(response.result, response.headers, response.code, ref);\n  }\n\n  /**\n   * Upsert a database user with a specified {@link UserDefinition}.\n   * @param body The specified {@link UserDefinition}.\n   * @param options\n   */\n  public async upsert(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n\n    const response = await this.clientContext.upsert<UserDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    const ref = new User(this.database, response.result.id, this.clientContext);\n    return new UserResponse(response.result, response.headers, response.code, ref);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}