{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createDatabaseUri, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { Container, Containers } from \"../Container\";\nimport { User, Users } from \"../User\";\nimport { DatabaseResponse } from \"./DatabaseResponse\";\nimport { OfferResponse, Offer } from \"../Offer\";\n/**\n * Operations for reading or deleting an existing database.\n *\n * @see {@link Databases} for creating new databases, and reading/querying all databases; use `client.databases`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `database.read()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\n\nexport class Database {\n  /** Returns a new {@link Database} instance.\n   *\n   * Note: the intention is to get this object from {@link CosmosClient} via `client.database(id)`, not to instantiate it yourself.\n   */\n  constructor(client, id, clientContext) {\n    this.client = client;\n    this.id = id;\n    this.clientContext = clientContext;\n    this.containers = new Containers(this, this.clientContext);\n    this.users = new Users(this, this.clientContext);\n  }\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n\n\n  get url() {\n    return createDatabaseUri(this.id);\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * Use `.containers` creating new containers, or querying/reading all containers.\n   *\n   * @example Delete a container\n   * ```typescript\n   * await client.database(\"<db id>\").container(\"<container id>\").delete();\n   * ```\n   */\n\n\n  container(id) {\n    return new Container(this, id, this.clientContext);\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link User} by id.\n   *\n   * Use `.users` for creating new users, or querying/reading all users.\n   */\n\n\n  user(id) {\n    return new User(this, id, this.clientContext);\n  }\n  /** Read the definition of the given Database. */\n\n\n  read(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.read({\n        path,\n        resourceType: ResourceType.database,\n        resourceId: id,\n        options\n      });\n      return new DatabaseResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /** Delete the given Database. */\n\n\n  delete(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.delete({\n        path,\n        resourceType: ResourceType.database,\n        resourceId: id,\n        options\n      });\n      return new DatabaseResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Gets offer on database. If none exists, returns an OfferResponse with undefined.\n   * @param options\n   */\n\n\n  readOffer(options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        resource: record\n      } = yield this.read();\n      const path = \"/offers\";\n      const url = record._self;\n      const response = yield this.clientContext.queryFeed({\n        path,\n        resourceId: \"\",\n        resourceType: ResourceType.offer,\n        query: `SELECT * from root where root.resource = \"${url}\"`,\n        resultFn: result => result.Offers,\n        options\n      });\n      const offer = response.result[0] ? new Offer(this.client, response.result[0].id, this.clientContext) : undefined;\n      return new OfferResponse(response.result[0], response.headers, response.code, offer);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Database/Database.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { createDatabaseUri, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { CosmosClient } from \"../../CosmosClient\";\nimport { RequestOptions } from \"../../request\";\nimport { Container, Containers } from \"../Container\";\nimport { User, Users } from \"../User\";\nimport { DatabaseDefinition } from \"./DatabaseDefinition\";\nimport { DatabaseResponse } from \"./DatabaseResponse\";\nimport { OfferResponse, OfferDefinition, Offer } from \"../Offer\";\nimport { Resource } from \"../Resource\";\n\n/**\n * Operations for reading or deleting an existing database.\n *\n * @see {@link Databases} for creating new databases, and reading/querying all databases; use `client.databases`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `database.read()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\nexport class Database {\n  /**\n   * Used for creating new containers, or querying/reading all containers.\n   *\n   * Use `.container(id)` to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * @example Create a new container\n   * ```typescript\n   * const {body: containerDefinition, container} = await client.database(\"<db id>\").containers.create({id: \"<container id>\"});\n   * ```\n   */\n  public readonly containers: Containers;\n  /**\n   * Used for creating new users, or querying/reading all users.\n   *\n   * Use `.user(id)` to read, replace, or delete a specific, existing {@link User} by id.\n   */\n  public readonly users: Users;\n\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return createDatabaseUri(this.id);\n  }\n\n  /** Returns a new {@link Database} instance.\n   *\n   * Note: the intention is to get this object from {@link CosmosClient} via `client.database(id)`, not to instantiate it yourself.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private clientContext: ClientContext\n  ) {\n    this.containers = new Containers(this, this.clientContext);\n    this.users = new Users(this, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * Use `.containers` creating new containers, or querying/reading all containers.\n   *\n   * @example Delete a container\n   * ```typescript\n   * await client.database(\"<db id>\").container(\"<container id>\").delete();\n   * ```\n   */\n  public container(id: string): Container {\n    return new Container(this, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link User} by id.\n   *\n   * Use `.users` for creating new users, or querying/reading all users.\n   */\n  public user(id: string): User {\n    return new User(this, id, this.clientContext);\n  }\n\n  /** Read the definition of the given Database. */\n  public async read(options?: RequestOptions): Promise<DatabaseResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<DatabaseDefinition>({\n      path,\n      resourceType: ResourceType.database,\n      resourceId: id,\n      options\n    });\n    return new DatabaseResponse(response.result, response.headers, response.code, this);\n  }\n\n  /** Delete the given Database. */\n  public async delete(options?: RequestOptions): Promise<DatabaseResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.delete<DatabaseDefinition>({\n      path,\n      resourceType: ResourceType.database,\n      resourceId: id,\n      options\n    });\n    return new DatabaseResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Gets offer on database. If none exists, returns an OfferResponse with undefined.\n   * @param options\n   */\n  public async readOffer(options: RequestOptions = {}): Promise<OfferResponse> {\n    const { resource: record } = await this.read();\n    const path = \"/offers\";\n    const url = record._self;\n    const response = await this.clientContext.queryFeed<OfferDefinition & Resource[]>({\n      path,\n      resourceId: \"\",\n      resourceType: ResourceType.offer,\n      query: `SELECT * from root where root.resource = \"${url}\"`,\n      resultFn: (result) => result.Offers,\n      options\n    });\n    const offer = response.result[0]\n      ? new Offer(this.client, response.result[0].id, this.clientContext)\n      : undefined;\n    return new OfferResponse(response.result[0], response.headers, response.code, offer);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}