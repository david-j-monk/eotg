{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\nexport class RuntimeExecutionTimes {\n  constructor(queryEngineExecutionTime, systemFunctionExecutionTime, userDefinedFunctionExecutionTime) {\n    this.queryEngineExecutionTime = queryEngineExecutionTime;\n    this.systemFunctionExecutionTime = systemFunctionExecutionTime;\n    this.userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime;\n  }\n  /**\n   * returns a new RuntimeExecutionTimes instance that is the addition of this and the arguments.\n   */\n\n\n  add(...runtimeExecutionTimesArray) {\n    let queryEngineExecutionTime = this.queryEngineExecutionTime;\n    let systemFunctionExecutionTime = this.systemFunctionExecutionTime;\n    let userDefinedFunctionExecutionTime = this.userDefinedFunctionExecutionTime;\n\n    for (const runtimeExecutionTimes of runtimeExecutionTimesArray) {\n      if (runtimeExecutionTimes == null) {\n        throw new Error(\"runtimeExecutionTimes has null or undefined item(s)\");\n      }\n\n      queryEngineExecutionTime = queryEngineExecutionTime.add(runtimeExecutionTimes.queryEngineExecutionTime);\n      systemFunctionExecutionTime = systemFunctionExecutionTime.add(runtimeExecutionTimes.systemFunctionExecutionTime);\n      userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime.add(runtimeExecutionTimes.userDefinedFunctionExecutionTime);\n    }\n\n    return new RuntimeExecutionTimes(queryEngineExecutionTime, systemFunctionExecutionTime, userDefinedFunctionExecutionTime);\n  }\n  /**\n   * Output the RuntimeExecutionTimes as a delimited string.\n   */\n\n\n  toDelimitedString() {\n    // tslint:disable-next-line:max-line-length\n    return `${QueryMetricsConstants.SystemFunctionExecuteTimeInMs}=${this.systemFunctionExecutionTime.totalMilliseconds()};` + // tslint:disable-next-line:max-line-length\n    `${QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs}=${this.userDefinedFunctionExecutionTime.totalMilliseconds()}`;\n  }\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class that is\n   *  the aggregation of an array of RuntimeExecutionTimes.\n   */\n\n\n  static createFromArray(runtimeExecutionTimesArray) {\n    if (runtimeExecutionTimesArray == null) {\n      throw new Error(\"runtimeExecutionTimesArray is null or undefined item(s)\");\n    }\n\n    return RuntimeExecutionTimes.zero.add(...runtimeExecutionTimesArray);\n  }\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class this is deserialized from a delimited string.\n   */\n\n\n  static createFromDelimitedString(delimitedString) {\n    const metrics = parseDelimitedString(delimitedString);\n    const vmExecutionTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs);\n    const indexLookupTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs);\n    const documentLoadTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs);\n    const documentWriteTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs);\n    let queryEngineExecutionTime = TimeSpan.zero;\n    queryEngineExecutionTime = queryEngineExecutionTime.add(vmExecutionTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(indexLookupTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentLoadTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentWriteTime);\n    return new RuntimeExecutionTimes(queryEngineExecutionTime, timeSpanFromMetrics(metrics, QueryMetricsConstants.SystemFunctionExecuteTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs));\n  }\n\n}\nRuntimeExecutionTimes.zero = new RuntimeExecutionTimes(TimeSpan.zero, TimeSpan.zero, TimeSpan.zero);","map":{"version":3,"sources":["../../src/queryMetrics/runtimeExecutionTimes.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class RuntimeExecutionTimes {\n  constructor(\n    public readonly queryEngineExecutionTime: TimeSpan,\n    public readonly systemFunctionExecutionTime: TimeSpan,\n    public readonly userDefinedFunctionExecutionTime: TimeSpan\n  ) {}\n\n  /**\n   * returns a new RuntimeExecutionTimes instance that is the addition of this and the arguments.\n   */\n  public add(...runtimeExecutionTimesArray: RuntimeExecutionTimes[]) {\n    let queryEngineExecutionTime = this.queryEngineExecutionTime;\n    let systemFunctionExecutionTime = this.systemFunctionExecutionTime;\n    let userDefinedFunctionExecutionTime = this.userDefinedFunctionExecutionTime;\n\n    for (const runtimeExecutionTimes of runtimeExecutionTimesArray) {\n      if (runtimeExecutionTimes == null) {\n        throw new Error(\"runtimeExecutionTimes has null or undefined item(s)\");\n      }\n\n      queryEngineExecutionTime = queryEngineExecutionTime.add(\n        runtimeExecutionTimes.queryEngineExecutionTime\n      );\n      systemFunctionExecutionTime = systemFunctionExecutionTime.add(\n        runtimeExecutionTimes.systemFunctionExecutionTime\n      );\n      userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime.add(\n        runtimeExecutionTimes.userDefinedFunctionExecutionTime\n      );\n    }\n\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      systemFunctionExecutionTime,\n      userDefinedFunctionExecutionTime\n    );\n  }\n\n  /**\n   * Output the RuntimeExecutionTimes as a delimited string.\n   */\n  public toDelimitedString() {\n    // tslint:disable-next-line:max-line-length\n    return (\n      `${\n        QueryMetricsConstants.SystemFunctionExecuteTimeInMs\n      }=${this.systemFunctionExecutionTime.totalMilliseconds()};` +\n      // tslint:disable-next-line:max-line-length\n      `${\n        QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs\n      }=${this.userDefinedFunctionExecutionTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new RuntimeExecutionTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero\n  );\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class that is\n   *  the aggregation of an array of RuntimeExecutionTimes.\n   */\n  public static createFromArray(runtimeExecutionTimesArray: RuntimeExecutionTimes[]) {\n    if (runtimeExecutionTimesArray == null) {\n      throw new Error(\"runtimeExecutionTimesArray is null or undefined item(s)\");\n    }\n\n    return RuntimeExecutionTimes.zero.add(...runtimeExecutionTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(delimitedString: string) {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const vmExecutionTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs);\n    const indexLookupTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs);\n    const documentLoadTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentLoadTimeInMs\n    );\n    const documentWriteTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentWriteTimeInMs\n    );\n\n    let queryEngineExecutionTime = TimeSpan.zero;\n    queryEngineExecutionTime = queryEngineExecutionTime.add(vmExecutionTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(indexLookupTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentLoadTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentWriteTime);\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.SystemFunctionExecuteTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs)\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}