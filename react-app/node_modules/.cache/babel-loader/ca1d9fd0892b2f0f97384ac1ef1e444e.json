{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Constants, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { ConflictResponse } from \"./ConflictResponse\";\n/**\n * Use to read or delete a given {@link Conflict} by id.\n *\n * @see {@link Conflicts} to query or read all conflicts.\n */\n\nexport class Conflict {\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link Conflict}.\n   */\n  constructor(container, id, clientContext) {\n    this.container = container;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n\n\n  get url() {\n    return `/${this.container.url}/${Constants.Path.ConflictsPathSegment}/${this.id}`;\n  }\n  /**\n   * Read the {@link ConflictDefinition} for the given {@link Conflict}.\n   * @param options\n   */\n\n\n  read(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url, ResourceType.conflicts);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.read({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options\n      });\n      return new ConflictResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Delete the given {@link ConflictDefinition}.\n   * @param options\n   */\n\n\n  delete(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.delete({\n        path,\n        resourceType: ResourceType.conflicts,\n        resourceId: id,\n        options\n      });\n      return new ConflictResponse(response.result, response.headers, response.code, this);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Conflict/Conflict.ts"],"names":[],"mappings":";AAGA,SAAS,SAAT,EAAoB,aAApB,EAAmC,eAAnC,EAAoD,YAApD,QAAwE,cAAxE;AAIA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA;;;;;;AAKA,OAAM,MAAO,QAAP,CAAe;AAOnB;;;;;AAKA,EAAA,WAAA,CACkB,SADlB,EAEkB,EAFlB,EAGmB,aAHnB,EAG+C;AAF7B,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,EAAA,GAAA,EAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;AAfJ;;;;;AAGA,MAAW,GAAX,GAAc;AACZ,WAAO,IAAI,KAAK,SAAL,CAAe,GAAG,IAAI,SAAS,CAAC,IAAV,CAAe,oBAAoB,IAAI,KAAK,EAAE,EAA/E;AACD;AAYD;;;;;;AAIa,EAAA,IAAI,CAAC,OAAD,EAAyB;;AACxC,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,EAAW,YAAY,CAAC,SAAxB,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,IAAnB,CAA4C;AACjE,QAAA,IADiE;AAEjE,QAAA,YAAY,EAAE,YAAY,CAAC,IAFsC;AAGjE,QAAA,UAAU,EAAE,EAHqD;AAIjE,QAAA;AAJiE,OAA5C,CAAvB;AAMA,aAAO,IAAI,gBAAJ,CAAqB,QAAQ,CAAC,MAA9B,EAAsC,QAAQ,CAAC,OAA/C,EAAwD,QAAQ,CAAC,IAAjE,EAAuE,IAAvE,CAAP;AACD,K;AAAA;AAED;;;;;;AAIa,EAAA,MAAM,CAAC,OAAD,EAAyB;;AAC1C,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,MAAnB,CAA8C;AACnE,QAAA,IADmE;AAEnE,QAAA,YAAY,EAAE,YAAY,CAAC,SAFwC;AAGnE,QAAA,UAAU,EAAE,EAHuD;AAInE,QAAA;AAJmE,OAA9C,CAAvB;AAMA,aAAO,IAAI,gBAAJ,CAAqB,QAAQ,CAAC,MAA9B,EAAsC,QAAQ,CAAC,OAA/C,EAAwD,QAAQ,CAAC,IAAjE,EAAuE,IAAvE,CAAP;AACD,K;AAAA;;AAlDkB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { Constants, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { ConflictDefinition } from \"./ConflictDefinition\";\nimport { ConflictResponse } from \"./ConflictResponse\";\n\n/**\n * Use to read or delete a given {@link Conflict} by id.\n *\n * @see {@link Conflicts} to query or read all conflicts.\n */\nexport class Conflict {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return `/${this.container.url}/${Constants.Path.ConflictsPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link Conflict}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link ConflictDefinition} for the given {@link Conflict}.\n   * @param options\n   */\n  public async read(options?: RequestOptions): Promise<ConflictResponse> {\n    const path = getPathFromLink(this.url, ResourceType.conflicts);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.read<ConflictDefinition>({\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    return new ConflictResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Delete the given {@link ConflictDefinition}.\n   * @param options\n   */\n  public async delete(options?: RequestOptions): Promise<ConflictResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete<ConflictDefinition>({\n      path,\n      resourceType: ResourceType.conflicts,\n      resourceId: id,\n      options\n    });\n    return new ConflictResponse(response.result, response.headers, response.code, this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}