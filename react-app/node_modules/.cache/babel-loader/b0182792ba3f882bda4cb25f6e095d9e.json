{"ast":null,"code":"import { __awaiter } from \"tslib\"; // Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Database, Databases } from \"./client/Database\";\nimport { Offer, Offers } from \"./client/Offer\";\nimport { ClientContext } from \"./ClientContext\";\nimport { parseConnectionString } from \"./common\";\nimport { Constants } from \"./common/constants\";\nimport { getUserAgent } from \"./common/platform\";\nimport { defaultConnectionPolicy } from \"./documents\";\nimport { GlobalEndpointManager } from \"./globalEndpointManager\";\nimport { ResourceResponse } from \"./request\";\nimport { checkURL } from \"./utils/url\";\n/**\n * Provides a client-side logical representation of the Azure Cosmos DB database account.\n * This client is used to configure and execute requests in the Azure Cosmos DB database service.\n * @example Instantiate a client and create a new database\n * ```typescript\n * const client = new CosmosClient({endpoint: \"<URL HERE>\", auth: {masterKey: \"<KEY HERE>\"}});\n * await client.databases.create({id: \"<datbase name here>\"});\n * ```\n * @example Instantiate a client with custom Connection Policy\n * ```typescript\n * const connectionPolicy = new ConnectionPolicy();\n * connectionPolicy.RequestTimeout = 10000;\n * const client = new CosmosClient({\n *    endpoint: \"<URL HERE>\",\n *    auth: {masterKey: \"<KEY HERE>\"},\n *    connectionPolicy\n * });\n * ```\n */\n\nexport class CosmosClient {\n  constructor(optionsOrConnectionString) {\n    if (typeof optionsOrConnectionString === \"string\") {\n      optionsOrConnectionString = parseConnectionString(optionsOrConnectionString);\n    }\n\n    const endpoint = checkURL(optionsOrConnectionString.endpoint);\n\n    if (!endpoint) {\n      throw new Error(\"Invalid endpoint specified\");\n    }\n\n    optionsOrConnectionString.connectionPolicy = Object.assign({}, defaultConnectionPolicy, optionsOrConnectionString.connectionPolicy);\n    optionsOrConnectionString.defaultHeaders = optionsOrConnectionString.defaultHeaders || {};\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.CacheControl] = \"no-cache\";\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.Version] = Constants.CurrentVersion;\n\n    if (optionsOrConnectionString.consistencyLevel !== undefined) {\n      optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.ConsistencyLevel] = optionsOrConnectionString.consistencyLevel;\n    }\n\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.UserAgent] = getUserAgent(optionsOrConnectionString.userAgentSuffix);\n    const globalEndpointManager = new GlobalEndpointManager(optionsOrConnectionString, opts => __awaiter(this, void 0, void 0, function* () {\n      return this.getDatabaseAccount(opts);\n    }));\n    this.clientContext = new ClientContext(optionsOrConnectionString, globalEndpointManager);\n    this.databases = new Databases(this, this.clientContext);\n    this.offers = new Offers(this, this.clientContext);\n  }\n  /**\n   * Get information about the current {@link DatabaseAccount} (including which regions are supported, etc.)\n   */\n\n\n  getDatabaseAccount(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this.clientContext.getDatabaseAccount(options);\n      return new ResourceResponse(response.result, response.headers, response.code);\n    });\n  }\n  /**\n   * Gets the currently used write endpoint url. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n\n\n  getWriteEndpoint() {\n    return this.clientContext.getWriteEndpoint();\n  }\n  /**\n   * Gets the currently used read endpoint. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n\n\n  getReadEndpoint() {\n    return this.clientContext.getReadEndpoint();\n  }\n  /**\n   * Used for reading, updating, or deleting a existing database by id or accessing containers belonging to that database.\n   *\n   * This does not make a network call. Use `.read` to get info about the database after getting the {@link Database} object.\n   *\n   * @param id The id of the database.\n   * @example Create a new container off of an existing database\n   * ```typescript\n   * const container = client.database(\"<database id>\").containers.create(\"<container id>\");\n   * ```\n   *\n   * @example Delete an existing database\n   * ```typescript\n   * await client.database(\"<id here>\").delete();\n   * ```\n   */\n\n\n  database(id) {\n    return new Database(this, id, this.clientContext);\n  }\n  /**\n   * Used for reading, or updating a existing offer by id.\n   * @param id The id of the offer.\n   */\n\n\n  offer(id) {\n    return new Offer(this, id, this.clientContext);\n  }\n\n}","map":{"version":3,"sources":["../src/CosmosClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Database, Databases } from \"./client/Database\";\nimport { Offer, Offers } from \"./client/Offer\";\nimport { ClientContext } from \"./ClientContext\";\nimport { parseConnectionString } from \"./common\";\nimport { Constants } from \"./common/constants\";\nimport { getUserAgent } from \"./common/platform\";\nimport { CosmosClientOptions } from \"./CosmosClientOptions\";\nimport { DatabaseAccount, defaultConnectionPolicy } from \"./documents\";\nimport { GlobalEndpointManager } from \"./globalEndpointManager\";\nimport { RequestOptions, ResourceResponse } from \"./request\";\nimport { checkURL } from \"./utils/url\";\n\n/**\n * Provides a client-side logical representation of the Azure Cosmos DB database account.\n * This client is used to configure and execute requests in the Azure Cosmos DB database service.\n * @example Instantiate a client and create a new database\n * ```typescript\n * const client = new CosmosClient({endpoint: \"<URL HERE>\", auth: {masterKey: \"<KEY HERE>\"}});\n * await client.databases.create({id: \"<datbase name here>\"});\n * ```\n * @example Instantiate a client with custom Connection Policy\n * ```typescript\n * const connectionPolicy = new ConnectionPolicy();\n * connectionPolicy.RequestTimeout = 10000;\n * const client = new CosmosClient({\n *    endpoint: \"<URL HERE>\",\n *    auth: {masterKey: \"<KEY HERE>\"},\n *    connectionPolicy\n * });\n * ```\n */\nexport class CosmosClient {\n  /**\n   * Used for creating new databases, or querying/reading all databases.\n   *\n   * Use `.database(id)` to read, replace, or delete a specific, existing database by id.\n   *\n   * @example Create a new database\n   * ```typescript\n   * const {resource: databaseDefinition, database} = await client.databases.create({id: \"<name here>\"});\n   * ```\n   */\n  public readonly databases: Databases;\n  /**\n   * Used for querying & reading all offers.\n   *\n   * Use `.offer(id)` to read, or replace existing offers.\n   */\n  public readonly offers: Offers;\n  private clientContext: ClientContext;\n  /**\n   * Creates a new {@link CosmosClient} object from a connection string. Your database connection string can be found in the Azure Portal\n   */\n  constructor(connectionString: string);\n  /**\n   * Creates a new {@link CosmosClient} object. See {@link CosmosClientOptions} for more details on what options you can use.\n   * @param options bag of options - require at least endpoint and auth to be configured\n   */\n  constructor(options: CosmosClientOptions); // tslint:disable-line:unified-signatures\n  constructor(optionsOrConnectionString: string | CosmosClientOptions) {\n    if (typeof optionsOrConnectionString === \"string\") {\n      optionsOrConnectionString = parseConnectionString(optionsOrConnectionString);\n    }\n\n    const endpoint = checkURL(optionsOrConnectionString.endpoint);\n    if (!endpoint) {\n      throw new Error(\"Invalid endpoint specified\");\n    }\n\n    optionsOrConnectionString.connectionPolicy = Object.assign(\n      {},\n      defaultConnectionPolicy,\n      optionsOrConnectionString.connectionPolicy\n    );\n\n    optionsOrConnectionString.defaultHeaders = optionsOrConnectionString.defaultHeaders || {};\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.CacheControl] = \"no-cache\";\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.Version] =\n      Constants.CurrentVersion;\n    if (optionsOrConnectionString.consistencyLevel !== undefined) {\n      optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.ConsistencyLevel] =\n        optionsOrConnectionString.consistencyLevel;\n    }\n\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.UserAgent] = getUserAgent(\n      optionsOrConnectionString.userAgentSuffix\n    );\n\n    const globalEndpointManager = new GlobalEndpointManager(\n      optionsOrConnectionString,\n      async (opts: RequestOptions) => this.getDatabaseAccount(opts)\n    );\n    this.clientContext = new ClientContext(optionsOrConnectionString, globalEndpointManager);\n\n    this.databases = new Databases(this, this.clientContext);\n    this.offers = new Offers(this, this.clientContext);\n  }\n\n  /**\n   * Get information about the current {@link DatabaseAccount} (including which regions are supported, etc.)\n   */\n  public async getDatabaseAccount(\n    options?: RequestOptions\n  ): Promise<ResourceResponse<DatabaseAccount>> {\n    const response = await this.clientContext.getDatabaseAccount(options);\n    return new ResourceResponse<DatabaseAccount>(response.result, response.headers, response.code);\n  }\n\n  /**\n   * Gets the currently used write endpoint url. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public getWriteEndpoint(): Promise<string> {\n    return this.clientContext.getWriteEndpoint();\n  }\n\n  /**\n   * Gets the currently used read endpoint. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public getReadEndpoint(): Promise<string> {\n    return this.clientContext.getReadEndpoint();\n  }\n\n  /**\n   * Used for reading, updating, or deleting a existing database by id or accessing containers belonging to that database.\n   *\n   * This does not make a network call. Use `.read` to get info about the database after getting the {@link Database} object.\n   *\n   * @param id The id of the database.\n   * @example Create a new container off of an existing database\n   * ```typescript\n   * const container = client.database(\"<database id>\").containers.create(\"<container id>\");\n   * ```\n   *\n   * @example Delete an existing database\n   * ```typescript\n   * await client.database(\"<id here>\").delete();\n   * ```\n   */\n  public database(id: string): Database {\n    return new Database(this, id, this.clientContext);\n  }\n\n  /**\n   * Used for reading, or updating a existing offer by id.\n   * @param id The id of the offer.\n   */\n  public offer(id: string) {\n    return new Offer(this, id, this.clientContext);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}