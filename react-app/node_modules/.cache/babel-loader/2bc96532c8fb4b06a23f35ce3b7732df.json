{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport debugLib from \"debug\";\n/** @hidden */\n\nlet cosmosLevelFilter = \"warn|error\";\n\nif (typeof process !== \"undefined\" && process.env && process.env.COSMOS_LOG_LEVEL) {\n  cosmosLevelFilter = process.env.COSMOS_LOG_LEVEL;\n}\n/** @hidden */\n\n\nconst cosmosDebug = debugLib(\"cosmos\");\n/** @hidden */\n\nconst levelLogger = (namespaceLogger, level) => {\n  return message => {\n    if (cosmosLevelFilter.includes(level)) {\n      namespaceLogger(\"[\" + new Date().toISOString() + \"][\" + level + \"]: %o\", message);\n    }\n  };\n};\n/** @hidden */\n\n\nexport const logger = namespace => {\n  const namespaceLogger = cosmosDebug.extend(namespace);\n  return {\n    silly: levelLogger(namespaceLogger, \"silly\"),\n    debug: levelLogger(namespaceLogger, \"debug\"),\n    info: levelLogger(namespaceLogger, \"info\"),\n    warn: levelLogger(namespaceLogger, \"warn\"),\n    error: levelLogger(namespaceLogger, \"error\")\n  };\n};","map":{"version":3,"sources":["../../src/common/logger.ts"],"names":[],"mappings":"AAAA;AACA;AACA,OAAO,QAAP,MAAqB,OAArB;AAEA;;AACA,IAAI,iBAAiB,GAAG,YAAxB;;AAEA,IAAI,OAAO,OAAP,KAAmB,WAAnB,IAAkC,OAAO,CAAC,GAA1C,IAAiD,OAAO,CAAC,GAAR,CAAY,gBAAjE,EAAmF;AACjF,EAAA,iBAAiB,GAAG,OAAO,CAAC,GAAR,CAAY,gBAAhC;AACD;AAED;;;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,QAAD,CAA5B;AAKA;;AACA,MAAM,WAAW,GAAG,CAAC,eAAD,EAAqC,KAArC,KAAwD;AAC1E,SAAQ,OAAD,IAA6C;AAClD,QAAI,iBAAiB,CAAC,QAAlB,CAA2B,KAA3B,CAAJ,EAAuC;AACrC,MAAA,eAAe,CAAC,MAAM,IAAI,IAAJ,GAAW,WAAX,EAAN,GAAiC,IAAjC,GAAwC,KAAxC,GAAgD,OAAjD,EAA0D,OAA1D,CAAf;AACD;AACF,GAJD;AAKD,CAND;AAQA;;;AACA,OAAO,MAAM,MAAM,GAAI,SAAD,IAAsB;AAC1C,QAAM,eAAe,GAAG,WAAW,CAAC,MAAZ,CAAmB,SAAnB,CAAxB;AACA,SAAO;AACL,IAAA,KAAK,EAAE,WAAW,CAAC,eAAD,EAAkB,OAAlB,CADb;AAEL,IAAA,KAAK,EAAE,WAAW,CAAC,eAAD,EAAkB,OAAlB,CAFb;AAGL,IAAA,IAAI,EAAE,WAAW,CAAC,eAAD,EAAkB,MAAlB,CAHZ;AAIL,IAAA,IAAI,EAAE,WAAW,CAAC,eAAD,EAAkB,MAAlB,CAJZ;AAKL,IAAA,KAAK,EAAE,WAAW,CAAC,eAAD,EAAkB,OAAlB;AALb,GAAP;AAOD,CATM","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport debugLib from \"debug\";\n\n/** @hidden */\nlet cosmosLevelFilter = \"warn|error\";\n\nif (typeof process !== \"undefined\" && process.env && process.env.COSMOS_LOG_LEVEL) {\n  cosmosLevelFilter = process.env.COSMOS_LOG_LEVEL;\n}\n\n/** @hidden */\nconst cosmosDebug = debugLib(\"cosmos\");\n\n/** @hidden */\ntype logLevel = \"silly\" | \"debug\" | \"info\" | \"warn\" | \"error\";\n\n/** @hidden */\nconst levelLogger = (namespaceLogger: debugLib.Debugger, level: logLevel) => {\n  return (message: string | { [key: string]: any }) => {\n    if (cosmosLevelFilter.includes(level)) {\n      namespaceLogger(\"[\" + new Date().toISOString() + \"][\" + level + \"]: %o\", message);\n    }\n  };\n};\n\n/** @hidden */\nexport const logger = (namespace: string) => {\n  const namespaceLogger = cosmosDebug.extend(namespace);\n  return {\n    silly: levelLogger(namespaceLogger, \"silly\"),\n    debug: levelLogger(namespaceLogger, \"debug\"),\n    info: levelLogger(namespaceLogger, \"info\"),\n    warn: levelLogger(namespaceLogger, \"warn\"),\n    error: levelLogger(namespaceLogger, \"error\")\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}