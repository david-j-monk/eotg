{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nexport class ResourceResponse {\n  constructor(resource, headers, statusCode, substatus) {\n    this.resource = resource;\n    this.headers = headers;\n    this.statusCode = statusCode;\n    this.substatus = substatus;\n  }\n\n  get requestCharge() {\n    return Number(this.headers[Constants.HttpHeaders.RequestCharge]) || 0;\n  }\n\n  get activityId() {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n\n  get etag() {\n    return this.headers[Constants.HttpHeaders.ETag];\n  }\n\n}","map":{"version":3,"sources":["../../src/request/ResourceResponse.ts"],"names":[],"mappings":"AAAA;AACA;AACA,SAAS,SAAT,QAA0B,WAA1B;AAIA,OAAM,MAAO,gBAAP,CAAuB;AAC3B,EAAA,WAAA,CACkB,QADlB,EAEkB,OAFlB,EAGkB,UAHlB,EAIkB,SAJlB,EAI2C;AAHzB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACd;;AACJ,MAAW,aAAX,GAAwB;AACtB,WAAO,MAAM,CAAC,KAAK,OAAL,CAAa,SAAS,CAAC,WAAV,CAAsB,aAAnC,CAAD,CAAN,IAA6D,CAApE;AACD;;AACD,MAAW,UAAX,GAAqB;AACnB,WAAO,KAAK,OAAL,CAAa,SAAS,CAAC,WAAV,CAAsB,UAAnC,CAAP;AACD;;AACD,MAAW,IAAX,GAAe;AACb,WAAO,KAAK,OAAL,CAAa,SAAS,CAAC,WAAV,CAAsB,IAAnC,CAAP;AACD;;AAf0B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nimport { CosmosHeaders } from \"../queryExecutionContext/CosmosHeaders\";\nimport { StatusCode, SubStatusCode } from \"./StatusCodes\";\n\nexport class ResourceResponse<TResource> {\n  constructor(\n    public readonly resource: TResource | undefined,\n    public readonly headers: CosmosHeaders,\n    public readonly statusCode: StatusCode,\n    public readonly substatus?: SubStatusCode\n  ) {}\n  public get requestCharge(): number {\n    return Number(this.headers[Constants.HttpHeaders.RequestCharge]) || 0;\n  }\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId] as string;\n  }\n  public get etag(): string {\n    return this.headers[Constants.HttpHeaders.ETag] as string;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}