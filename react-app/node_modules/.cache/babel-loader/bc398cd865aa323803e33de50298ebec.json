{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter } from \"tslib\";\nimport { ChangeFeedResponse } from \"./ChangeFeedResponse\";\nimport { Constants, ResourceType, StatusCodes } from \"./common\";\n/**\n * Provides iterator for change feed.\n *\n * Use `Items.changeFeed()` to get an instance of the iterator.\n */\n\nexport class ChangeFeedIterator {\n  /**\n   * @internal\n   * @hidden\n   *\n   * @param clientContext\n   * @param resourceId\n   * @param resourceLink\n   * @param isPartitionedContainer\n   * @param changeFeedOptions\n   */\n  constructor(clientContext, resourceId, resourceLink, partitionKey, changeFeedOptions) {\n    this.clientContext = clientContext;\n    this.resourceId = resourceId;\n    this.resourceLink = resourceLink;\n    this.partitionKey = partitionKey;\n    this.changeFeedOptions = changeFeedOptions; // partition key XOR partition key range id\n\n    const partitionKeyValid = partitionKey !== undefined;\n    this.isPartitionSpecified = partitionKeyValid;\n    let canUseStartFromBeginning = true;\n\n    if (changeFeedOptions.continuation) {\n      this.nextIfNoneMatch = changeFeedOptions.continuation;\n      canUseStartFromBeginning = false;\n    }\n\n    if (changeFeedOptions.startTime) {\n      // .toUTCString() is platform specific, but most platforms use RFC 1123.\n      // In ECMAScript 2018, this was standardized to RFC 1123.\n      // See for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n      this.ifModifiedSince = changeFeedOptions.startTime.toUTCString();\n      canUseStartFromBeginning = false;\n    }\n\n    if (canUseStartFromBeginning && !changeFeedOptions.startFromBeginning) {\n      this.nextIfNoneMatch = ChangeFeedIterator.IfNoneMatchAllHeaderValue;\n    }\n  }\n  /**\n   * Gets a value indicating whether there are potentially additional results that can be retrieved.\n   *\n   * Initially returns true. This value is set based on whether the last execution returned a continuation token.\n   *\n   * @returns Boolean value representing if whether there are potentially additional results that can be retrieved.\n   */\n\n\n  get hasMoreResults() {\n    return this.lastStatusCode !== StatusCodes.NotModified;\n  }\n  /**\n   * Gets an async iterator which will yield pages of results from Azure Cosmos DB.\n   */\n\n\n  getAsyncIterator() {\n    return __asyncGenerator(this, arguments, function* getAsyncIterator_1() {\n      do {\n        const result = yield __await(this.fetchNext());\n\n        if (result.count > 0) {\n          yield yield __await(result);\n        }\n      } while (this.hasMoreResults);\n    });\n  }\n  /**\n   * Read feed and retrieves the next page of results in Azure Cosmos DB.\n   */\n\n\n  fetchNext() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this.getFeedResponse();\n      this.lastStatusCode = response.statusCode;\n      this.nextIfNoneMatch = response.headers[Constants.HttpHeaders.ETag];\n      return response;\n    });\n  }\n\n  getFeedResponse() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.isPartitionSpecified) {\n        throw new Error(\"Container is partitioned, but no partition key or partition key range id was specified.\");\n      }\n\n      const feedOptions = {\n        initialHeaders: {},\n        useIncrementalFeed: true\n      };\n\n      if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n        feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n      }\n\n      if (this.changeFeedOptions.sessionToken) {\n        feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n      }\n\n      if (this.nextIfNoneMatch) {\n        feedOptions.accessCondition = {\n          type: Constants.HttpHeaders.IfNoneMatch,\n          condition: this.nextIfNoneMatch\n        };\n      }\n\n      if (this.ifModifiedSince) {\n        feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.ifModifiedSince;\n      }\n\n      const response = yield this.clientContext.queryFeed({\n        path: this.resourceLink,\n        resourceType: ResourceType.item,\n        resourceId: this.resourceId,\n        resultFn: result => result ? result.Documents : [],\n        query: undefined,\n        options: feedOptions,\n        partitionKey: this.partitionKey\n      }); // TODO: some funky issues with query feed. Probably need to change it up.\n\n      return new ChangeFeedResponse(response.result, response.result ? response.result.length : 0, response.code, response.headers);\n    });\n  }\n\n}\nChangeFeedIterator.IfNoneMatchAllHeaderValue = \"*\";","map":{"version":3,"sources":["../src/ChangeFeedIterator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference lib=\"esnext.asynciterable\" />\nimport { ChangeFeedOptions } from \"./ChangeFeedOptions\";\nimport { ChangeFeedResponse } from \"./ChangeFeedResponse\";\nimport { Resource } from \"./client\";\nimport { ClientContext } from \"./ClientContext\";\nimport { Constants, ResourceType, StatusCodes } from \"./common\";\nimport { FeedOptions } from \"./request\";\nimport { Response } from \"./request\";\n\n/**\n * Provides iterator for change feed.\n *\n * Use `Items.changeFeed()` to get an instance of the iterator.\n */\nexport class ChangeFeedIterator<T> {\n  private static readonly IfNoneMatchAllHeaderValue = \"*\";\n  private nextIfNoneMatch: string;\n  private ifModifiedSince: string;\n  private lastStatusCode: number;\n  private isPartitionSpecified: boolean;\n\n  /**\n   * @internal\n   * @hidden\n   *\n   * @param clientContext\n   * @param resourceId\n   * @param resourceLink\n   * @param isPartitionedContainer\n   * @param changeFeedOptions\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private resourceId: string,\n    private resourceLink: string,\n    private partitionKey: string | number | boolean,\n    private changeFeedOptions: ChangeFeedOptions\n  ) {\n    // partition key XOR partition key range id\n    const partitionKeyValid = partitionKey !== undefined;\n    this.isPartitionSpecified = partitionKeyValid;\n\n    let canUseStartFromBeginning = true;\n    if (changeFeedOptions.continuation) {\n      this.nextIfNoneMatch = changeFeedOptions.continuation;\n      canUseStartFromBeginning = false;\n    }\n\n    if (changeFeedOptions.startTime) {\n      // .toUTCString() is platform specific, but most platforms use RFC 1123.\n      // In ECMAScript 2018, this was standardized to RFC 1123.\n      // See for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n      this.ifModifiedSince = changeFeedOptions.startTime.toUTCString();\n      canUseStartFromBeginning = false;\n    }\n\n    if (canUseStartFromBeginning && !changeFeedOptions.startFromBeginning) {\n      this.nextIfNoneMatch = ChangeFeedIterator.IfNoneMatchAllHeaderValue;\n    }\n  }\n\n  /**\n   * Gets a value indicating whether there are potentially additional results that can be retrieved.\n   *\n   * Initially returns true. This value is set based on whether the last execution returned a continuation token.\n   *\n   * @returns Boolean value representing if whether there are potentially additional results that can be retrieved.\n   */\n  get hasMoreResults(): boolean {\n    return this.lastStatusCode !== StatusCodes.NotModified;\n  }\n\n  /**\n   * Gets an async iterator which will yield pages of results from Azure Cosmos DB.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.fetchNext();\n      if (result.count > 0) {\n        yield result;\n      }\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Read feed and retrieves the next page of results in Azure Cosmos DB.\n   */\n  public async fetchNext(): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    const response = await this.getFeedResponse();\n    this.lastStatusCode = response.statusCode;\n    this.nextIfNoneMatch = response.headers[Constants.HttpHeaders.ETag];\n    return response;\n  }\n\n  private async getFeedResponse(): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    if (!this.isPartitionSpecified) {\n      throw new Error(\n        \"Container is partitioned, but no partition key or partition key range id was specified.\"\n      );\n    }\n    const feedOptions: FeedOptions = { initialHeaders: {}, useIncrementalFeed: true };\n\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    if (this.nextIfNoneMatch) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: this.nextIfNoneMatch\n      };\n    }\n\n    if (this.ifModifiedSince) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.ifModifiedSince;\n    }\n\n    const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n      path: this.resourceLink,\n      resourceType: ResourceType.item,\n      resourceId: this.resourceId,\n      resultFn: (result) => (result ? result.Documents : []),\n      query: undefined,\n      options: feedOptions,\n      partitionKey: this.partitionKey\n    }) as Promise<any>); // TODO: some funky issues with query feed. Probably need to change it up.\n\n    return new ChangeFeedResponse(\n      response.result,\n      response.result ? response.result.length : 0,\n      response.code,\n      response.headers\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}