{"ast":null,"code":"import { OrderByDocumentProducerComparator } from \"./orderByDocumentProducerComparator\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\n/** @hidden */\n\nexport class OrderByQueryExecutionContext extends ParallelQueryExecutionContextBase {\n  /**\n   * Provides the OrderByQueryExecutionContext.\n   * This class is capable of handling orderby queries and dervives from ParallelQueryExecutionContextBase.\n   *\n   * When handling a parallelized query, it instantiates one instance of\n   * DocumentProcuder per target partition key range and aggregates the result of each.\n   *\n   * @constructor ParallelQueryExecutionContext\n   * @param {ClientContext} clientContext        - The service endpoint to use to create the client.\n   * @param {string} collectionLink                - The Collection Link\n   * @param {FeedOptions} [options]                - Represents the feed options.\n   * @param {object} partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo\n   * @ignore\n   */\n  constructor(clientContext, collectionLink, query, // TODO: any query\n  options, // TODO: any options\n  partitionedQueryExecutionInfo) {\n    // Calling on base class constructor\n    super(clientContext, collectionLink, query, options, partitionedQueryExecutionInfo);\n    this.orderByComparator = new OrderByDocumentProducerComparator(this.sortOrders);\n  } // Instance members are inherited\n  // Overriding documentProducerComparator for OrderByQueryExecutionContexts\n\n  /**\n   * Provides a Comparator for document producers which respects orderby sort order.\n   * @returns {object}        - Comparator Function\n   * @ignore\n   */\n\n\n  documentProducerComparator(docProd1, docProd2) {\n    return this.orderByComparator.compare(docProd1, docProd2);\n  }\n\n}","map":{"version":3,"sources":["../../src/queryExecutionContext/orderByQueryExecutionContext.ts"],"names":[],"mappings":"AAMA,SAAS,iCAAT,QAAkD,qCAAlD;AACA,SAAS,iCAAT,QAAkD,qCAAlD;AAEA;;AACA,OAAM,MAAO,4BAAP,SAA4C,iCAA5C,CAA6E;AAGjF;;;;;;;;;;;;;;AAcA,EAAA,WAAA,CACE,aADF,EAEE,cAFF,EAGE,KAHF,EAGc;AACZ,EAAA,OAJF,EAIgB;AACd,EAAA,6BALF,EAK8D;AAE5D;AACA,UAAM,aAAN,EAAqB,cAArB,EAAqC,KAArC,EAA4C,OAA5C,EAAqD,6BAArD;AACA,SAAK,iBAAL,GAAyB,IAAI,iCAAJ,CAAsC,KAAK,UAA3C,CAAzB;AACD,GA3BgF,CA4BjF;AAEA;;AACA;;;;;;;AAKO,EAAA,0BAA0B,CAAC,QAAD,EAA6B,QAA7B,EAAuD;AACtF,WAAO,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,QAA/B,EAAyC,QAAzC,CAAP;AACD;;AAtCgF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../ClientContext\";\nimport { PartitionedQueryExecutionInfo } from \"../request/ErrorResponse\";\nimport { DocumentProducer } from \"./documentProducer\";\nimport { ExecutionContext } from \"./ExecutionContext\";\nimport { OrderByDocumentProducerComparator } from \"./orderByDocumentProducerComparator\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\n\n/** @hidden */\nexport class OrderByQueryExecutionContext extends ParallelQueryExecutionContextBase\n  implements ExecutionContext {\n  private orderByComparator: any;\n  /**\n   * Provides the OrderByQueryExecutionContext.\n   * This class is capable of handling orderby queries and dervives from ParallelQueryExecutionContextBase.\n   *\n   * When handling a parallelized query, it instantiates one instance of\n   * DocumentProcuder per target partition key range and aggregates the result of each.\n   *\n   * @constructor ParallelQueryExecutionContext\n   * @param {ClientContext} clientContext        - The service endpoint to use to create the client.\n   * @param {string} collectionLink                - The Collection Link\n   * @param {FeedOptions} [options]                - Represents the feed options.\n   * @param {object} partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo\n   * @ignore\n   */\n  constructor(\n    clientContext: ClientContext,\n    collectionLink: string,\n    query: any, // TODO: any query\n    options: any, // TODO: any options\n    partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo\n  ) {\n    // Calling on base class constructor\n    super(clientContext, collectionLink, query, options, partitionedQueryExecutionInfo);\n    this.orderByComparator = new OrderByDocumentProducerComparator(this.sortOrders);\n  }\n  // Instance members are inherited\n\n  // Overriding documentProducerComparator for OrderByQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers which respects orderby sort order.\n   * @returns {object}        - Comparator Function\n   * @ignore\n   */\n  public documentProducerComparator(docProd1: DocumentProducer, docProd2: DocumentProducer) {\n    return this.orderByComparator.compare(docProd1, docProd2);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}