{"ast":null,"code":"import { getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\n/**\n * Use to query or read all conflicts.\n *\n * @see {@link Conflict} to read or delete a given {@link Conflict} by id.\n */\n\nexport class Conflicts {\n  constructor(container, clientContext) {\n    this.container = container;\n    this.clientContext = clientContext;\n  }\n\n  query(query, options) {\n    const path = getPathFromLink(this.container.url, ResourceType.conflicts);\n    const id = getIdFromLink(this.container.url);\n    return new QueryIterator(this.clientContext, query, options, innerOptions => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.conflicts,\n        resourceId: id,\n        resultFn: result => result.Conflicts,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n  /**\n   * Reads all conflicts\n   * @param options Use to set options like response page size, continuation tokens, etc.\n   */\n\n\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Conflict/Conflicts.ts"],"names":[],"mappings":"AAGA,SAAS,aAAT,EAAwB,eAAxB,EAAyC,YAAzC,QAA6D,cAA7D;AAEA,SAAS,aAAT,QAA8B,qBAA9B;AAMA;;;;;;AAKA,OAAM,MAAO,SAAP,CAAgB;AACpB,EAAA,WAAA,CACkB,SADlB,EAEmB,aAFnB,EAE+C;AAD7B,SAAA,SAAA,GAAA,SAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;;AAgBG,EAAA,KAAK,CAAI,KAAJ,EAAkC,OAAlC,EAAuD;AACjE,UAAM,IAAI,GAAG,eAAe,CAAC,KAAK,SAAL,CAAe,GAAhB,EAAqB,YAAY,CAAC,SAAlC,CAA5B;AACA,UAAM,EAAE,GAAG,aAAa,CAAC,KAAK,SAAL,CAAe,GAAhB,CAAxB;AAEA,WAAO,IAAI,aAAJ,CAAkB,KAAK,aAAvB,EAAsC,KAAtC,EAA6C,OAA7C,EAAuD,YAAD,IAAiB;AAC5E,aAAO,KAAK,aAAL,CAAmB,SAAnB,CAA6B;AAClC,QAAA,IADkC;AAElC,QAAA,YAAY,EAAE,YAAY,CAAC,SAFO;AAGlC,QAAA,UAAU,EAAE,EAHsB;AAIlC,QAAA,QAAQ,EAAG,MAAD,IAAY,MAAM,CAAC,SAJK;AAKlC,QAAA,KALkC;AAMlC,QAAA,OAAO,EAAE;AANyB,OAA7B,CAAP;AAQD,KATM,CAAP;AAUD;AAED;;;;;;AAIO,EAAA,OAAO,CAAC,OAAD,EAAsB;AAClC,WAAO,KAAK,KAAL,CAA0C,SAA1C,EAAqD,OAArD,CAAP;AACD;;AA1CmB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { Resource } from \"../Resource\";\nimport { ConflictDefinition } from \"./ConflictDefinition\";\n\n/**\n * Use to query or read all conflicts.\n *\n * @see {@link Conflict} to read or delete a given {@link Conflict} by id.\n */\nexport class Conflicts {\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Queries all conflicts.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return results in an array or iterate over them one at a time.\n   */\n  public query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all conflicts.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return results in an array or iterate over them one at a time.\n   */\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.conflicts);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.conflicts,\n        resourceId: id,\n        resultFn: (result) => result.Conflicts,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n\n  /**\n   * Reads all conflicts\n   * @param options Use to set options like response page size, continuation tokens, etc.\n   */\n  public readAll(options?: FeedOptions): QueryIterator<ConflictDefinition & Resource> {\n    return this.query<ConflictDefinition & Resource>(undefined, options);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}