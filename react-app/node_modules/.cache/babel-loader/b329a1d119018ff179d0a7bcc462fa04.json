{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createPermissionUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { PermissionResponse } from \"./PermissionResponse\";\n/**\n * Use to read, replace, or delete a given {@link Permission} by id.\n *\n * @see {@link Permissions} to create, upsert, query, or read all Permissions.\n */\n\nexport class Permission {\n  /**\n   * @hidden\n   * @param user The parent {@link User}.\n   * @param id The id of the given {@link Permission}.\n   */\n  constructor(user, id, clientContext) {\n    this.user = user;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n\n\n  get url() {\n    return createPermissionUri(this.user.database.id, this.user.id, this.id);\n  }\n  /**\n   * Read the {@link PermissionDefinition} of the given {@link Permission}.\n   * @param options\n   */\n\n\n  read(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.read({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options\n      });\n      return new PermissionResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Replace the given {@link Permission} with the specified {@link PermissionDefinition}.\n   * @param body The specified {@link PermissionDefinition}.\n   * @param options\n   */\n\n\n  replace(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options\n      });\n      return new PermissionResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Delete the given {@link Permission}.\n   * @param options\n   */\n\n\n  delete(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.delete({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options\n      });\n      return new PermissionResponse(response.result, response.headers, response.code, this);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Permission/Permission.ts"],"names":[],"mappings":";AAGA,SACE,mBADF,EAEE,aAFF,EAGE,eAHF,EAIE,eAJF,EAKE,YALF,QAMO,cANP;AAWA,SAAS,kBAAT,QAAmC,sBAAnC;AAEA;;;;;;AAKA,OAAM,MAAO,UAAP,CAAiB;AAOrB;;;;;AAKA,EAAA,WAAA,CACkB,IADlB,EAEkB,EAFlB,EAGmB,aAHnB,EAG+C;AAF7B,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,EAAA,GAAA,EAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;AAfJ;;;;;AAGA,MAAW,GAAX,GAAc;AACZ,WAAO,mBAAmB,CAAC,KAAK,IAAL,CAAU,QAAV,CAAmB,EAApB,EAAwB,KAAK,IAAL,CAAU,EAAlC,EAAsC,KAAK,EAA3C,CAA1B;AACD;AAYD;;;;;;AAIa,EAAA,IAAI,CAAC,OAAD,EAAyB;;AACxC,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,IAAnB,CAA+D;AACpF,QAAA,IADoF;AAEpF,QAAA,YAAY,EAAE,YAAY,CAAC,UAFyD;AAGpF,QAAA,UAAU,EAAE,EAHwE;AAIpF,QAAA;AAJoF,OAA/D,CAAvB;AAMA,aAAO,IAAI,kBAAJ,CAAuB,QAAQ,CAAC,MAAhC,EAAwC,QAAQ,CAAC,OAAjD,EAA0D,QAAQ,CAAC,IAAnE,EAAyE,IAAzE,CAAP;AACD,K;AAAA;AAED;;;;;;;AAKa,EAAA,OAAO,CAClB,IADkB,EAElB,OAFkB,EAEM;;AAExB,YAAM,GAAG,GAAG,EAAZ;;AACA,UAAI,CAAC,eAAe,CAAC,IAAD,EAAO,GAAP,CAApB,EAAiC;AAC/B,cAAM,GAAN;AACD;;AAED,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,OAAnB,CAAkE;AACvF,QAAA,IADuF;AAEvF,QAAA,IAFuF;AAGvF,QAAA,YAAY,EAAE,YAAY,CAAC,UAH4D;AAIvF,QAAA,UAAU,EAAE,EAJ2E;AAKvF,QAAA;AALuF,OAAlE,CAAvB;AAOA,aAAO,IAAI,kBAAJ,CAAuB,QAAQ,CAAC,MAAhC,EAAwC,QAAQ,CAAC,OAAjD,EAA0D,QAAQ,CAAC,IAAnE,EAAyE,IAAzE,CAAP;AACD,K;AAAA;AAED;;;;;;AAIa,EAAA,MAAM,CAAC,OAAD,EAAyB;;AAC1C,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,MAAnB,CAAiE;AACtF,QAAA,IADsF;AAEtF,QAAA,YAAY,EAAE,YAAY,CAAC,UAF2D;AAGtF,QAAA,UAAU,EAAE,EAH0E;AAItF,QAAA;AAJsF,OAAjE,CAAvB;AAMA,aAAO,IAAI,kBAAJ,CAAuB,QAAQ,CAAC,MAAhC,EAAwC,QAAQ,CAAC,OAAjD,EAA0D,QAAQ,CAAC,IAAnE,EAAyE,IAAzE,CAAP;AACD,K;AAAA;;AA7EoB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  createPermissionUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType\n} from \"../../common\";\nimport { RequestOptions } from \"../../request/RequestOptions\";\nimport { User } from \"../User\";\nimport { PermissionBody } from \"./PermissionBody\";\nimport { PermissionDefinition } from \"./PermissionDefinition\";\nimport { PermissionResponse } from \"./PermissionResponse\";\n\n/**\n * Use to read, replace, or delete a given {@link Permission} by id.\n *\n * @see {@link Permissions} to create, upsert, query, or read all Permissions.\n */\nexport class Permission {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return createPermissionUri(this.user.database.id, this.user.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param user The parent {@link User}.\n   * @param id The id of the given {@link Permission}.\n   */\n  constructor(\n    public readonly user: User,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link PermissionDefinition} of the given {@link Permission}.\n   * @param options\n   */\n  public async read(options?: RequestOptions): Promise<PermissionResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.read<PermissionDefinition & PermissionBody>({\n      path,\n      resourceType: ResourceType.permission,\n      resourceId: id,\n      options\n    });\n    return new PermissionResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Replace the given {@link Permission} with the specified {@link PermissionDefinition}.\n   * @param body The specified {@link PermissionDefinition}.\n   * @param options\n   */\n  public async replace(\n    body: PermissionDefinition,\n    options?: RequestOptions\n  ): Promise<PermissionResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.replace<PermissionDefinition & PermissionBody>({\n      body,\n      path,\n      resourceType: ResourceType.permission,\n      resourceId: id,\n      options\n    });\n    return new PermissionResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Delete the given {@link Permission}.\n   * @param options\n   */\n  public async delete(options?: RequestOptions): Promise<PermissionResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete<PermissionDefinition & PermissionBody>({\n      path,\n      resourceType: ResourceType.permission,\n      resourceId: id,\n      options\n    });\n    return new PermissionResponse(response.result, response.headers, response.code, this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}