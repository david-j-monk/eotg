{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"./common\";\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\n\nexport class ChangeFeedResponse {\n  /**\n   * @internal\n   * @hidden\n   *\n   * @param result\n   * @param count\n   * @param statusCode\n   * @param headers\n   */\n  constructor(\n  /**\n   * Gets the items returned in the response from Azure Cosmos DB\n   */\n  result,\n  /**\n   * Gets the number of items returned in the response from Azure Cosmos DB\n   */\n  count,\n  /**\n   * Gets the status code of the response from Azure Cosmos DB\n   */\n  statusCode, headers) {\n    this.result = result;\n    this.count = count;\n    this.statusCode = statusCode;\n    this.headers = Object.freeze(headers);\n  }\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n\n\n  get requestCharge() {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n\n\n  get activityId() {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   *\n   * This is equivalent to the `etag` property.\n   */\n\n\n  get continuation() {\n    return this.etag;\n  }\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n\n\n  get sessionToken() {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n  /**\n   * Gets the entity tag associated with last transaction in the Azure Cosmos DB service,\n   * which can be used as If-Non-Match Access condition for ReadFeed REST request or\n   * `continuation` property of `ChangeFeedOptions` parameter for\n   * `Items.changeFeed()`\n   * to get feed changes since the transaction specified by this entity tag.\n   *\n   * This is equivalent to the `continuation` property.\n   */\n\n\n  get etag() {\n    return this.headers[Constants.HttpHeaders.ETag];\n  }\n\n}","map":{"version":3,"sources":["../src/ChangeFeedResponse.ts"],"names":[],"mappings":"AAAA;AACA;AACA,SAAS,SAAT,QAA0B,UAA1B;AAGA;;;;AAGA,OAAM,MAAO,kBAAP,CAAyB;AAC7B;;;;;;;;;AASA,EAAA,WAAA;AACE;;;AAGgB,EAAA,MAJlB;AAKE;;;AAGgB,EAAA,KARlB;AASE;;;AAGgB,EAAA,UAZlB,EAaE,OAbF,EAawB;AATN,SAAA,MAAA,GAAA,MAAA;AAIA,SAAA,KAAA,GAAA,KAAA;AAIA,SAAA,UAAA,GAAA,UAAA;AAGhB,SAAK,OAAL,GAAe,MAAM,CAAC,MAAP,CAAc,OAAd,CAAf;AACD;AAED;;;;;AAGA,MAAW,aAAX,GAAwB;AACtB,UAAM,GAAG,GAAG,KAAK,OAAL,CAAa,SAAS,CAAC,WAAV,CAAsB,aAAnC,CAAZ;AACA,WAAO,GAAG,GAAG,QAAQ,CAAC,GAAD,EAAM,EAAN,CAAX,GAAuB,IAAjC;AACD;AAED;;;;;AAGA,MAAW,UAAX,GAAqB;AACnB,WAAO,KAAK,OAAL,CAAa,SAAS,CAAC,WAAV,CAAsB,UAAnC,CAAP;AACD;AAED;;;;;;;AAKA,MAAW,YAAX,GAAuB;AACrB,WAAO,KAAK,IAAZ;AACD;AAED;;;;;AAGA,MAAW,YAAX,GAAuB;AACrB,WAAO,KAAK,OAAL,CAAa,SAAS,CAAC,WAAV,CAAsB,YAAnC,CAAP;AACD;AAED;;;;;;;;;;;AASA,MAAW,IAAX,GAAe;AACb,WAAO,KAAK,OAAL,CAAa,SAAS,CAAC,WAAV,CAAsB,IAAnC,CAAP;AACD;;AAtE4B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"./common\";\nimport { CosmosHeaders } from \"./queryExecutionContext\";\n\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedResponse<T> {\n  /**\n   * @internal\n   * @hidden\n   *\n   * @param result\n   * @param count\n   * @param statusCode\n   * @param headers\n   */\n  constructor(\n    /**\n     * Gets the items returned in the response from Azure Cosmos DB\n     */\n    public readonly result: T,\n    /**\n     * Gets the number of items returned in the response from Azure Cosmos DB\n     */\n    public readonly count: number,\n    /**\n     * Gets the status code of the response from Azure Cosmos DB\n     */\n    public readonly statusCode: number,\n    headers: CosmosHeaders\n  ) {\n    this.headers = Object.freeze(headers);\n  }\n\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  public get requestCharge(): number {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   *\n   * This is equivalent to the `etag` property.\n   */\n  public get continuation(): string {\n    return this.etag;\n  }\n\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  public get sessionToken(): string {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n\n  /**\n   * Gets the entity tag associated with last transaction in the Azure Cosmos DB service,\n   * which can be used as If-Non-Match Access condition for ReadFeed REST request or\n   * `continuation` property of `ChangeFeedOptions` parameter for\n   * `Items.changeFeed()`\n   * to get feed changes since the transaction specified by this entity tag.\n   *\n   * This is equivalent to the `continuation` property.\n   */\n  public get etag(): string {\n    return this.headers[Constants.HttpHeaders.ETag];\n  }\n\n  /**\n   * Response headers of the response from Azure Cosmos DB\n   */\n  public headers: CosmosHeaders;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}