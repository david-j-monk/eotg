{"ast":null,"code":"/**\n * Expose `PriorityQueue`.\n */\nmodule.exports = PriorityQueue;\n/**\n * Initializes a new empty `PriorityQueue` with the given `comparator(a, b)`\n * function, uses `.DEFAULT_COMPARATOR()` when no function is provided.\n *\n * The comparator function must return a positive number when `a > b`, 0 when\n * `a == b` and a negative number when `a < b`.\n *\n * @param {Function}\n * @return {PriorityQueue}\n * @api public\n */\n\nfunction PriorityQueue(comparator) {\n  this._comparator = comparator || PriorityQueue.DEFAULT_COMPARATOR;\n  this._elements = [];\n}\n/**\n * Compares `a` and `b`, when `a > b` it returns a positive number, when\n * it returns 0 and when `a < b` it returns a negative number.\n *\n * @param {String|Number} a\n * @param {String|Number} b\n * @return {Number}\n * @api public\n */\n\n\nPriorityQueue.DEFAULT_COMPARATOR = function (a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  } else {\n    a = a.toString();\n    b = b.toString();\n    if (a == b) return 0;\n    return a > b ? 1 : -1;\n  }\n};\n/**\n * Returns whether the priority queue is empty or not.\n *\n * @return {Boolean}\n * @api public\n */\n\n\nPriorityQueue.prototype.isEmpty = function () {\n  return this.size() === 0;\n};\n/**\n * Peeks at the top element of the priority queue.\n *\n * @return {Object}\n * @throws {Error} when the queue is empty.\n * @api public\n */\n\n\nPriorityQueue.prototype.peek = function () {\n  if (this.isEmpty()) throw new Error('PriorityQueue is empty');\n  return this._elements[0];\n};\n/**\n * Dequeues the top element of the priority queue.\n *\n * @return {Object}\n * @throws {Error} when the queue is empty.\n * @api public\n */\n\n\nPriorityQueue.prototype.deq = function () {\n  var first = this.peek();\n\n  var last = this._elements.pop();\n\n  var size = this.size();\n  if (size === 0) return first;\n  this._elements[0] = last;\n  var current = 0;\n\n  while (current < size) {\n    var largest = current;\n    var left = 2 * current + 1;\n    var right = 2 * current + 2;\n\n    if (left < size && this._compare(left, largest) >= 0) {\n      largest = left;\n    }\n\n    if (right < size && this._compare(right, largest) >= 0) {\n      largest = right;\n    }\n\n    if (largest === current) break;\n\n    this._swap(largest, current);\n\n    current = largest;\n  }\n\n  return first;\n};\n/**\n * Enqueues the `element` at the priority queue and returns its new size.\n *\n * @param {Object} element\n * @return {Number}\n * @api public\n */\n\n\nPriorityQueue.prototype.enq = function (element) {\n  var size = this._elements.push(element);\n\n  var current = size - 1;\n\n  while (current > 0) {\n    var parent = Math.floor((current - 1) / 2);\n    if (this._compare(current, parent) <= 0) break;\n\n    this._swap(parent, current);\n\n    current = parent;\n  }\n\n  return size;\n};\n/**\n * Returns the size of the priority queue.\n *\n * @return {Number}\n * @api public\n */\n\n\nPriorityQueue.prototype.size = function () {\n  return this._elements.length;\n};\n/**\n *  Iterates over queue elements\n *\n *  @param {Function} fn\n */\n\n\nPriorityQueue.prototype.forEach = function (fn) {\n  return this._elements.forEach(fn);\n};\n/**\n * Compares the values at position `a` and `b` in the priority queue using its\n * comparator function.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @api private\n */\n\n\nPriorityQueue.prototype._compare = function (a, b) {\n  return this._comparator(this._elements[a], this._elements[b]);\n};\n/**\n * Swaps the values at position `a` and `b` in the priority queue.\n *\n * @param {Number} a\n * @param {Number} b\n * @api private\n */\n\n\nPriorityQueue.prototype._swap = function (a, b) {\n  var aux = this._elements[a];\n  this._elements[a] = this._elements[b];\n  this._elements[b] = aux;\n};","map":{"version":3,"sources":["D:/eotg/react-app/node_modules/priorityqueuejs/index.js"],"names":["module","exports","PriorityQueue","comparator","_comparator","DEFAULT_COMPARATOR","_elements","a","b","toString","prototype","isEmpty","size","peek","Error","deq","first","last","pop","current","largest","left","right","_compare","_swap","enq","element","push","parent","Math","floor","length","forEach","fn","aux"],"mappings":"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","sourcesContent":["/**\n * Expose `PriorityQueue`.\n */\nmodule.exports = PriorityQueue;\n\n/**\n * Initializes a new empty `PriorityQueue` with the given `comparator(a, b)`\n * function, uses `.DEFAULT_COMPARATOR()` when no function is provided.\n *\n * The comparator function must return a positive number when `a > b`, 0 when\n * `a == b` and a negative number when `a < b`.\n *\n * @param {Function}\n * @return {PriorityQueue}\n * @api public\n */\nfunction PriorityQueue(comparator) {\n  this._comparator = comparator || PriorityQueue.DEFAULT_COMPARATOR;\n  this._elements = [];\n}\n\n/**\n * Compares `a` and `b`, when `a > b` it returns a positive number, when\n * it returns 0 and when `a < b` it returns a negative number.\n *\n * @param {String|Number} a\n * @param {String|Number} b\n * @return {Number}\n * @api public\n */\nPriorityQueue.DEFAULT_COMPARATOR = function(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  } else {\n    a = a.toString();\n    b = b.toString();\n\n    if (a == b) return 0;\n\n    return (a > b) ? 1 : -1;\n  }\n};\n\n/**\n * Returns whether the priority queue is empty or not.\n *\n * @return {Boolean}\n * @api public\n */\nPriorityQueue.prototype.isEmpty = function() {\n  return this.size() === 0;\n};\n\n/**\n * Peeks at the top element of the priority queue.\n *\n * @return {Object}\n * @throws {Error} when the queue is empty.\n * @api public\n */\nPriorityQueue.prototype.peek = function() {\n  if (this.isEmpty()) throw new Error('PriorityQueue is empty');\n\n  return this._elements[0];\n};\n\n/**\n * Dequeues the top element of the priority queue.\n *\n * @return {Object}\n * @throws {Error} when the queue is empty.\n * @api public\n */\nPriorityQueue.prototype.deq = function() {\n  var first = this.peek();\n  var last = this._elements.pop();\n  var size = this.size();\n\n  if (size === 0) return first;\n\n  this._elements[0] = last;\n  var current = 0;\n\n  while (current < size) {\n    var largest = current;\n    var left = (2 * current) + 1;\n    var right = (2 * current) + 2;\n\n    if (left < size && this._compare(left, largest) >= 0) {\n      largest = left;\n    }\n\n    if (right < size && this._compare(right, largest) >= 0) {\n      largest = right;\n    }\n\n    if (largest === current) break;\n\n    this._swap(largest, current);\n    current = largest;\n  }\n\n  return first;\n};\n\n/**\n * Enqueues the `element` at the priority queue and returns its new size.\n *\n * @param {Object} element\n * @return {Number}\n * @api public\n */\nPriorityQueue.prototype.enq = function(element) {\n  var size = this._elements.push(element);\n  var current = size - 1;\n\n  while (current > 0) {\n    var parent = Math.floor((current - 1) / 2);\n\n    if (this._compare(current, parent) <= 0) break;\n\n    this._swap(parent, current);\n    current = parent;\n  }\n\n  return size;\n};\n\n/**\n * Returns the size of the priority queue.\n *\n * @return {Number}\n * @api public\n */\nPriorityQueue.prototype.size = function() {\n  return this._elements.length;\n};\n\n/**\n *  Iterates over queue elements\n *\n *  @param {Function} fn\n */\nPriorityQueue.prototype.forEach = function(fn) {\n  return this._elements.forEach(fn);\n};\n\n/**\n * Compares the values at position `a` and `b` in the priority queue using its\n * comparator function.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @api private\n */\nPriorityQueue.prototype._compare = function(a, b) {\n  return this._comparator(this._elements[a], this._elements[b]);\n};\n\n/**\n * Swaps the values at position `a` and `b` in the priority queue.\n *\n * @param {Number} a\n * @param {Number} b\n * @api private\n */\nPriorityQueue.prototype._swap = function(a, b) {\n  var aux = this._elements[a];\n  this._elements[a] = this._elements[b];\n  this._elements[b] = aux;\n};\n"]},"metadata":{},"sourceType":"script"}