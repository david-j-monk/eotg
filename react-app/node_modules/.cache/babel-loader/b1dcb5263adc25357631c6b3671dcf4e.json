{"ast":null,"code":"/** @hidden */\nexport class AverageAggregator {\n  /**\n   * Add the provided item to aggregation result.\n   * @memberof AverageAggregator\n   * @instance\n   * @param other\n   */\n  aggregate(other) {\n    if (other == null || other.sum == null) {\n      return;\n    }\n\n    if (this.sum == null) {\n      this.sum = 0.0;\n      this.count = 0;\n    }\n\n    this.sum += other.sum;\n    this.count += other.count;\n  }\n  /**\n   * Get the aggregation result.\n   * @memberof AverageAggregator\n   * @instance\n   */\n\n\n  getResult() {\n    if (this.sum == null || this.count <= 0) {\n      return undefined;\n    }\n\n    return this.sum / this.count;\n  }\n\n}","map":{"version":3,"sources":["../../../src/queryExecutionContext/Aggregators/AverageAggregator.ts"],"names":[],"mappings":"AAUA;AACA,OAAM,MAAO,iBAAP,CAAwB;AAG5B;;;;;;AAMO,EAAA,SAAS,CAAC,KAAD,EAA8B;AAC5C,QAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,CAAC,GAAN,IAAa,IAAlC,EAAwC;AACtC;AACD;;AACD,QAAI,KAAK,GAAL,IAAY,IAAhB,EAAsB;AACpB,WAAK,GAAL,GAAW,GAAX;AACA,WAAK,KAAL,GAAa,CAAb;AACD;;AACD,SAAK,GAAL,IAAY,KAAK,CAAC,GAAlB;AACA,SAAK,KAAL,IAAc,KAAK,CAAC,KAApB;AACD;AAED;;;;;;;AAKO,EAAA,SAAS,GAAA;AACd,QAAI,KAAK,GAAL,IAAY,IAAZ,IAAoB,KAAK,KAAL,IAAc,CAAtC,EAAyC;AACvC,aAAO,SAAP;AACD;;AACD,WAAO,KAAK,GAAL,GAAW,KAAK,KAAvB;AACD;;AA/B2B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport interface AverageAggregateResult {\n  sum: number;\n  count: number;\n}\n\n/** @hidden */\nexport class AverageAggregator implements Aggregator {\n  public sum: number;\n  public count: number;\n  /**\n   * Add the provided item to aggregation result.\n   * @memberof AverageAggregator\n   * @instance\n   * @param other\n   */\n  public aggregate(other: AverageAggregateResult) {\n    if (other == null || other.sum == null) {\n      return;\n    }\n    if (this.sum == null) {\n      this.sum = 0.0;\n      this.count = 0;\n    }\n    this.sum += other.sum;\n    this.count += other.count;\n  }\n\n  /**\n   * Get the aggregation result.\n   * @memberof AverageAggregator\n   * @instance\n   */\n  public getResult() {\n    if (this.sum == null || this.count <= 0) {\n      return undefined;\n    }\n    return this.sum / this.count;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}