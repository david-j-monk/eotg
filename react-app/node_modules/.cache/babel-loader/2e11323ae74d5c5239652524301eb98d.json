{"ast":null,"code":"import { BytePrefix } from \"./prefix\";\nexport function writeStringForBinaryEncoding(payload) {\n  let outputStream = Buffer.from(BytePrefix.String, \"hex\");\n  const MAX_STRING_BYTES_TO_APPEND = 100;\n  const byteArray = [...Buffer.from(payload)];\n  const isShortString = payload.length <= MAX_STRING_BYTES_TO_APPEND;\n\n  for (let index = 0; index < (isShortString ? byteArray.length : MAX_STRING_BYTES_TO_APPEND + 1); index++) {\n    let charByte = byteArray[index];\n\n    if (charByte < 0xff) {\n      charByte++;\n    }\n\n    outputStream = Buffer.concat([outputStream, Buffer.from(charByte.toString(16), \"hex\")]);\n  }\n\n  if (isShortString) {\n    outputStream = Buffer.concat([outputStream, Buffer.from(BytePrefix.Undefined, \"hex\")]);\n  }\n\n  return outputStream;\n}","map":{"version":3,"sources":["../../../../src/utils/hashing/encoding/string.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,UAA3B;AAEA,OAAM,SAAU,4BAAV,CAAuC,OAAvC,EAAsD;AAC1D,MAAI,YAAY,GAAG,MAAM,CAAC,IAAP,CAAY,UAAU,CAAC,MAAvB,EAA+B,KAA/B,CAAnB;AACA,QAAM,0BAA0B,GAAG,GAAnC;AACA,QAAM,SAAS,GAAG,CAAC,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAJ,CAAlB;AAEA,QAAM,aAAa,GAAG,OAAO,CAAC,MAAR,IAAkB,0BAAxC;;AAEA,OACE,IAAI,KAAK,GAAG,CADd,EAEE,KAAK,IAAI,aAAa,GAAG,SAAS,CAAC,MAAb,GAAsB,0BAA0B,GAAG,CAApE,CAFP,EAGE,KAAK,EAHP,EAIE;AACA,QAAI,QAAQ,GAAG,SAAS,CAAC,KAAD,CAAxB;;AACA,QAAI,QAAQ,GAAG,IAAf,EAAqB;AACnB,MAAA,QAAQ;AACT;;AACD,IAAA,YAAY,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,YAAD,EAAe,MAAM,CAAC,IAAP,CAAY,QAAQ,CAAC,QAAT,CAAkB,EAAlB,CAAZ,EAAmC,KAAnC,CAAf,CAAd,CAAf;AACD;;AAED,MAAI,aAAJ,EAAmB;AACjB,IAAA,YAAY,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,YAAD,EAAe,MAAM,CAAC,IAAP,CAAY,UAAU,CAAC,SAAvB,EAAkC,KAAlC,CAAf,CAAd,CAAf;AACD;;AACD,SAAO,YAAP;AACD","sourcesContent":["import { BytePrefix } from \"./prefix\";\n\nexport function writeStringForBinaryEncoding(payload: string) {\n  let outputStream = Buffer.from(BytePrefix.String, \"hex\");\n  const MAX_STRING_BYTES_TO_APPEND = 100;\n  const byteArray = [...Buffer.from(payload)];\n\n  const isShortString = payload.length <= MAX_STRING_BYTES_TO_APPEND;\n\n  for (\n    let index = 0;\n    index < (isShortString ? byteArray.length : MAX_STRING_BYTES_TO_APPEND + 1);\n    index++\n  ) {\n    let charByte = byteArray[index];\n    if (charByte < 0xff) {\n      charByte++;\n    }\n    outputStream = Buffer.concat([outputStream, Buffer.from(charByte.toString(16), \"hex\")]);\n  }\n\n  if (isShortString) {\n    outputStream = Buffer.concat([outputStream, Buffer.from(BytePrefix.Undefined, \"hex\")]);\n  }\n  return outputStream;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}