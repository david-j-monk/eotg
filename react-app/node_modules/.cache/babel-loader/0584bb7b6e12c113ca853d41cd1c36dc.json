{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { StoredProcedure } from \"./StoredProcedure\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\n/**\n * Operations for creating, upserting, or reading/querying all Stored Procedures.\n *\n * For operations to read, replace, delete, or execute a specific, existing stored procedure by id, see `container.storedProcedure()`.\n */\n\nexport class StoredProcedures {\n  /**\n   * @param container The parent {@link Container}.\n   * @hidden\n   */\n  constructor(container, clientContext) {\n    this.container = container;\n    this.clientContext = clientContext;\n  }\n\n  query(query, options) {\n    const path = getPathFromLink(this.container.url, ResourceType.sproc);\n    const id = getIdFromLink(this.container.url);\n    return new QueryIterator(this.clientContext, query, options, innerOptions => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        resultFn: result => result.StoredProcedures,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n  /**\n   * Read all stored procedures.\n   * @param options\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const {body: sprocList} = await containers.storedProcedures.readAll().fetchAll();\n   * ```\n   */\n\n\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n  /**\n   * Create a StoredProcedure.\n   *\n   * Azure Cosmos DB allows stored procedures to be executed in the storage tier,\n   * directly against an item container. The script\n   * gets executed under ACID transactions on the primary storage partition of the\n   * specified container. For additional details,\n   * refer to the server-side JavaScript API documentation.\n   */\n\n\n  create(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.sproc);\n      const id = getIdFromLink(this.container.url);\n      const response = yield this.clientContext.create({\n        body,\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options\n      });\n      const ref = new StoredProcedure(this.container, response.result.id, this.clientContext);\n      return new StoredProcedureResponse(response.result, response.headers, response.code, ref);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/StoredProcedure/StoredProcedures.ts"],"names":[],"mappings":";AAGA,SAAS,aAAT,EAAwB,eAAxB,EAAyC,eAAzC,EAA0D,YAA1D,QAA8E,cAA9E;AAEA,SAAS,aAAT,QAA8B,qBAA9B;AAIA,SAAS,eAAT,QAAgC,mBAAhC;AAEA,SAAS,uBAAT,QAAwC,2BAAxC;AAEA;;;;;;AAKA,OAAM,MAAO,gBAAP,CAAuB;AAC3B;;;;AAIA,EAAA,WAAA,CACkB,SADlB,EAEmB,aAFnB,EAE+C;AAD7B,SAAA,SAAA,GAAA,SAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;;AAkCG,EAAA,KAAK,CAAI,KAAJ,EAAyB,OAAzB,EAA8C;AACxD,UAAM,IAAI,GAAG,eAAe,CAAC,KAAK,SAAL,CAAe,GAAhB,EAAqB,YAAY,CAAC,KAAlC,CAA5B;AACA,UAAM,EAAE,GAAG,aAAa,CAAC,KAAK,SAAL,CAAe,GAAhB,CAAxB;AAEA,WAAO,IAAI,aAAJ,CAAkB,KAAK,aAAvB,EAAsC,KAAtC,EAA6C,OAA7C,EAAuD,YAAD,IAAiB;AAC5E,aAAO,KAAK,aAAL,CAAmB,SAAnB,CAA6B;AAClC,QAAA,IADkC;AAElC,QAAA,YAAY,EAAE,YAAY,CAAC,KAFO;AAGlC,QAAA,UAAU,EAAE,EAHsB;AAIlC,QAAA,QAAQ,EAAG,MAAD,IAAY,MAAM,CAAC,gBAJK;AAKlC,QAAA,KALkC;AAMlC,QAAA,OAAO,EAAE;AANyB,OAA7B,CAAP;AAQD,KATM,CAAP;AAUD;AAED;;;;;;;;;;AAQO,EAAA,OAAO,CAAC,OAAD,EAAsB;AAClC,WAAO,KAAK,KAAL,CAAiD,SAAjD,EAA4D,OAA5D,CAAP;AACD;AAED;;;;;;;;;;;AASa,EAAA,MAAM,CACjB,IADiB,EAEjB,OAFiB,EAEO;;AAExB,UAAI,IAAI,CAAC,IAAT,EAAe;AACb,QAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAL,CAAU,QAAV,EAAZ;AACD;;AAED,YAAM,GAAG,GAAG,EAAZ;;AACA,UAAI,CAAC,eAAe,CAAC,IAAD,EAAO,GAAP,CAApB,EAAiC;AAC/B,cAAM,GAAN;AACD;;AAED,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,SAAL,CAAe,GAAhB,EAAqB,YAAY,CAAC,KAAlC,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,SAAL,CAAe,GAAhB,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,MAAnB,CAAqD;AAC1E,QAAA,IAD0E;AAE1E,QAAA,IAF0E;AAG1E,QAAA,YAAY,EAAE,YAAY,CAAC,KAH+C;AAI1E,QAAA,UAAU,EAAE,EAJ8D;AAK1E,QAAA;AAL0E,OAArD,CAAvB;AAOA,YAAM,GAAG,GAAG,IAAI,eAAJ,CAAoB,KAAK,SAAzB,EAAoC,QAAQ,CAAC,MAAT,CAAgB,EAApD,EAAwD,KAAK,aAA7D,CAAZ;AACA,aAAO,IAAI,uBAAJ,CAA4B,QAAQ,CAAC,MAArC,EAA6C,QAAQ,CAAC,OAAtD,EAA+D,QAAQ,CAAC,IAAxE,EAA8E,GAA9E,CAAP;AACD,K;AAAA;;AAxG0B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { Resource } from \"../Resource\";\nimport { StoredProcedure } from \"./StoredProcedure\";\nimport { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\n\n/**\n * Operations for creating, upserting, or reading/querying all Stored Procedures.\n *\n * For operations to read, replace, delete, or execute a specific, existing stored procedure by id, see `container.storedProcedure()`.\n */\nexport class StoredProcedures {\n  /**\n   * @param container The parent {@link Container}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Query all Stored Procedures.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @sproc\",\n   *   parameters: [\n   *     {name: \"@sproc\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: sprocList} = await containers.storedProcedures.query(querySpec).fetchAll();\n   * ```\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all Stored Procedures.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @sproc\",\n   *   parameters: [\n   *     {name: \"@sproc\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: sprocList} = await containers.storedProcedures.query(querySpec).fetchAll();\n   * ```\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.sproc);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        resultFn: (result) => result.StoredProcedures,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n\n  /**\n   * Read all stored procedures.\n   * @param options\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const {body: sprocList} = await containers.storedProcedures.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<StoredProcedureDefinition & Resource> {\n    return this.query<StoredProcedureDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a StoredProcedure.\n   *\n   * Azure Cosmos DB allows stored procedures to be executed in the storage tier,\n   * directly against an item container. The script\n   * gets executed under ACID transactions on the primary storage partition of the\n   * specified container. For additional details,\n   * refer to the server-side JavaScript API documentation.\n   */\n  public async create(\n    body: StoredProcedureDefinition,\n    options?: RequestOptions\n  ): Promise<StoredProcedureResponse> {\n    if (body.body) {\n      body.body = body.body.toString();\n    }\n\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.container.url, ResourceType.sproc);\n    const id = getIdFromLink(this.container.url);\n\n    const response = await this.clientContext.create<StoredProcedureDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.sproc,\n      resourceId: id,\n      options\n    });\n    const ref = new StoredProcedure(this.container, response.result.id, this.clientContext);\n    return new StoredProcedureResponse(response.result, response.headers, response.code, ref);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}