{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createDocumentUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType, StatusCodes } from \"../../common\";\nimport { extractPartitionKey, undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { ItemResponse } from \"./ItemResponse\";\n/**\n * Used to perform operations on a specific item.\n *\n * @see {@link Items} for operations on all items; see `container.items`.\n */\n\nexport class Item {\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link Item}.\n   * @param partitionKey The primary key of the given {@link Item} (only for partitioned containers).\n   */\n  constructor(container, id, partitionKey, clientContext) {\n    this.container = container;\n    this.id = id;\n    this.clientContext = clientContext;\n    this.partitionKey = partitionKey;\n  }\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n\n\n  get url() {\n    return createDocumentUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Read the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   * If the type, T, is a class, it won't pass `typeof` comparisons, because it won't have a match prototype.\n   * It's recommended to only use interfaces.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options Additional options for the request\n   *\n   * @example Using custom type for response\n   * ```typescript\n   * interface TodoItem {\n   *   title: string;\n   *   done: bool;\n   *   id: string;\n   * }\n   *\n   * let item: TodoItem;\n   * ({body: item} = await item.read<TodoItem>());\n   * ```\n   */\n\n\n  read(options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.partitionKey === undefined) {\n        const {\n          resource: partitionKeyDefinition\n        } = yield this.container.readPartitionKeyDefinition();\n        this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      let response;\n\n      try {\n        response = yield this.clientContext.read({\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: this.partitionKey\n        });\n      } catch (error) {\n        if (error.code !== StatusCodes.NotFound) {\n          throw error;\n        }\n\n        response = error;\n      }\n\n      return new ItemResponse(response.result, response.headers, response.code, response.substatus, this);\n    });\n  }\n\n  replace(body, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.partitionKey === undefined) {\n        const {\n          resource: partitionKeyDefinition\n        } = yield this.container.readPartitionKeyDefinition();\n        this.partitionKey = extractPartitionKey(body, partitionKeyDefinition);\n      }\n\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey\n      });\n      return new ItemResponse(response.result, response.headers, response.code, response.substatus, this);\n    });\n  }\n  /**\n   * Delete the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options Additional options for the request\n   */\n\n\n  delete(options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.partitionKey === undefined) {\n        const {\n          resource: partitionKeyDefinition\n        } = yield this.container.readPartitionKeyDefinition();\n        this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.delete({\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey\n      });\n      return new ItemResponse(response.result, response.headers, response.code, response.substatus, this);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Item/Item.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  createDocumentUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n  StatusCodes\n} from \"../../common\";\nimport { PartitionKey } from \"../../documents\";\nimport { extractPartitionKey, undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { RequestOptions, Response } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { Resource } from \"../Resource\";\nimport { ItemDefinition } from \"./ItemDefinition\";\nimport { ItemResponse } from \"./ItemResponse\";\n\n/**\n * Used to perform operations on a specific item.\n *\n * @see {@link Items} for operations on all items; see `container.items`.\n */\nexport class Item {\n  private partitionKey: PartitionKey;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return createDocumentUri(this.container.database.id, this.container.id, this.id);\n  }\n\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link Item}.\n   * @param partitionKey The primary key of the given {@link Item} (only for partitioned containers).\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    partitionKey: PartitionKey,\n    private readonly clientContext: ClientContext\n  ) {\n    this.partitionKey = partitionKey;\n  }\n\n  /**\n   * Read the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   * If the type, T, is a class, it won't pass `typeof` comparisons, because it won't have a match prototype.\n   * It's recommended to only use interfaces.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options Additional options for the request\n   *\n   * @example Using custom type for response\n   * ```typescript\n   * interface TodoItem {\n   *   title: string;\n   *   done: bool;\n   *   id: string;\n   * }\n   *\n   * let item: TodoItem;\n   * ({body: item} = await item.read<TodoItem>());\n   * ```\n   */\n  public async read<T extends ItemDefinition = any>(\n    options: RequestOptions = {}\n  ): Promise<ItemResponse<T>> {\n    if (this.partitionKey === undefined) {\n      const {\n        resource: partitionKeyDefinition\n      } = await this.container.readPartitionKeyDefinition();\n      this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n    }\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    let response: Response<T & Resource>;\n    try {\n      response = await this.clientContext.read<T>({\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey\n      });\n    } catch (error) {\n      if (error.code !== StatusCodes.NotFound) {\n        throw error;\n      }\n      response = error;\n    }\n\n    return new ItemResponse(\n      response.result,\n      response.headers,\n      response.code,\n      response.substatus,\n      this\n    );\n  }\n\n  /**\n   * Replace the item's definition.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body The definition to replace the existing {@link Item}'s definition with.\n   * @param options Additional options for the request\n   */\n  public replace(\n    body: ItemDefinition,\n    options?: RequestOptions\n  ): Promise<ItemResponse<ItemDefinition>>;\n  /**\n   * Replace the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body The definition to replace the existing {@link Item}'s definition with.\n   * @param options Additional options for the request\n   */\n  public replace<T extends ItemDefinition>(\n    body: T,\n    options?: RequestOptions\n  ): Promise<ItemResponse<T>>;\n  public async replace<T extends ItemDefinition>(\n    body: T,\n    options: RequestOptions = {}\n  ): Promise<ItemResponse<T>> {\n    if (this.partitionKey === undefined) {\n      const {\n        resource: partitionKeyDefinition\n      } = await this.container.readPartitionKeyDefinition();\n      this.partitionKey = extractPartitionKey(body, partitionKeyDefinition);\n    }\n\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.replace<T>({\n      body,\n      path,\n      resourceType: ResourceType.item,\n      resourceId: id,\n      options,\n      partitionKey: this.partitionKey\n    });\n    return new ItemResponse(\n      response.result,\n      response.headers,\n      response.code,\n      response.substatus,\n      this\n    );\n  }\n\n  /**\n   * Delete the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options Additional options for the request\n   */\n  public async delete<T extends ItemDefinition = any>(\n    options: RequestOptions = {}\n  ): Promise<ItemResponse<T>> {\n    if (this.partitionKey === undefined) {\n      const {\n        resource: partitionKeyDefinition\n      } = await this.container.readPartitionKeyDefinition();\n      this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n    }\n\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete<T>({\n      path,\n      resourceType: ResourceType.item,\n      resourceId: id,\n      options,\n      partitionKey: this.partitionKey\n    });\n    return new ItemResponse(\n      response.result,\n      response.headers,\n      response.code,\n      response.substatus,\n      this\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}