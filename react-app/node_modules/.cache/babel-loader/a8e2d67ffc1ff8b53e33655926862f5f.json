{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Constants, isResourceValid, ResourceType } from \"../../common\";\nimport { OfferResponse } from \"./OfferResponse\";\n/**\n * Use to read or replace an existing {@link Offer} by id.\n *\n * @see {@link Offers} to query or read all offers.\n */\n\nexport class Offer {\n  /**\n   * @hidden\n   * @param client The parent {@link CosmosClient} for the Database Account.\n   * @param id The id of the given {@link Offer}.\n   */\n  constructor(client, id, clientContext) {\n    this.client = client;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n\n\n  get url() {\n    return `/${Constants.Path.OffersPathSegment}/${this.id}`;\n  }\n  /**\n   * Read the {@link OfferDefinition} for the given {@link Offer}.\n   * @param options\n   */\n\n\n  read(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this.clientContext.read({\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options\n      });\n      return new OfferResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Replace the given {@link Offer} with the specified {@link OfferDefinition}.\n   * @param body The specified {@link OfferDefinition}\n   * @param options\n   */\n\n\n  replace(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const response = yield this.clientContext.replace({\n        body,\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options\n      });\n      return new OfferResponse(response.result, response.headers, response.code, this);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Offer/Offer.ts"],"names":[],"mappings":";AAGA,SAAS,SAAT,EAAoB,eAApB,EAAqC,YAArC,QAAyD,cAAzD;AAIA,SAAS,aAAT,QAA8B,iBAA9B;AAEA;;;;;;AAKA,OAAM,MAAO,KAAP,CAAY;AAOhB;;;;;AAKA,EAAA,WAAA,CACkB,MADlB,EAEkB,EAFlB,EAGmB,aAHnB,EAG+C;AAF7B,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,EAAA,GAAA,EAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;AAfJ;;;;;AAGA,MAAW,GAAX,GAAc;AACZ,WAAO,IAAI,SAAS,CAAC,IAAV,CAAe,iBAAiB,IAAI,KAAK,EAAE,EAAtD;AACD;AAYD;;;;;;AAIa,EAAA,IAAI,CAAC,OAAD,EAAyB;;AACxC,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,IAAnB,CAAyC;AAC9D,QAAA,IAAI,EAAE,KAAK,GADmD;AAE9D,QAAA,YAAY,EAAE,YAAY,CAAC,KAFmC;AAG9D,QAAA,UAAU,EAAE,KAAK,EAH6C;AAI9D,QAAA;AAJ8D,OAAzC,CAAvB;AAMA,aAAO,IAAI,aAAJ,CAAkB,QAAQ,CAAC,MAA3B,EAAmC,QAAQ,CAAC,OAA5C,EAAqD,QAAQ,CAAC,IAA9D,EAAoE,IAApE,CAAP;AACD,K;AAAA;AAED;;;;;;;AAKa,EAAA,OAAO,CAAC,IAAD,EAAwB,OAAxB,EAAgD;;AAClE,YAAM,GAAG,GAAG,EAAZ;;AACA,UAAI,CAAC,eAAe,CAAC,IAAD,EAAO,GAAP,CAApB,EAAiC;AAC/B,cAAM,GAAN;AACD;;AACD,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,OAAnB,CAA4C;AACjE,QAAA,IADiE;AAEjE,QAAA,IAAI,EAAE,KAAK,GAFsD;AAGjE,QAAA,YAAY,EAAE,YAAY,CAAC,KAHsC;AAIjE,QAAA,UAAU,EAAE,KAAK,EAJgD;AAKjE,QAAA;AALiE,OAA5C,CAAvB;AAOA,aAAO,IAAI,aAAJ,CAAkB,QAAQ,CAAC,MAA3B,EAAmC,QAAQ,CAAC,OAA5C,EAAqD,QAAQ,CAAC,IAA9D,EAAoE,IAApE,CAAP;AACD,K;AAAA;;AAlDe","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { Constants, isResourceValid, ResourceType } from \"../../common\";\nimport { CosmosClient } from \"../../CosmosClient\";\nimport { RequestOptions } from \"../../request\";\nimport { OfferDefinition } from \"./OfferDefinition\";\nimport { OfferResponse } from \"./OfferResponse\";\n\n/**\n * Use to read or replace an existing {@link Offer} by id.\n *\n * @see {@link Offers} to query or read all offers.\n */\nexport class Offer {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return `/${Constants.Path.OffersPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param client The parent {@link CosmosClient} for the Database Account.\n   * @param id The id of the given {@link Offer}.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link OfferDefinition} for the given {@link Offer}.\n   * @param options\n   */\n  public async read(options?: RequestOptions): Promise<OfferResponse> {\n    const response = await this.clientContext.read<OfferDefinition>({\n      path: this.url,\n      resourceType: ResourceType.offer,\n      resourceId: this.id,\n      options\n    });\n    return new OfferResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Replace the given {@link Offer} with the specified {@link OfferDefinition}.\n   * @param body The specified {@link OfferDefinition}\n   * @param options\n   */\n  public async replace(body: OfferDefinition, options?: RequestOptions): Promise<OfferResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n    const response = await this.clientContext.replace<OfferDefinition>({\n      body,\n      path: this.url,\n      resourceType: ResourceType.offer,\n      resourceId: this.id,\n      options\n    });\n    return new OfferResponse(response.result, response.headers, response.code, this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}