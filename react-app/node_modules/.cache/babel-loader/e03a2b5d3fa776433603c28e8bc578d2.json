{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createStoredProcedureUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { ResourceResponse } from \"../../request\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\n/**\n * Operations for reading, replacing, deleting, or executing a specific, existing stored procedure by id.\n *\n * For operations to create, upsert, read all, or query Stored Procedures,\n */\n\nexport class StoredProcedure {\n  /**\n   * Creates a new instance of {@link StoredProcedure} linked to the parent {@link Container}.\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link StoredProcedure}.\n   * @hidden\n   */\n  constructor(container, id, clientContext) {\n    this.container = container;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n\n\n  get url() {\n    return createStoredProcedureUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Read the {@link StoredProcedureDefinition} for the given {@link StoredProcedure}.\n   * @param options\n   */\n\n\n  read(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.read({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options\n      });\n      return new StoredProcedureResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Replace the given {@link StoredProcedure} with the specified {@link StoredProcedureDefinition}.\n   * @param body The specified {@link StoredProcedureDefinition} to replace the existing definition.\n   * @param options\n   */\n\n\n  replace(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options\n      });\n      return new StoredProcedureResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Delete the given {@link StoredProcedure}.\n   * @param options\n   */\n\n\n  delete(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.delete({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options\n      });\n      return new StoredProcedureResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Execute the given {@link StoredProcedure}.\n   *\n   * The specified type, T, is not enforced by the client.\n   * Be sure to validate the response from the stored procedure matches the type, T, you provide.\n   *\n   * @param partitionKey The partition key to use when executing the stored procedure\n   * @param params Array of parameters to pass as arguments to the given {@link StoredProcedure}.\n   * @param options Additional options, such as the partition key to invoke the {@link StoredProcedure} on.\n   */\n\n\n  execute(partitionKey, params, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (partitionKey === undefined) {\n        const {\n          resource: partitionKeyDefinition\n        } = yield this.container.readPartitionKeyDefinition();\n        partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n      }\n\n      const response = yield this.clientContext.execute({\n        sprocLink: this.url,\n        params,\n        options,\n        partitionKey\n      });\n      return new ResourceResponse(response.result, response.headers, response.code);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/StoredProcedure/StoredProcedure.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  createStoredProcedureUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType\n} from \"../../common\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { RequestOptions, ResourceResponse } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\n\n/**\n * Operations for reading, replacing, deleting, or executing a specific, existing stored procedure by id.\n *\n * For operations to create, upsert, read all, or query Stored Procedures,\n */\nexport class StoredProcedure {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return createStoredProcedureUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Creates a new instance of {@link StoredProcedure} linked to the parent {@link Container}.\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link StoredProcedure}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link StoredProcedureDefinition} for the given {@link StoredProcedure}.\n   * @param options\n   */\n  public async read(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<StoredProcedureDefinition>({\n      path,\n      resourceType: ResourceType.sproc,\n      resourceId: id,\n      options\n    });\n    return new StoredProcedureResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Replace the given {@link StoredProcedure} with the specified {@link StoredProcedureDefinition}.\n   * @param body The specified {@link StoredProcedureDefinition} to replace the existing definition.\n   * @param options\n   */\n  public async replace(\n    body: StoredProcedureDefinition,\n    options?: RequestOptions\n  ): Promise<StoredProcedureResponse> {\n    if (body.body) {\n      body.body = body.body.toString();\n    }\n\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.replace<StoredProcedureDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.sproc,\n      resourceId: id,\n      options\n    });\n    return new StoredProcedureResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Delete the given {@link StoredProcedure}.\n   * @param options\n   */\n  public async delete(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete<StoredProcedureDefinition>({\n      path,\n      resourceType: ResourceType.sproc,\n      resourceId: id,\n      options\n    });\n    return new StoredProcedureResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Execute the given {@link StoredProcedure}.\n   *\n   * The specified type, T, is not enforced by the client.\n   * Be sure to validate the response from the stored procedure matches the type, T, you provide.\n   *\n   * @param partitionKey The partition key to use when executing the stored procedure\n   * @param params Array of parameters to pass as arguments to the given {@link StoredProcedure}.\n   * @param options Additional options, such as the partition key to invoke the {@link StoredProcedure} on.\n   */\n  public async execute<T = any>(\n    partitionKey: any,\n    params?: any[],\n    options?: RequestOptions\n  ): Promise<ResourceResponse<T>> {\n    if (partitionKey === undefined) {\n      const {\n        resource: partitionKeyDefinition\n      } = await this.container.readPartitionKeyDefinition();\n      partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n    }\n    const response = await this.clientContext.execute<T>({\n      sprocLink: this.url,\n      params,\n      options,\n      partitionKey\n    });\n    return new ResourceResponse<T>(response.result, response.headers, response.code);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}