{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"./constants\";\nimport { trimSlashFromLeftAndRight, validateResourceId } from \"./helper\";\n/**\n * @ignore\n * Given a database id, this creates a database link.\n * @param {string} databaseId -The database id\n * @returns {string}          -A database link in the format of dbs/{0} \\\n * with {0} being a Uri escaped version of the databaseId\n * @description Would be used when creating or deleting a DocumentCollection \\\n * or a User in Azure Cosmos DB database service\n */\n\nexport function createDatabaseUri(databaseId) {\n  databaseId = trimSlashFromLeftAndRight(databaseId);\n  validateResourceId(databaseId);\n  return Constants.Path.DatabasesPathSegment + \"/\" + databaseId;\n}\n/**\n * Given a database and collection id, this creates a collection link.\n * @param {string} databaseId        -The database id\n * @param {string} collectionId      -The collection id\n * @returns {string}                 A collection link in the format of dbs/{0}/colls/{1} \\\n * with {0} being a Uri escaped version of the databaseId and {1} being collectionId\n * @description Would be used when updating or deleting a DocumentCollection, creating a \\\n * Document, a StoredProcedure, a Trigger, a UserDefinedFunction, or when executing a query \\\n * with CreateDocumentQuery in Azure Cosmos DB database service.\n * @ignore\n */\n\nexport function createDocumentCollectionUri(databaseId, collectionId) {\n  collectionId = trimSlashFromLeftAndRight(collectionId);\n  validateResourceId(collectionId);\n  return createDatabaseUri(databaseId) + \"/\" + Constants.Path.CollectionsPathSegment + \"/\" + collectionId;\n}\n/**\n * Given a database and user id, this creates a user link.\n * @param {string} databaseId        -The database id\n * @param {string} userId            -The user id\n * @returns {string}                 A user link in the format of dbs/{0}/users/{1} \\\n * with {0} being a Uri escaped version of the databaseId and {1} being userId\n * @description Would be used when creating a Permission, or when replacing or deleting \\\n * a User in Azure Cosmos DB database service\n * @ignore\n */\n\nexport function createUserUri(databaseId, userId) {\n  userId = trimSlashFromLeftAndRight(userId);\n  validateResourceId(userId);\n  return createDatabaseUri(databaseId) + \"/\" + Constants.Path.UsersPathSegment + \"/\" + userId;\n}\n/**\n * Given a database and collection id, this creates a collection link.\n * @param {string} databaseId        -The database id\n * @param {string} collectionId      -The collection id\n * @param {string} documentId        -The document id\n * @returns {string}                 -A document link in the format of \\\n * dbs/{0}/colls/{1}/docs/{2} with {0} being a Uri escaped version of \\\n * the databaseId, {1} being collectionId and {2} being the documentId\n * @description Would be used when creating an Attachment, or when replacing \\\n * or deleting a Document in Azure Cosmos DB database service\n * @ignore\n */\n\nexport function createDocumentUri(databaseId, collectionId, documentId) {\n  documentId = trimSlashFromLeftAndRight(documentId);\n  validateResourceId(documentId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.DocumentsPathSegment + \"/\" + documentId;\n}\n/**\n * Given a database, collection and document id, this creates a document link.\n * @param {string} databaseId    -The database Id\n * @param {string} userId        -The user Id\n * @param {string} permissionId  - The permissionId\n * @returns {string} A permission link in the format of dbs/{0}/users/{1}/permissions/{2} \\\n * with {0} being a Uri escaped version of the databaseId, {1} being userId and {2} being permissionId\n * @description Would be used when replacing or deleting a Permission in Azure Cosmos DB database service.\n * @ignore\n */\n\nexport function createPermissionUri(databaseId, userId, permissionId) {\n  permissionId = trimSlashFromLeftAndRight(permissionId);\n  validateResourceId(permissionId);\n  return createUserUri(databaseId, userId) + \"/\" + Constants.Path.PermissionsPathSegment + \"/\" + permissionId;\n}\n/**\n * Given a database, collection and stored proc id, this creates a stored proc link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} storedProcedureId -The stored procedure Id\n * @returns {string}                 -A stored procedure link in the format of \\\n * dbs/{0}/colls/{1}/sprocs/{2} with {0} being a Uri escaped version of the databaseId, \\\n * {1} being collectionId and {2} being the storedProcedureId\n * @description Would be used when replacing, executing, or deleting a StoredProcedure in \\\n * Azure Cosmos DB database service.\n * @ignore\n */\n\nexport function createStoredProcedureUri(databaseId, collectionId, storedProcedureId) {\n  storedProcedureId = trimSlashFromLeftAndRight(storedProcedureId);\n  validateResourceId(storedProcedureId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.StoredProceduresPathSegment + \"/\" + storedProcedureId;\n}\n/**\n * @summary Given a database, collection and trigger id, this creates a trigger link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} triggerId         -The trigger Id\n * @returns {string}                 -A trigger link in the format of \\\n * dbs/{0}/colls/{1}/triggers/{2} with {0} being a Uri escaped version of the databaseId, \\\n * {1} being collectionId and {2} being the triggerId\n * @description Would be used when replacing, executing, or deleting a Trigger in Azure Cosmos DB database service\n * @ignore\n */\n\nexport function createTriggerUri(databaseId, collectionId, triggerId) {\n  triggerId = trimSlashFromLeftAndRight(triggerId);\n  validateResourceId(triggerId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.TriggersPathSegment + \"/\" + triggerId;\n}\n/**\n * @summary Given a database, collection and udf id, this creates a udf link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} udfId             -The User Defined Function Id\n * @returns {string}                 -A udf link in the format of dbs/{0}/colls/{1}/udfs/{2} \\\n * with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the udfId\n * @description Would be used when replacing, executing, or deleting a UserDefinedFunction in \\\n * Azure Cosmos DB database service\n * @ignore\n */\n\nexport function createUserDefinedFunctionUri(databaseId, collectionId, udfId) {\n  udfId = trimSlashFromLeftAndRight(udfId);\n  validateResourceId(udfId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.UserDefinedFunctionsPathSegment + \"/\" + udfId;\n}\n/**\n * @summary Given a database, collection and conflict id, this creates a conflict link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} conflictId        -The conflict Id\n * @returns {string}                 -A conflict link in the format of dbs/{0}/colls/{1}/conflicts/{2} \\\n * with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the conflictId\n * @description Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @ignore\n */\n\nexport function createConflictUri(databaseId, collectionId, conflictId) {\n  conflictId = trimSlashFromLeftAndRight(conflictId);\n  validateResourceId(conflictId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.ConflictsPathSegment + \"/\" + conflictId;\n}\n/**\n * @summary Given a database, collection and conflict id, this creates a conflict link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} documentId        -The document Id\\\n * @param {string} attachmentId      -The attachment Id\n * @returns {string}                 -A conflict link in the format of dbs/{0}/colls/{1}/conflicts/{2} \\\n * with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the conflictId\n * @description Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @ignore\n */\n\nexport function createAttachmentUri(databaseId, collectionId, documentId, attachmentId) {\n  attachmentId = trimSlashFromLeftAndRight(attachmentId);\n  validateResourceId(attachmentId);\n  return createDocumentUri(databaseId, collectionId, documentId) + \"/\" + Constants.Path.AttachmentsPathSegment + \"/\" + attachmentId;\n}\n/**\n * @summary Given a database and collection, this creates a partition key ranges link in\\\n *  the Azure Cosmos DB database service.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @returns {string}                 -A partition key ranges link in the format of \\\n * dbs/{0}/colls/{1}/pkranges with {0} being a Uri escaped version of the databaseId and {1} being collectionId\n * @ignore\n */\n\nexport function createPartitionKeyRangesUri(databaseId, collectionId) {\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.PartitionKeyRangesPathSegment;\n}","map":{"version":3,"sources":["../../src/common/uriFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"./constants\";\nimport { trimSlashFromLeftAndRight, validateResourceId } from \"./helper\";\n\n/**\n * @ignore\n * Given a database id, this creates a database link.\n * @param {string} databaseId -The database id\n * @returns {string}          -A database link in the format of dbs/{0} \\\n * with {0} being a Uri escaped version of the databaseId\n * @description Would be used when creating or deleting a DocumentCollection \\\n * or a User in Azure Cosmos DB database service\n */\nexport function createDatabaseUri(databaseId: string) {\n  databaseId = trimSlashFromLeftAndRight(databaseId);\n  validateResourceId(databaseId);\n\n  return Constants.Path.DatabasesPathSegment + \"/\" + databaseId;\n}\n\n/**\n * Given a database and collection id, this creates a collection link.\n * @param {string} databaseId        -The database id\n * @param {string} collectionId      -The collection id\n * @returns {string}                 A collection link in the format of dbs/{0}/colls/{1} \\\n * with {0} being a Uri escaped version of the databaseId and {1} being collectionId\n * @description Would be used when updating or deleting a DocumentCollection, creating a \\\n * Document, a StoredProcedure, a Trigger, a UserDefinedFunction, or when executing a query \\\n * with CreateDocumentQuery in Azure Cosmos DB database service.\n * @ignore\n */\nexport function createDocumentCollectionUri(databaseId: string, collectionId: string) {\n  collectionId = trimSlashFromLeftAndRight(collectionId);\n  validateResourceId(collectionId);\n\n  return (\n    createDatabaseUri(databaseId) + \"/\" + Constants.Path.CollectionsPathSegment + \"/\" + collectionId\n  );\n}\n\n/**\n * Given a database and user id, this creates a user link.\n * @param {string} databaseId        -The database id\n * @param {string} userId            -The user id\n * @returns {string}                 A user link in the format of dbs/{0}/users/{1} \\\n * with {0} being a Uri escaped version of the databaseId and {1} being userId\n * @description Would be used when creating a Permission, or when replacing or deleting \\\n * a User in Azure Cosmos DB database service\n * @ignore\n */\nexport function createUserUri(databaseId: string, userId: string) {\n  userId = trimSlashFromLeftAndRight(userId);\n  validateResourceId(userId);\n\n  return createDatabaseUri(databaseId) + \"/\" + Constants.Path.UsersPathSegment + \"/\" + userId;\n}\n\n/**\n * Given a database and collection id, this creates a collection link.\n * @param {string} databaseId        -The database id\n * @param {string} collectionId      -The collection id\n * @param {string} documentId        -The document id\n * @returns {string}                 -A document link in the format of \\\n * dbs/{0}/colls/{1}/docs/{2} with {0} being a Uri escaped version of \\\n * the databaseId, {1} being collectionId and {2} being the documentId\n * @description Would be used when creating an Attachment, or when replacing \\\n * or deleting a Document in Azure Cosmos DB database service\n * @ignore\n */\nexport function createDocumentUri(databaseId: string, collectionId: string, documentId: string) {\n  documentId = trimSlashFromLeftAndRight(documentId);\n  validateResourceId(documentId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.DocumentsPathSegment +\n    \"/\" +\n    documentId\n  );\n}\n\n/**\n * Given a database, collection and document id, this creates a document link.\n * @param {string} databaseId    -The database Id\n * @param {string} userId        -The user Id\n * @param {string} permissionId  - The permissionId\n * @returns {string} A permission link in the format of dbs/{0}/users/{1}/permissions/{2} \\\n * with {0} being a Uri escaped version of the databaseId, {1} being userId and {2} being permissionId\n * @description Would be used when replacing or deleting a Permission in Azure Cosmos DB database service.\n * @ignore\n */\nexport function createPermissionUri(databaseId: string, userId: string, permissionId: string) {\n  permissionId = trimSlashFromLeftAndRight(permissionId);\n  validateResourceId(permissionId);\n\n  return (\n    createUserUri(databaseId, userId) +\n    \"/\" +\n    Constants.Path.PermissionsPathSegment +\n    \"/\" +\n    permissionId\n  );\n}\n\n/**\n * Given a database, collection and stored proc id, this creates a stored proc link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} storedProcedureId -The stored procedure Id\n * @returns {string}                 -A stored procedure link in the format of \\\n * dbs/{0}/colls/{1}/sprocs/{2} with {0} being a Uri escaped version of the databaseId, \\\n * {1} being collectionId and {2} being the storedProcedureId\n * @description Would be used when replacing, executing, or deleting a StoredProcedure in \\\n * Azure Cosmos DB database service.\n * @ignore\n */\nexport function createStoredProcedureUri(\n  databaseId: string,\n  collectionId: string,\n  storedProcedureId: string\n) {\n  storedProcedureId = trimSlashFromLeftAndRight(storedProcedureId);\n  validateResourceId(storedProcedureId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.StoredProceduresPathSegment +\n    \"/\" +\n    storedProcedureId\n  );\n}\n\n/**\n * @summary Given a database, collection and trigger id, this creates a trigger link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} triggerId         -The trigger Id\n * @returns {string}                 -A trigger link in the format of \\\n * dbs/{0}/colls/{1}/triggers/{2} with {0} being a Uri escaped version of the databaseId, \\\n * {1} being collectionId and {2} being the triggerId\n * @description Would be used when replacing, executing, or deleting a Trigger in Azure Cosmos DB database service\n * @ignore\n */\nexport function createTriggerUri(databaseId: string, collectionId: string, triggerId: string) {\n  triggerId = trimSlashFromLeftAndRight(triggerId);\n  validateResourceId(triggerId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.TriggersPathSegment +\n    \"/\" +\n    triggerId\n  );\n}\n\n/**\n * @summary Given a database, collection and udf id, this creates a udf link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} udfId             -The User Defined Function Id\n * @returns {string}                 -A udf link in the format of dbs/{0}/colls/{1}/udfs/{2} \\\n * with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the udfId\n * @description Would be used when replacing, executing, or deleting a UserDefinedFunction in \\\n * Azure Cosmos DB database service\n * @ignore\n */\nexport function createUserDefinedFunctionUri(\n  databaseId: string,\n  collectionId: string,\n  udfId: string\n) {\n  udfId = trimSlashFromLeftAndRight(udfId);\n  validateResourceId(udfId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.UserDefinedFunctionsPathSegment +\n    \"/\" +\n    udfId\n  );\n}\n\n/**\n * @summary Given a database, collection and conflict id, this creates a conflict link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} conflictId        -The conflict Id\n * @returns {string}                 -A conflict link in the format of dbs/{0}/colls/{1}/conflicts/{2} \\\n * with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the conflictId\n * @description Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @ignore\n */\nexport function createConflictUri(databaseId: string, collectionId: string, conflictId: string) {\n  conflictId = trimSlashFromLeftAndRight(conflictId);\n  validateResourceId(conflictId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.ConflictsPathSegment +\n    \"/\" +\n    conflictId\n  );\n}\n\n/**\n * @summary Given a database, collection and conflict id, this creates a conflict link.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @param {string} documentId        -The document Id\\\n * @param {string} attachmentId      -The attachment Id\n * @returns {string}                 -A conflict link in the format of dbs/{0}/colls/{1}/conflicts/{2} \\\n * with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the conflictId\n * @description Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @ignore\n */\nexport function createAttachmentUri(\n  databaseId: string,\n  collectionId: string,\n  documentId: string,\n  attachmentId: string\n) {\n  attachmentId = trimSlashFromLeftAndRight(attachmentId);\n  validateResourceId(attachmentId);\n\n  return (\n    createDocumentUri(databaseId, collectionId, documentId) +\n    \"/\" +\n    Constants.Path.AttachmentsPathSegment +\n    \"/\" +\n    attachmentId\n  );\n}\n\n/**\n * @summary Given a database and collection, this creates a partition key ranges link in\\\n *  the Azure Cosmos DB database service.\n * @param {string} databaseId        -The database Id\n * @param {string} collectionId      -The collection Id\n * @returns {string}                 -A partition key ranges link in the format of \\\n * dbs/{0}/colls/{1}/pkranges with {0} being a Uri escaped version of the databaseId and {1} being collectionId\n * @ignore\n */\nexport function createPartitionKeyRangesUri(databaseId: string, collectionId: string) {\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.PartitionKeyRangesPathSegment\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}