{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// Ported this implementation to javascript:\n// https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,83e476c1ae112117\n\n/** @hidden */\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst ticksPerMillisecond = 10000;\n/** @hidden */\n\nconst millisecondsPerTick = 1.0 / ticksPerMillisecond;\n/** @hidden */\n\nconst ticksPerSecond = ticksPerMillisecond * 1000; // 10,000,000\n\n/** @hidden */\n\nconst secondsPerTick = 1.0 / ticksPerSecond; // 0.0001\n\n/** @hidden */\n\nconst ticksPerMinute = ticksPerSecond * 60; // 600,000,000\n\n/** @hidden */\n\nconst minutesPerTick = 1.0 / ticksPerMinute; // 1.6666666666667e-9\n\n/** @hidden */\n\nconst ticksPerHour = ticksPerMinute * 60; // 36,000,000,000\n\n/** @hidden */\n\nconst hoursPerTick = 1.0 / ticksPerHour; // 2.77777777777777778e-11\n\n/** @hidden */\n\nconst ticksPerDay = ticksPerHour * 24; // 864,000,000,000\n\n/** @hidden */\n\nconst daysPerTick = 1.0 / ticksPerDay; // 1.1574074074074074074e-12\n\n/** @hidden */\n\nconst millisPerSecond = 1000;\n/** @hidden */\n\nconst millisPerMinute = millisPerSecond * 60; //     60,000\n\n/** @hidden */\n\nconst millisPerHour = millisPerMinute * 60; //  3,600,000\n\n/** @hidden */\n\nconst millisPerDay = millisPerHour * 24; // 86,400,000\n\n/** @hidden */\n\nconst maxMilliSeconds = Number.MAX_SAFE_INTEGER / ticksPerMillisecond;\n/** @hidden */\n\nconst minMilliSeconds = Number.MIN_SAFE_INTEGER / ticksPerMillisecond;\n/**\n * Represents a time interval.\n *\n * @constructor TimeSpan\n * @param {number} days                 - Number of days.\n * @param {number} hours                - Number of hours.\n * @param {number} minutes              - Number of minutes.\n * @param {number} seconds              - Number of seconds.\n * @param {number} milliseconds         - Number of milliseconds.\n * @ignore\n */\n\nexport class TimeSpan {\n  constructor(days, hours, minutes, seconds, milliseconds) {\n    // Constructor\n    if (!Number.isInteger(days)) {\n      throw new Error(\"days is not an integer\");\n    }\n\n    if (!Number.isInteger(hours)) {\n      throw new Error(\"hours is not an integer\");\n    }\n\n    if (!Number.isInteger(minutes)) {\n      throw new Error(\"minutes is not an integer\");\n    }\n\n    if (!Number.isInteger(seconds)) {\n      throw new Error(\"seconds is not an integer\");\n    }\n\n    if (!Number.isInteger(milliseconds)) {\n      throw new Error(\"milliseconds is not an integer\");\n    }\n\n    const totalMilliSeconds = (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;\n\n    if (totalMilliSeconds > maxMilliSeconds || totalMilliSeconds < minMilliSeconds) {\n      throw new Error(\"Total number of milliseconds was either too large or too small\");\n    }\n\n    this._ticks = totalMilliSeconds * ticksPerMillisecond;\n  }\n  /**\n   * Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance.\n   * @param {TimeSpan} ts              - The time interval to add.\n   * @memberof TimeSpan\n   * @instance\n   */\n\n\n  add(ts) {\n    if (TimeSpan.additionDoesOverflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Adding the two timestamps causes an overflow.\");\n    }\n\n    const results = this._ticks + ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n  /**\n   * Returns a new TimeSpan object whose value is the difference of the specified TimeSpan object and this instance.\n   * @param {TimeSpan} ts              - The time interval to subtract.\n   * @memberof TimeSpan\n   * @instance\n   */\n\n\n  subtract(ts) {\n    if (TimeSpan.subtractionDoesUnderflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Subtracting the two timestamps causes an underflow.\");\n    }\n\n    const results = this._ticks - ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n  /**\n   * Compares this instance to a specified object and returns an integer that indicates whether this\n   * instance is shorter than, equal to, or longer than the specified object.\n   * @param {TimeSpan} value              - The time interval to add.\n   * @memberof TimeSpan\n   * @instance\n   */\n\n\n  compareTo(value) {\n    if (value == null) {\n      return 1;\n    }\n\n    if (!TimeSpan.isTimeSpan(value)) {\n      throw new Error(\"Argument must be a TimeSpan object\");\n    }\n\n    return TimeSpan.compare(this, value);\n  }\n  /**\n   * Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.\n   * @memberof TimeSpan\n   * @instance\n   */\n\n\n  duration() {\n    return TimeSpan.fromTicks(this._ticks >= 0 ? this._ticks : -this._ticks);\n  }\n  /**\n   * Returns a value indicating whether this instance is equal to a specified object.\n   * @memberof TimeSpan\n   * @param {TimeSpan} value              - The time interval to check for equality.\n   * @instance\n   */\n\n\n  equals(value) {\n    if (TimeSpan.isTimeSpan(value)) {\n      return this._ticks === value._ticks;\n    }\n\n    return false;\n  }\n  /**\n   * Returns a new TimeSpan object whose value is the negated value of this instance.\n   * @memberof TimeSpan\n   * @param {TimeSpan} value              - The time interval to check for equality.\n   * @instance\n   */\n\n\n  negate() {\n    return TimeSpan.fromTicks(-this._ticks);\n  }\n\n  days() {\n    return Math.floor(this._ticks / ticksPerDay);\n  }\n\n  hours() {\n    return Math.floor(this._ticks / ticksPerHour);\n  }\n\n  milliseconds() {\n    return Math.floor(this._ticks / ticksPerMillisecond);\n  }\n\n  seconds() {\n    return Math.floor(this._ticks / ticksPerSecond);\n  }\n\n  ticks() {\n    return this._ticks;\n  }\n\n  totalDays() {\n    return this._ticks * daysPerTick;\n  }\n\n  totalHours() {\n    return this._ticks * hoursPerTick;\n  }\n\n  totalMilliseconds() {\n    return this._ticks * millisecondsPerTick;\n  }\n\n  totalMinutes() {\n    return this._ticks * minutesPerTick;\n  }\n\n  totalSeconds() {\n    return this._ticks * secondsPerTick;\n  }\n\n  static fromTicks(value) {\n    const timeSpan = new TimeSpan(0, 0, 0, 0, 0);\n    timeSpan._ticks = value;\n    return timeSpan;\n  }\n\n  static isTimeSpan(timespan) {\n    return timespan._ticks;\n  }\n\n  static additionDoesOverflow(a, b) {\n    const c = a + b;\n    return a !== c - b || b !== c - a;\n  }\n\n  static subtractionDoesUnderflow(a, b) {\n    const c = a - b;\n    return a !== c + b || b !== a - c;\n  }\n\n  static compare(t1, t2) {\n    if (t1._ticks > t2._ticks) {\n      return 1;\n    }\n\n    if (t1._ticks < t2._ticks) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  static interval(value, scale) {\n    if (isNaN(value)) {\n      throw new Error(\"value must be a number\");\n    }\n\n    const milliseconds = value * scale;\n\n    if (milliseconds > maxMilliSeconds || milliseconds < minMilliSeconds) {\n      throw new Error(\"timespan too long\");\n    }\n\n    return TimeSpan.fromTicks(Math.floor(milliseconds * ticksPerMillisecond));\n  }\n\n  static fromMilliseconds(value) {\n    return TimeSpan.interval(value, 1);\n  }\n\n  static fromSeconds(value) {\n    return TimeSpan.interval(value, millisPerSecond);\n  }\n\n  static fromMinutes(value) {\n    return TimeSpan.interval(value, millisPerMinute);\n  }\n\n  static fromHours(value) {\n    return TimeSpan.interval(value, millisPerHour);\n  }\n\n  static fromDays(value) {\n    return TimeSpan.interval(value, millisPerDay);\n  }\n\n}\nTimeSpan.zero = new TimeSpan(0, 0, 0, 0, 0);\nTimeSpan.maxValue = TimeSpan.fromTicks(Number.MAX_SAFE_INTEGER);\nTimeSpan.minValue = TimeSpan.fromTicks(Number.MIN_SAFE_INTEGER);","map":{"version":3,"sources":["../../src/queryMetrics/timeSpan.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// Ported this implementation to javascript:\n// https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,83e476c1ae112117\n/** @hidden */\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst ticksPerMillisecond = 10000;\n/** @hidden */\nconst millisecondsPerTick = 1.0 / ticksPerMillisecond;\n\n/** @hidden */\nconst ticksPerSecond = ticksPerMillisecond * 1000; // 10,000,000\n/** @hidden */\nconst secondsPerTick = 1.0 / ticksPerSecond; // 0.0001\n\n/** @hidden */\nconst ticksPerMinute = ticksPerSecond * 60; // 600,000,000\n/** @hidden */\nconst minutesPerTick = 1.0 / ticksPerMinute; // 1.6666666666667e-9\n\n/** @hidden */\nconst ticksPerHour = ticksPerMinute * 60; // 36,000,000,000\n/** @hidden */\nconst hoursPerTick = 1.0 / ticksPerHour; // 2.77777777777777778e-11\n\n/** @hidden */\nconst ticksPerDay = ticksPerHour * 24; // 864,000,000,000\n/** @hidden */\nconst daysPerTick = 1.0 / ticksPerDay; // 1.1574074074074074074e-12\n\n/** @hidden */\nconst millisPerSecond = 1000;\n/** @hidden */\nconst millisPerMinute = millisPerSecond * 60; //     60,000\n/** @hidden */\nconst millisPerHour = millisPerMinute * 60; //  3,600,000\n/** @hidden */\nconst millisPerDay = millisPerHour * 24; // 86,400,000\n\n/** @hidden */\nconst maxMilliSeconds = Number.MAX_SAFE_INTEGER / ticksPerMillisecond;\n/** @hidden */\nconst minMilliSeconds = Number.MIN_SAFE_INTEGER / ticksPerMillisecond;\n\n/**\n * Represents a time interval.\n *\n * @constructor TimeSpan\n * @param {number} days                 - Number of days.\n * @param {number} hours                - Number of hours.\n * @param {number} minutes              - Number of minutes.\n * @param {number} seconds              - Number of seconds.\n * @param {number} milliseconds         - Number of milliseconds.\n * @ignore\n */\nexport class TimeSpan {\n  // tslint:disable-next-line:variable-name\n  protected _ticks: number;\n  constructor(days: number, hours: number, minutes: number, seconds: number, milliseconds: number) {\n    // Constructor\n    if (!Number.isInteger(days)) {\n      throw new Error(\"days is not an integer\");\n    }\n\n    if (!Number.isInteger(hours)) {\n      throw new Error(\"hours is not an integer\");\n    }\n\n    if (!Number.isInteger(minutes)) {\n      throw new Error(\"minutes is not an integer\");\n    }\n\n    if (!Number.isInteger(seconds)) {\n      throw new Error(\"seconds is not an integer\");\n    }\n\n    if (!Number.isInteger(milliseconds)) {\n      throw new Error(\"milliseconds is not an integer\");\n    }\n\n    const totalMilliSeconds =\n      (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;\n    if (totalMilliSeconds > maxMilliSeconds || totalMilliSeconds < minMilliSeconds) {\n      throw new Error(\"Total number of milliseconds was either too large or too small\");\n    }\n\n    this._ticks = totalMilliSeconds * ticksPerMillisecond;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance.\n   * @param {TimeSpan} ts              - The time interval to add.\n   * @memberof TimeSpan\n   * @instance\n   */\n  public add(ts: TimeSpan) {\n    if (TimeSpan.additionDoesOverflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Adding the two timestamps causes an overflow.\");\n    }\n\n    const results = this._ticks + ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the difference of the specified TimeSpan object and this instance.\n   * @param {TimeSpan} ts              - The time interval to subtract.\n   * @memberof TimeSpan\n   * @instance\n   */\n  public subtract(ts: TimeSpan) {\n    if (TimeSpan.subtractionDoesUnderflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Subtracting the two timestamps causes an underflow.\");\n    }\n\n    const results = this._ticks - ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Compares this instance to a specified object and returns an integer that indicates whether this\n   * instance is shorter than, equal to, or longer than the specified object.\n   * @param {TimeSpan} value              - The time interval to add.\n   * @memberof TimeSpan\n   * @instance\n   */\n  public compareTo(value: TimeSpan) {\n    if (value == null) {\n      return 1;\n    }\n\n    if (!TimeSpan.isTimeSpan(value)) {\n      throw new Error(\"Argument must be a TimeSpan object\");\n    }\n\n    return TimeSpan.compare(this, value);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.\n   * @memberof TimeSpan\n   * @instance\n   */\n  public duration() {\n    return TimeSpan.fromTicks(this._ticks >= 0 ? this._ticks : -this._ticks);\n  }\n\n  /**\n   * Returns a value indicating whether this instance is equal to a specified object.\n   * @memberof TimeSpan\n   * @param {TimeSpan} value              - The time interval to check for equality.\n   * @instance\n   */\n  public equals(value: TimeSpan) {\n    if (TimeSpan.isTimeSpan(value)) {\n      return this._ticks === value._ticks;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the negated value of this instance.\n   * @memberof TimeSpan\n   * @param {TimeSpan} value              - The time interval to check for equality.\n   * @instance\n   */\n  public negate() {\n    return TimeSpan.fromTicks(-this._ticks);\n  }\n\n  public days() {\n    return Math.floor(this._ticks / ticksPerDay);\n  }\n\n  public hours() {\n    return Math.floor(this._ticks / ticksPerHour);\n  }\n\n  public milliseconds() {\n    return Math.floor(this._ticks / ticksPerMillisecond);\n  }\n\n  public seconds() {\n    return Math.floor(this._ticks / ticksPerSecond);\n  }\n\n  public ticks() {\n    return this._ticks;\n  }\n\n  public totalDays() {\n    return this._ticks * daysPerTick;\n  }\n  public totalHours() {\n    return this._ticks * hoursPerTick;\n  }\n\n  public totalMilliseconds() {\n    return this._ticks * millisecondsPerTick;\n  }\n\n  public totalMinutes() {\n    return this._ticks * minutesPerTick;\n  }\n\n  public totalSeconds() {\n    return this._ticks * secondsPerTick;\n  }\n\n  public static fromTicks(value: number) {\n    const timeSpan = new TimeSpan(0, 0, 0, 0, 0);\n    timeSpan._ticks = value;\n    return timeSpan;\n  }\n\n  public static readonly zero = new TimeSpan(0, 0, 0, 0, 0);\n  public static readonly maxValue = TimeSpan.fromTicks(Number.MAX_SAFE_INTEGER);\n  public static readonly minValue = TimeSpan.fromTicks(Number.MIN_SAFE_INTEGER);\n\n  public static isTimeSpan(timespan: TimeSpan) {\n    return timespan._ticks;\n  }\n\n  public static additionDoesOverflow(a: number, b: number) {\n    const c = a + b;\n    return a !== c - b || b !== c - a;\n  }\n\n  public static subtractionDoesUnderflow(a: number, b: number) {\n    const c = a - b;\n    return a !== c + b || b !== a - c;\n  }\n\n  public static compare(t1: TimeSpan, t2: TimeSpan) {\n    if (t1._ticks > t2._ticks) {\n      return 1;\n    }\n    if (t1._ticks < t2._ticks) {\n      return -1;\n    }\n    return 0;\n  }\n\n  public static interval(value: number, scale: number) {\n    if (isNaN(value)) {\n      throw new Error(\"value must be a number\");\n    }\n\n    const milliseconds = value * scale;\n    if (milliseconds > maxMilliSeconds || milliseconds < minMilliSeconds) {\n      throw new Error(\"timespan too long\");\n    }\n\n    return TimeSpan.fromTicks(Math.floor(milliseconds * ticksPerMillisecond));\n  }\n\n  public static fromMilliseconds(value: number) {\n    return TimeSpan.interval(value, 1);\n  }\n\n  public static fromSeconds(value: number) {\n    return TimeSpan.interval(value, millisPerSecond);\n  }\n\n  public static fromMinutes(value: number) {\n    return TimeSpan.interval(value, millisPerMinute);\n  }\n\n  public static fromHours(value: number) {\n    return TimeSpan.interval(value, millisPerHour);\n  }\n\n  public static fromDays(value: number) {\n    return TimeSpan.interval(value, millisPerDay);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}