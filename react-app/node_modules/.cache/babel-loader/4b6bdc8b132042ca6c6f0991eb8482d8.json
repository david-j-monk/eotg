{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\nexport class QueryPreparationTimes {\n  constructor(queryCompilationTime, logicalPlanBuildTime, physicalPlanBuildTime, queryOptimizationTime) {\n    this.queryCompilationTime = queryCompilationTime;\n    this.logicalPlanBuildTime = logicalPlanBuildTime;\n    this.physicalPlanBuildTime = physicalPlanBuildTime;\n    this.queryOptimizationTime = queryOptimizationTime;\n  }\n  /**\n   * returns a new QueryPreparationTimes instance that is the addition of this and the arguments.\n   */\n\n\n  add(...queryPreparationTimesArray) {\n    let queryCompilationTime = this.queryCompilationTime;\n    let logicalPlanBuildTime = this.logicalPlanBuildTime;\n    let physicalPlanBuildTime = this.physicalPlanBuildTime;\n    let queryOptimizationTime = this.queryOptimizationTime;\n\n    for (const queryPreparationTimes of queryPreparationTimesArray) {\n      if (queryPreparationTimes == null) {\n        throw new Error(\"queryPreparationTimesArray has null or undefined item(s)\");\n      }\n\n      queryCompilationTime = queryCompilationTime.add(queryPreparationTimes.queryCompilationTime);\n      logicalPlanBuildTime = logicalPlanBuildTime.add(queryPreparationTimes.logicalPlanBuildTime);\n      physicalPlanBuildTime = physicalPlanBuildTime.add(queryPreparationTimes.physicalPlanBuildTime);\n      queryOptimizationTime = queryOptimizationTime.add(queryPreparationTimes.queryOptimizationTime);\n    }\n\n    return new QueryPreparationTimes(queryCompilationTime, logicalPlanBuildTime, physicalPlanBuildTime, queryOptimizationTime);\n  }\n  /**\n   * Output the QueryPreparationTimes as a delimited string.\n   */\n\n\n  toDelimitedString() {\n    return `${QueryMetricsConstants.QueryCompileTimeInMs}=${this.queryCompilationTime.totalMilliseconds()};` + `${QueryMetricsConstants.LogicalPlanBuildTimeInMs}=${this.logicalPlanBuildTime.totalMilliseconds()};` + `${QueryMetricsConstants.PhysicalPlanBuildTimeInMs}=${this.physicalPlanBuildTime.totalMilliseconds()};` + `${QueryMetricsConstants.QueryOptimizationTimeInMs}=${this.queryOptimizationTime.totalMilliseconds()}`;\n  }\n  /**\n   * Returns a new instance of the QueryPreparationTimes class that is the\n   * aggregation of an array of QueryPreparationTimes.\n   * @memberof QueryMetrics\n   * @instance\n   */\n\n\n  static createFromArray(queryPreparationTimesArray) {\n    if (queryPreparationTimesArray == null) {\n      throw new Error(\"queryPreparationTimesArray is null or undefined item(s)\");\n    }\n\n    return QueryPreparationTimes.zero.add(...queryPreparationTimesArray);\n  }\n  /**\n   * Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.\n   * @memberof QueryMetrics\n   * @instance\n   */\n\n\n  static createFromDelimitedString(delimitedString) {\n    const metrics = parseDelimitedString(delimitedString);\n    return new QueryPreparationTimes(timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryCompileTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.LogicalPlanBuildTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.PhysicalPlanBuildTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryOptimizationTimeInMs));\n  }\n\n}\nQueryPreparationTimes.zero = new QueryPreparationTimes(TimeSpan.zero, TimeSpan.zero, TimeSpan.zero, TimeSpan.zero);","map":{"version":3,"sources":["../../src/queryMetrics/queryPreparationTime.ts"],"names":[],"mappings":"AAAA;AACA;AACA,OAAO,qBAAP,MAAkC,yBAAlC;AACA,SAAS,oBAAT,EAA+B,mBAA/B,QAA0D,qBAA1D;AACA,SAAS,QAAT,QAAyB,YAAzB;AAEA,OAAM,MAAO,qBAAP,CAA4B;AAChC,EAAA,WAAA,CACkB,oBADlB,EAEkB,oBAFlB,EAGkB,qBAHlB,EAIkB,qBAJlB,EAIiD;AAH/B,SAAA,oBAAA,GAAA,oBAAA;AACA,SAAA,oBAAA,GAAA,oBAAA;AACA,SAAA,qBAAA,GAAA,qBAAA;AACA,SAAA,qBAAA,GAAA,qBAAA;AACd;AAEJ;;;;;AAGO,EAAA,GAAG,CAAC,GAAG,0BAAJ,EAAuD;AAC/D,QAAI,oBAAoB,GAAG,KAAK,oBAAhC;AACA,QAAI,oBAAoB,GAAG,KAAK,oBAAhC;AACA,QAAI,qBAAqB,GAAG,KAAK,qBAAjC;AACA,QAAI,qBAAqB,GAAG,KAAK,qBAAjC;;AAEA,SAAK,MAAM,qBAAX,IAAoC,0BAApC,EAAgE;AAC9D,UAAI,qBAAqB,IAAI,IAA7B,EAAmC;AACjC,cAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,MAAA,oBAAoB,GAAG,oBAAoB,CAAC,GAArB,CAAyB,qBAAqB,CAAC,oBAA/C,CAAvB;AACA,MAAA,oBAAoB,GAAG,oBAAoB,CAAC,GAArB,CAAyB,qBAAqB,CAAC,oBAA/C,CAAvB;AACA,MAAA,qBAAqB,GAAG,qBAAqB,CAAC,GAAtB,CACtB,qBAAqB,CAAC,qBADA,CAAxB;AAGA,MAAA,qBAAqB,GAAG,qBAAqB,CAAC,GAAtB,CACtB,qBAAqB,CAAC,qBADA,CAAxB;AAGD;;AAED,WAAO,IAAI,qBAAJ,CACL,oBADK,EAEL,oBAFK,EAGL,qBAHK,EAIL,qBAJK,CAAP;AAMD;AAED;;;;;AAGO,EAAA,iBAAiB,GAAA;AACtB,WACE,GACE,qBAAqB,CAAC,oBACxB,IAAI,KAAK,oBAAL,CAA0B,iBAA1B,EAA6C,GAFjD,GAGA,GACE,qBAAqB,CAAC,wBACxB,IAAI,KAAK,oBAAL,CAA0B,iBAA1B,EAA6C,GALjD,GAMA,GACE,qBAAqB,CAAC,yBACxB,IAAI,KAAK,qBAAL,CAA2B,iBAA3B,EAA8C,GARlD,GASA,GACE,qBAAqB,CAAC,yBACxB,IAAI,KAAK,qBAAL,CAA2B,iBAA3B,EAA8C,EAZpD;AAcD;AASD;;;;;;;;AAMO,SAAO,eAAP,CAAuB,0BAAvB,EAA0E;AAC/E,QAAI,0BAA0B,IAAI,IAAlC,EAAwC;AACtC,YAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,WAAO,qBAAqB,CAAC,IAAtB,CAA2B,GAA3B,CAA+B,GAAG,0BAAlC,CAAP;AACD;AAED;;;;;;;AAKO,SAAO,yBAAP,CAAiC,eAAjC,EAAwD;AAC7D,UAAM,OAAO,GAAG,oBAAoB,CAAC,eAAD,CAApC;AAEA,WAAO,IAAI,qBAAJ,CACL,mBAAmB,CAAC,OAAD,EAAU,qBAAqB,CAAC,oBAAhC,CADd,EAEL,mBAAmB,CAAC,OAAD,EAAU,qBAAqB,CAAC,wBAAhC,CAFd,EAGL,mBAAmB,CAAC,OAAD,EAAU,qBAAqB,CAAC,yBAAhC,CAHd,EAIL,mBAAmB,CAAC,OAAD,EAAU,qBAAqB,CAAC,yBAAhC,CAJd,CAAP;AAMD;;AA/F+B;AA4DT,qBAAA,CAAA,IAAA,GAAO,IAAI,qBAAJ,CAC5B,QAAQ,CAAC,IADmB,EAE5B,QAAQ,CAAC,IAFmB,EAG5B,QAAQ,CAAC,IAHmB,EAI5B,QAAQ,CAAC,IAJmB,CAAP","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class QueryPreparationTimes {\n  constructor(\n    public readonly queryCompilationTime: TimeSpan,\n    public readonly logicalPlanBuildTime: TimeSpan,\n    public readonly physicalPlanBuildTime: TimeSpan,\n    public readonly queryOptimizationTime: TimeSpan\n  ) {}\n\n  /**\n   * returns a new QueryPreparationTimes instance that is the addition of this and the arguments.\n   */\n  public add(...queryPreparationTimesArray: QueryPreparationTimes[]) {\n    let queryCompilationTime = this.queryCompilationTime;\n    let logicalPlanBuildTime = this.logicalPlanBuildTime;\n    let physicalPlanBuildTime = this.physicalPlanBuildTime;\n    let queryOptimizationTime = this.queryOptimizationTime;\n\n    for (const queryPreparationTimes of queryPreparationTimesArray) {\n      if (queryPreparationTimes == null) {\n        throw new Error(\"queryPreparationTimesArray has null or undefined item(s)\");\n      }\n\n      queryCompilationTime = queryCompilationTime.add(queryPreparationTimes.queryCompilationTime);\n      logicalPlanBuildTime = logicalPlanBuildTime.add(queryPreparationTimes.logicalPlanBuildTime);\n      physicalPlanBuildTime = physicalPlanBuildTime.add(\n        queryPreparationTimes.physicalPlanBuildTime\n      );\n      queryOptimizationTime = queryOptimizationTime.add(\n        queryPreparationTimes.queryOptimizationTime\n      );\n    }\n\n    return new QueryPreparationTimes(\n      queryCompilationTime,\n      logicalPlanBuildTime,\n      physicalPlanBuildTime,\n      queryOptimizationTime\n    );\n  }\n\n  /**\n   * Output the QueryPreparationTimes as a delimited string.\n   */\n  public toDelimitedString() {\n    return (\n      `${\n        QueryMetricsConstants.QueryCompileTimeInMs\n      }=${this.queryCompilationTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.LogicalPlanBuildTimeInMs\n      }=${this.logicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.PhysicalPlanBuildTimeInMs\n      }=${this.physicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.QueryOptimizationTimeInMs\n      }=${this.queryOptimizationTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new QueryPreparationTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero\n  );\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class that is the\n   * aggregation of an array of QueryPreparationTimes.\n   * @memberof QueryMetrics\n   * @instance\n   */\n  public static createFromArray(queryPreparationTimesArray: QueryPreparationTimes[]) {\n    if (queryPreparationTimesArray == null) {\n      throw new Error(\"queryPreparationTimesArray is null or undefined item(s)\");\n    }\n\n    return QueryPreparationTimes.zero.add(...queryPreparationTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.\n   * @memberof QueryMetrics\n   * @instance\n   */\n  public static createFromDelimitedString(delimitedString: string) {\n    const metrics = parseDelimitedString(delimitedString);\n\n    return new QueryPreparationTimes(\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryCompileTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.LogicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.PhysicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryOptimizationTimeInMs)\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}