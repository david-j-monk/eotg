{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/** @hidden */\nexport var FetchResultType;\n\n(function (FetchResultType) {\n  FetchResultType[FetchResultType[\"Done\"] = 0] = \"Done\";\n  FetchResultType[FetchResultType[\"Exception\"] = 1] = \"Exception\";\n  FetchResultType[FetchResultType[\"Result\"] = 2] = \"Result\";\n})(FetchResultType || (FetchResultType = {}));\n/** @hidden */\n\n\nexport class FetchResult {\n  /**\n   * Wraps fetch results for the document producer.\n   * This allows the document producer to buffer exceptions so that actual results don't get flushed during splits.\n   * @constructor DocumentProducer\n   * @param {object} feedReponse                  - The response the document producer got back on a successful fetch\n   * @param {object} error                        - The exception meant to be buffered on an unsuccessful fetch\n   * @ignore\n   */\n  constructor(feedResponse, error) {\n    // TODO: feedResponse/error\n    if (feedResponse) {\n      this.feedResponse = feedResponse;\n      this.fetchResultType = FetchResultType.Result;\n    } else {\n      this.error = error;\n      this.fetchResultType = FetchResultType.Exception;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/queryExecutionContext/FetchResult.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA,OAAA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACzB,EAAA,eAAA,CAAA,eAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAY,eAAe,KAAf,eAAe,GAAA,EAAA,CAA3B;AAMA;;;AACA,OAAM,MAAO,WAAP,CAAkB;AAItB;;;;;;;;AAQA,EAAA,WAAA,CAAY,YAAZ,EAA+B,KAA/B,EAAyC;AACvC;AACA,QAAI,YAAJ,EAAkB;AAChB,WAAK,YAAL,GAAoB,YAApB;AACA,WAAK,eAAL,GAAuB,eAAe,CAAC,MAAvC;AACD,KAHD,MAGO;AACL,WAAK,KAAL,GAAa,KAAb;AACA,WAAK,eAAL,GAAuB,eAAe,CAAC,SAAvC;AACD;AACF;;AArBqB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** @hidden */\nexport enum FetchResultType {\n  \"Done\" = 0,\n  \"Exception\" = 1,\n  \"Result\" = 2\n}\n\n/** @hidden */\nexport class FetchResult {\n  public feedResponse: any;\n  public fetchResultType: FetchResultType;\n  public error: any;\n  /**\n   * Wraps fetch results for the document producer.\n   * This allows the document producer to buffer exceptions so that actual results don't get flushed during splits.\n   * @constructor DocumentProducer\n   * @param {object} feedReponse                  - The response the document producer got back on a successful fetch\n   * @param {object} error                        - The exception meant to be buffered on an unsuccessful fetch\n   * @ignore\n   */\n  constructor(feedResponse: any, error: any) {\n    // TODO: feedResponse/error\n    if (feedResponse) {\n      this.feedResponse = feedResponse;\n      this.fetchResultType = FetchResultType.Result;\n    } else {\n      this.error = error;\n      this.fetchResultType = FetchResultType.Exception;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}