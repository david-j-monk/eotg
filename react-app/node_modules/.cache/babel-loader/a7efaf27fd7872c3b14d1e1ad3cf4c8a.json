{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { TimeSpan } from \"./timeSpan\";\n/**\n * @ignore\n * @param delimitedString\n */\n\nexport function parseDelimitedString(delimitedString) {\n  if (delimitedString == null) {\n    throw new Error(\"delimitedString is null or undefined\");\n  }\n\n  const metrics = {};\n  const headerAttributes = delimitedString.split(\";\");\n\n  for (const attribute of headerAttributes) {\n    const attributeKeyValue = attribute.split(\"=\");\n\n    if (attributeKeyValue.length !== 2) {\n      throw new Error(\"recieved a malformed delimited string\");\n    }\n\n    const attributeKey = attributeKeyValue[0];\n    const attributeValue = parseFloat(attributeKeyValue[1]);\n    metrics[attributeKey] = attributeValue;\n  }\n\n  return metrics;\n}\n/**\n * @ignore\n * @param metrics\n * @param key\n */\n\nexport function timeSpanFromMetrics(metrics\n/* TODO: any */\n, key) {\n  if (key in metrics) {\n    return TimeSpan.fromMilliseconds(metrics[key]);\n  }\n\n  return TimeSpan.zero;\n}\n/**\n * @ignore\n * @param input\n */\n\nexport function isNumeric(input) {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n}","map":{"version":3,"sources":["../../src/queryMetrics/queryMetricsUtils.ts"],"names":[],"mappings":"AAAA;AACA;AACA,SAAS,QAAT,QAAyB,YAAzB;AAEA;;;;;AAIA,OAAM,SAAU,oBAAV,CAA+B,eAA/B,EAAsD;AAC1D,MAAI,eAAe,IAAI,IAAvB,EAA6B;AAC3B,UAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAM,OAAO,GAA2B,EAAxC;AAEA,QAAM,gBAAgB,GAAG,eAAe,CAAC,KAAhB,CAAsB,GAAtB,CAAzB;;AACA,OAAK,MAAM,SAAX,IAAwB,gBAAxB,EAA0C;AACxC,UAAM,iBAAiB,GAAG,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAA1B;;AAEA,QAAI,iBAAiB,CAAC,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,YAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,UAAM,YAAY,GAAG,iBAAiB,CAAC,CAAD,CAAtC;AACA,UAAM,cAAc,GAAG,UAAU,CAAC,iBAAiB,CAAC,CAAD,CAAlB,CAAjC;AAEA,IAAA,OAAO,CAAC,YAAD,CAAP,GAAwB,cAAxB;AACD;;AAED,SAAO,OAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAU,mBAAV,CAA8B;AAAgC;AAA9D,EAA+E,GAA/E,EAA0F;AAC9F,MAAI,GAAG,IAAI,OAAX,EAAoB;AAClB,WAAO,QAAQ,CAAC,gBAAT,CAA0B,OAAO,CAAC,GAAD,CAAjC,CAAP;AACD;;AAED,SAAO,QAAQ,CAAC,IAAhB;AACD;AAED;;;;;AAIA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAA8B;AAClC,SAAO,CAAC,KAAK,CAAC,UAAU,CAAC,KAAD,CAAX,CAAN,IAA6B,QAAQ,CAAC,KAAD,CAA5C;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { TimeSpan } from \"./timeSpan\";\n\n/**\n * @ignore\n * @param delimitedString\n */\nexport function parseDelimitedString(delimitedString: string) {\n  if (delimitedString == null) {\n    throw new Error(\"delimitedString is null or undefined\");\n  }\n\n  const metrics: { [key: string]: any } = {};\n\n  const headerAttributes = delimitedString.split(\";\");\n  for (const attribute of headerAttributes) {\n    const attributeKeyValue = attribute.split(\"=\");\n\n    if (attributeKeyValue.length !== 2) {\n      throw new Error(\"recieved a malformed delimited string\");\n    }\n\n    const attributeKey = attributeKeyValue[0];\n    const attributeValue = parseFloat(attributeKeyValue[1]);\n\n    metrics[attributeKey] = attributeValue;\n  }\n\n  return metrics;\n}\n\n/**\n * @ignore\n * @param metrics\n * @param key\n */\nexport function timeSpanFromMetrics(metrics: { [key: string]: any } /* TODO: any */, key: string) {\n  if (key in metrics) {\n    return TimeSpan.fromMilliseconds(metrics[key]);\n  }\n\n  return TimeSpan.zero;\n}\n\n/**\n * @ignore\n * @param input\n */\nexport function isNumeric(input: any) {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}