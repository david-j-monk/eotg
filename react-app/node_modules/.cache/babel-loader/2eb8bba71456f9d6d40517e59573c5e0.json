{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { Permission } from \"./Permission\";\nimport { PermissionResponse } from \"./PermissionResponse\";\n/**\n * Use to create, replace, query, and read all Permissions.\n *\n * @see {@link Permission} to read, replace, or delete a specific permission by id.\n */\n\nexport class Permissions {\n  /**\n   * @hidden\n   * @param user The parent {@link User}.\n   */\n  constructor(user, clientContext) {\n    this.user = user;\n    this.clientContext = clientContext;\n  }\n\n  query(query, options) {\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n    return new QueryIterator(this.clientContext, query, options, innerOptions => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        resultFn: result => result.Permissions,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n  /**\n   * Read all permissions.\n   * @param options\n   * @example Read all permissions to array.\n   * ```typescript\n   * const {body: permissionList} = await user.permissions.readAll().fetchAll();\n   * ```\n   */\n\n\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n  /**\n   * Create a permission.\n   *\n   * A permission represents a per-User Permission to access a specific resource\n   * e.g. Item or Container.\n   * @param body Represents the body of the permission.\n   */\n\n\n  create(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n      const response = yield this.clientContext.create({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(response.result, response.headers, response.code, ref);\n    });\n  }\n  /**\n   * Upsert a permission.\n   *\n   * A permission represents a per-User Permission to access a\n   * specific resource e.g. Item or Container.\n   */\n\n\n  upsert(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n      const response = yield this.clientContext.upsert({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(response.result, response.headers, response.code, ref);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Permission/Permissions.ts"],"names":[],"mappings":";AAGA,SAAS,aAAT,EAAwB,eAAxB,EAAyC,eAAzC,EAA0D,YAA1D,QAA8E,cAA9E;AAEA,SAAS,aAAT,QAA8B,qBAA9B;AAIA,SAAS,UAAT,QAA2B,cAA3B;AAGA,SAAS,kBAAT,QAAmC,sBAAnC;AAEA;;;;;;AAKA,OAAM,MAAO,WAAP,CAAkB;AACtB;;;;AAIA,EAAA,WAAA,CAA4B,IAA5B,EAAyD,aAAzD,EAAqF;AAAzD,SAAA,IAAA,GAAA,IAAA;AAA6B,SAAA,aAAA,GAAA,aAAA;AAAgC;;AAclF,EAAA,KAAK,CAAI,KAAJ,EAAyB,OAAzB,EAA8C;AACxD,UAAM,IAAI,GAAG,eAAe,CAAC,KAAK,IAAL,CAAU,GAAX,EAAgB,YAAY,CAAC,UAA7B,CAA5B;AACA,UAAM,EAAE,GAAG,aAAa,CAAC,KAAK,IAAL,CAAU,GAAX,CAAxB;AAEA,WAAO,IAAI,aAAJ,CAAkB,KAAK,aAAvB,EAAsC,KAAtC,EAA6C,OAA7C,EAAuD,YAAD,IAAiB;AAC5E,aAAO,KAAK,aAAL,CAAmB,SAAnB,CAA6B;AAClC,QAAA,IADkC;AAElC,QAAA,YAAY,EAAE,YAAY,CAAC,UAFO;AAGlC,QAAA,UAAU,EAAE,EAHsB;AAIlC,QAAA,QAAQ,EAAG,MAAD,IAAY,MAAM,CAAC,WAJK;AAKlC,QAAA,KALkC;AAMlC,QAAA,OAAO,EAAE;AANyB,OAA7B,CAAP;AAQD,KATM,CAAP;AAUD;AAED;;;;;;;;;;AAQO,EAAA,OAAO,CAAC,OAAD,EAAsB;AAClC,WAAO,KAAK,KAAL,CAAW,SAAX,EAAsB,OAAtB,CAAP;AACD;AAED;;;;;;;;;AAOa,EAAA,MAAM,CACjB,IADiB,EAEjB,OAFiB,EAEO;;AAExB,YAAM,GAAG,GAAG,EAAZ;;AACA,UAAI,CAAC,eAAe,CAAC,IAAD,EAAO,GAAP,CAApB,EAAiC;AAC/B,cAAM,GAAN;AACD;;AAED,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,IAAL,CAAU,GAAX,EAAgB,YAAY,CAAC,UAA7B,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,IAAL,CAAU,GAAX,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,MAAnB,CAAgE;AACrF,QAAA,IADqF;AAErF,QAAA,IAFqF;AAGrF,QAAA,YAAY,EAAE,YAAY,CAAC,UAH0D;AAIrF,QAAA,UAAU,EAAE,EAJyE;AAKrF,QAAA;AALqF,OAAhE,CAAvB;AAOA,YAAM,GAAG,GAAG,IAAI,UAAJ,CAAe,KAAK,IAApB,EAA0B,QAAQ,CAAC,MAAT,CAAgB,EAA1C,EAA8C,KAAK,aAAnD,CAAZ;AACA,aAAO,IAAI,kBAAJ,CAAuB,QAAQ,CAAC,MAAhC,EAAwC,QAAQ,CAAC,OAAjD,EAA0D,QAAQ,CAAC,IAAnE,EAAyE,GAAzE,CAAP;AACD,K;AAAA;AAED;;;;;;;;AAMa,EAAA,MAAM,CACjB,IADiB,EAEjB,OAFiB,EAEO;;AAExB,YAAM,GAAG,GAAG,EAAZ;;AACA,UAAI,CAAC,eAAe,CAAC,IAAD,EAAO,GAAP,CAApB,EAAiC;AAC/B,cAAM,GAAN;AACD;;AAED,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,IAAL,CAAU,GAAX,EAAgB,YAAY,CAAC,UAA7B,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,IAAL,CAAU,GAAX,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,MAAnB,CAAgE;AACrF,QAAA,IADqF;AAErF,QAAA,IAFqF;AAGrF,QAAA,YAAY,EAAE,YAAY,CAAC,UAH0D;AAIrF,QAAA,UAAU,EAAE,EAJyE;AAKrF,QAAA;AALqF,OAAhE,CAAvB;AAOA,YAAM,GAAG,GAAG,IAAI,UAAJ,CAAe,KAAK,IAApB,EAA0B,QAAQ,CAAC,MAAT,CAAgB,EAA1C,EAA8C,KAAK,aAAnD,CAAZ;AACA,aAAO,IAAI,kBAAJ,CAAuB,QAAQ,CAAC,MAAhC,EAAwC,QAAQ,CAAC,OAAjD,EAA0D,QAAQ,CAAC,IAAnE,EAAyE,GAAzE,CAAP;AACD,K;AAAA;;AAxGqB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { User } from \"../User\";\nimport { Permission } from \"./Permission\";\nimport { PermissionBody } from \"./PermissionBody\";\nimport { PermissionDefinition } from \"./PermissionDefinition\";\nimport { PermissionResponse } from \"./PermissionResponse\";\n\n/**\n * Use to create, replace, query, and read all Permissions.\n *\n * @see {@link Permission} to read, replace, or delete a specific permission by id.\n */\nexport class Permissions {\n  /**\n   * @hidden\n   * @param user The parent {@link User}.\n   */\n  constructor(public readonly user: User, private readonly clientContext: ClientContext) {}\n\n  /**\n   * Query all permissions.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all permissions.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    return new QueryIterator(this.clientContext, query, options, (innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        resultFn: (result) => result.Permissions,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n\n  /**\n   * Read all permissions.\n   * @param options\n   * @example Read all permissions to array.\n   * ```typescript\n   * const {body: permissionList} = await user.permissions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<PermissionDefinition & Resource> {\n    return this.query(undefined, options);\n  }\n\n  /**\n   * Create a permission.\n   *\n   * A permission represents a per-User Permission to access a specific resource\n   * e.g. Item or Container.\n   * @param body Represents the body of the permission.\n   */\n  public async create(\n    body: PermissionDefinition,\n    options?: RequestOptions\n  ): Promise<PermissionResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    const response = await this.clientContext.create<PermissionDefinition, PermissionBody>({\n      body,\n      path,\n      resourceType: ResourceType.permission,\n      resourceId: id,\n      options\n    });\n    const ref = new Permission(this.user, response.result.id, this.clientContext);\n    return new PermissionResponse(response.result, response.headers, response.code, ref);\n  }\n\n  /**\n   * Upsert a permission.\n   *\n   * A permission represents a per-User Permission to access a\n   * specific resource e.g. Item or Container.\n   */\n  public async upsert(\n    body: PermissionDefinition,\n    options?: RequestOptions\n  ): Promise<PermissionResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    const response = await this.clientContext.upsert<PermissionDefinition, PermissionBody>({\n      body,\n      path,\n      resourceType: ResourceType.permission,\n      resourceId: id,\n      options\n    });\n    const ref = new Permission(this.user, response.result.id, this.clientContext);\n    return new PermissionResponse(response.result, response.headers, response.code, ref);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}