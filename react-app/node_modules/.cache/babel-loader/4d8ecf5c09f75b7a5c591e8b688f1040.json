{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { UserDefinedFunction } from \"./UserDefinedFunction\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\n/**\n * Used to create, upsert, query, or read all User Defined Functions.\n *\n * @see {@link UserDefinedFunction} to read, replace, or delete a given User Defined Function by id.\n */\n\nexport class UserDefinedFunctions {\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   */\n  constructor(container, clientContext) {\n    this.container = container;\n    this.clientContext = clientContext;\n  }\n\n  query(query, options) {\n    const path = getPathFromLink(this.container.url, ResourceType.udf);\n    const id = getIdFromLink(this.container.url);\n    return new QueryIterator(this.clientContext, query, options, innerOptions => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        resultFn: result => result.UserDefinedFunctions,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n  /**\n   * Read all User Defined Functions.\n   * @param options\n   * @example Read all User Defined Functions to array.\n   * ```typescript\n   * const {body: udfList} = await container.userDefinedFunctions.readAll().fetchAll();\n   * ```\n   */\n\n\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n  /**\n   * Create a UserDefinedFunction.\n   *\n   * Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers.\n   *\n   * For additional details, refer to the server-side JavaScript API documentation.\n   *\n   */\n\n\n  create(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.udf);\n      const id = getIdFromLink(this.container.url);\n      const response = yield this.clientContext.create({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options\n      });\n      const ref = new UserDefinedFunction(this.container, response.result.id, this.clientContext);\n      return new UserDefinedFunctionResponse(response.result, response.headers, response.code, ref);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/UserDefinedFunction/UserDefinedFunctions.ts"],"names":[],"mappings":";AAGA,SAAS,aAAT,EAAwB,eAAxB,EAAyC,eAAzC,EAA0D,YAA1D,QAA8E,cAA9E;AAEA,SAAS,aAAT,QAA8B,qBAA9B;AAIA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,SAAS,2BAAT,QAA4C,+BAA5C;AAEA;;;;;;AAKA,OAAM,MAAO,oBAAP,CAA2B;AAC/B;;;;AAIA,EAAA,WAAA,CACkB,SADlB,EAEmB,aAFnB,EAE+C;AAD7B,SAAA,SAAA,GAAA,SAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;;AAcG,EAAA,KAAK,CAAI,KAAJ,EAAyB,OAAzB,EAA8C;AACxD,UAAM,IAAI,GAAG,eAAe,CAAC,KAAK,SAAL,CAAe,GAAhB,EAAqB,YAAY,CAAC,GAAlC,CAA5B;AACA,UAAM,EAAE,GAAG,aAAa,CAAC,KAAK,SAAL,CAAe,GAAhB,CAAxB;AAEA,WAAO,IAAI,aAAJ,CAAkB,KAAK,aAAvB,EAAsC,KAAtC,EAA6C,OAA7C,EAAuD,YAAD,IAAiB;AAC5E,aAAO,KAAK,aAAL,CAAmB,SAAnB,CAA6B;AAClC,QAAA,IADkC;AAElC,QAAA,YAAY,EAAE,YAAY,CAAC,GAFO;AAGlC,QAAA,UAAU,EAAE,EAHsB;AAIlC,QAAA,QAAQ,EAAG,MAAD,IAAY,MAAM,CAAC,oBAJK;AAKlC,QAAA,KALkC;AAMlC,QAAA,OAAO,EAAE;AANyB,OAA7B,CAAP;AAQD,KATM,CAAP;AAUD;AAED;;;;;;;;;;AAQO,EAAA,OAAO,CAAC,OAAD,EAAsB;AAClC,WAAO,KAAK,KAAL,CAAqD,SAArD,EAAgE,OAAhE,CAAP;AACD;AAED;;;;;;;;;;AAQa,EAAA,MAAM,CACjB,IADiB,EAEjB,OAFiB,EAEO;;AAExB,UAAI,IAAI,CAAC,IAAT,EAAe;AACb,QAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAL,CAAU,QAAV,EAAZ;AACD;;AAED,YAAM,GAAG,GAAG,EAAZ;;AACA,UAAI,CAAC,eAAe,CAAC,IAAD,EAAO,GAAP,CAApB,EAAiC;AAC/B,cAAM,GAAN;AACD;;AAED,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,SAAL,CAAe,GAAhB,EAAqB,YAAY,CAAC,GAAlC,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,SAAL,CAAe,GAAhB,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,MAAnB,CAAyD;AAC9E,QAAA,IAD8E;AAE9E,QAAA,IAF8E;AAG9E,QAAA,YAAY,EAAE,YAAY,CAAC,GAHmD;AAI9E,QAAA,UAAU,EAAE,EAJkE;AAK9E,QAAA;AAL8E,OAAzD,CAAvB;AAOA,YAAM,GAAG,GAAG,IAAI,mBAAJ,CAAwB,KAAK,SAA7B,EAAwC,QAAQ,CAAC,MAAT,CAAgB,EAAxD,EAA4D,KAAK,aAAjE,CAAZ;AACA,aAAO,IAAI,2BAAJ,CAAgC,QAAQ,CAAC,MAAzC,EAAiD,QAAQ,CAAC,OAA1D,EAAmE,QAAQ,CAAC,IAA5E,EAAkF,GAAlF,CAAP;AACD,K;AAAA;;AAnF8B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { Resource } from \"../Resource\";\nimport { UserDefinedFunction } from \"./UserDefinedFunction\";\nimport { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\n\n/**\n * Used to create, upsert, query, or read all User Defined Functions.\n *\n * @see {@link UserDefinedFunction} to read, replace, or delete a given User Defined Function by id.\n */\nexport class UserDefinedFunctions {\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Query all User Defined Functions.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all User Defined Functions.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.udf);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        resultFn: (result) => result.UserDefinedFunctions,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n\n  /**\n   * Read all User Defined Functions.\n   * @param options\n   * @example Read all User Defined Functions to array.\n   * ```typescript\n   * const {body: udfList} = await container.userDefinedFunctions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<UserDefinedFunctionDefinition & Resource> {\n    return this.query<UserDefinedFunctionDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a UserDefinedFunction.\n   *\n   * Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers.\n   *\n   * For additional details, refer to the server-side JavaScript API documentation.\n   *\n   */\n  public async create(\n    body: UserDefinedFunctionDefinition,\n    options?: RequestOptions\n  ): Promise<UserDefinedFunctionResponse> {\n    if (body.body) {\n      body.body = body.body.toString();\n    }\n\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.container.url, ResourceType.udf);\n    const id = getIdFromLink(this.container.url);\n\n    const response = await this.clientContext.create<UserDefinedFunctionDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.udf,\n      resourceId: id,\n      options\n    });\n    const ref = new UserDefinedFunction(this.container, response.result.id, this.clientContext);\n    return new UserDefinedFunctionResponse(response.result, response.headers, response.code, ref);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}