{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createTriggerUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { TriggerResponse } from \"./TriggerResponse\";\n/**\n * Operations to read, replace, or delete a {@link Trigger}.\n *\n * Use `container.triggers` to create, upsert, query, or read all.\n */\n\nexport class Trigger {\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link Trigger}.\n   */\n  constructor(container, id, clientContext) {\n    this.container = container;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n\n\n  get url() {\n    return createTriggerUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Read the {@link TriggerDefinition} for the given {@link Trigger}.\n   * @param options\n   */\n\n\n  read(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.read({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options\n      });\n      return new TriggerResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Replace the given {@link Trigger} with the specified {@link TriggerDefinition}.\n   * @param body The specified {@link TriggerDefinition} to replace the existing definition with.\n   * @param options\n   */\n\n\n  replace(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options\n      });\n      return new TriggerResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Delete the given {@link Trigger}.\n   * @param options\n   */\n\n\n  delete(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.delete({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options\n      });\n      return new TriggerResponse(response.result, response.headers, response.code, this);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/Trigger/Trigger.ts"],"names":[],"mappings":";AAGA,SACE,gBADF,EAEE,aAFF,EAGE,eAHF,EAIE,eAJF,EAKE,YALF,QAMO,cANP;AAUA,SAAS,eAAT,QAAgC,mBAAhC;AAEA;;;;;;AAKA,OAAM,MAAO,OAAP,CAAc;AAQlB;;;;;AAKA,EAAA,WAAA,CACkB,SADlB,EAEkB,EAFlB,EAGmB,aAHnB,EAG+C;AAF7B,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,EAAA,GAAA,EAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;AAhBJ;;;;;AAGA,MAAW,GAAX,GAAc;AACZ,WAAO,gBAAgB,CAAC,KAAK,SAAL,CAAe,QAAf,CAAwB,EAAzB,EAA6B,KAAK,SAAL,CAAe,EAA5C,EAAgD,KAAK,EAArD,CAAvB;AACD;AAaD;;;;;;AAIa,EAAA,IAAI,CAAC,OAAD,EAAyB;;AACxC,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,IAAnB,CAA2C;AAChE,QAAA,IADgE;AAEhE,QAAA,YAAY,EAAE,YAAY,CAAC,OAFqC;AAGhE,QAAA,UAAU,EAAE,EAHoD;AAIhE,QAAA;AAJgE,OAA3C,CAAvB;AAMA,aAAO,IAAI,eAAJ,CAAoB,QAAQ,CAAC,MAA7B,EAAqC,QAAQ,CAAC,OAA9C,EAAuD,QAAQ,CAAC,IAAhE,EAAsE,IAAtE,CAAP;AACD,K;AAAA;AAED;;;;;;;AAKa,EAAA,OAAO,CAClB,IADkB,EAElB,OAFkB,EAEM;;AAExB,UAAI,IAAI,CAAC,IAAT,EAAe;AACb,QAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAL,CAAU,QAAV,EAAZ;AACD;;AAED,YAAM,GAAG,GAAG,EAAZ;;AACA,UAAI,CAAC,eAAe,CAAC,IAAD,EAAO,GAAP,CAApB,EAAiC;AAC/B,cAAM,GAAN;AACD;;AAED,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,OAAnB,CAA8C;AACnE,QAAA,IADmE;AAEnE,QAAA,IAFmE;AAGnE,QAAA,YAAY,EAAE,YAAY,CAAC,OAHwC;AAInE,QAAA,UAAU,EAAE,EAJuD;AAKnE,QAAA;AALmE,OAA9C,CAAvB;AAOA,aAAO,IAAI,eAAJ,CAAoB,QAAQ,CAAC,MAA7B,EAAqC,QAAQ,CAAC,OAA9C,EAAuD,QAAQ,CAAC,IAAhE,EAAsE,IAAtE,CAAP;AACD,K;AAAA;AAED;;;;;;AAIa,EAAA,MAAM,CAAC,OAAD,EAAyB;;AAC1C,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,MAAnB,CAA6C;AAClE,QAAA,IADkE;AAElE,QAAA,YAAY,EAAE,YAAY,CAAC,OAFuC;AAGlE,QAAA,UAAU,EAAE,EAHsD;AAIlE,QAAA;AAJkE,OAA7C,CAAvB;AAMA,aAAO,IAAI,eAAJ,CAAoB,QAAQ,CAAC,MAA7B,EAAqC,QAAQ,CAAC,OAA9C,EAAuD,QAAQ,CAAC,IAAhE,EAAsE,IAAtE,CAAP;AACD,K;AAAA;;AAlFiB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  createTriggerUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType\n} from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { TriggerDefinition } from \"./TriggerDefinition\";\nimport { TriggerResponse } from \"./TriggerResponse\";\n\n/**\n * Operations to read, replace, or delete a {@link Trigger}.\n *\n * Use `container.triggers` to create, upsert, query, or read all.\n */\nexport class Trigger {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return createTriggerUri(this.container.database.id, this.container.id, this.id);\n  }\n\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link Trigger}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link TriggerDefinition} for the given {@link Trigger}.\n   * @param options\n   */\n  public async read(options?: RequestOptions): Promise<TriggerResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.read<TriggerDefinition>({\n      path,\n      resourceType: ResourceType.trigger,\n      resourceId: id,\n      options\n    });\n    return new TriggerResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Replace the given {@link Trigger} with the specified {@link TriggerDefinition}.\n   * @param body The specified {@link TriggerDefinition} to replace the existing definition with.\n   * @param options\n   */\n  public async replace(\n    body: TriggerDefinition,\n    options?: RequestOptions\n  ): Promise<TriggerResponse> {\n    if (body.body) {\n      body.body = body.body.toString();\n    }\n\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.replace<TriggerDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.trigger,\n      resourceId: id,\n      options\n    });\n    return new TriggerResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Delete the given {@link Trigger}.\n   * @param options\n   */\n  public async delete(options?: RequestOptions): Promise<TriggerResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete<TriggerDefinition>({\n      path,\n      resourceType: ResourceType.trigger,\n      resourceId: id,\n      options\n    });\n    return new TriggerResponse(response.result, response.headers, response.code, this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}