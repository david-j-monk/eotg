{"ast":null,"code":"import { __awaiter } from \"tslib\"; // Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { setAuthorizationHeader } from \"../auth\";\nimport { Constants, HTTPMethod, jsonStringifyAndEscapeNonASCII } from \"../common\"; // ----------------------------------------------------------------------------\n// Utility methods\n//\n\n/** @hidden */\n\nfunction javaScriptFriendlyJSONStringify(s) {\n  // two line terminators (Line separator and Paragraph separator) are not needed to be escaped in JSON\n  // but are needed to be escaped in JavaScript.\n  return JSON.stringify(s).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\");\n}\n/** @hidden */\n\n\nexport function bodyFromData(data) {\n  if (typeof data === \"object\") {\n    return javaScriptFriendlyJSONStringify(data);\n  }\n\n  return data;\n}\nconst JsonContentType = \"application/json\";\n/**\n * @ignore\n * @param param0\n */\n\nexport function getHeaders({\n  clientOptions,\n  defaultHeaders,\n  verb,\n  path,\n  resourceId,\n  resourceType,\n  options = {},\n  partitionKeyRangeId,\n  useMultipleWriteLocations,\n  partitionKey\n}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const headers = Object.assign({\n      [Constants.HttpHeaders.ResponseContinuationTokenLimitInKB]: 1,\n      [Constants.HttpHeaders.EnableCrossPartitionQuery]: true\n    }, defaultHeaders);\n\n    if (useMultipleWriteLocations) {\n      headers[Constants.HttpHeaders.ALLOW_MULTIPLE_WRITES] = true;\n    }\n\n    if (options.continuationTokenLimitInKB) {\n      headers[Constants.HttpHeaders.ResponseContinuationTokenLimitInKB] = options.continuationTokenLimitInKB;\n    }\n\n    if (options.continuationToken) {\n      headers[Constants.HttpHeaders.Continuation] = options.continuationToken;\n    } else if (options.continuation) {\n      headers[Constants.HttpHeaders.Continuation] = options.continuation;\n    }\n\n    if (options.preTriggerInclude) {\n      headers[Constants.HttpHeaders.PreTriggerInclude] = options.preTriggerInclude.constructor === Array ? options.preTriggerInclude.join(\",\") : options.preTriggerInclude;\n    }\n\n    if (options.postTriggerInclude) {\n      headers[Constants.HttpHeaders.PostTriggerInclude] = options.postTriggerInclude.constructor === Array ? options.postTriggerInclude.join(\",\") : options.postTriggerInclude;\n    }\n\n    if (options.offerType) {\n      headers[Constants.HttpHeaders.OfferType] = options.offerType;\n    }\n\n    if (options.offerThroughput) {\n      headers[Constants.HttpHeaders.OfferThroughput] = options.offerThroughput;\n    }\n\n    if (options.maxItemCount) {\n      headers[Constants.HttpHeaders.PageSize] = options.maxItemCount;\n    }\n\n    if (options.accessCondition) {\n      if (options.accessCondition.type === \"IfMatch\") {\n        headers[Constants.HttpHeaders.IfMatch] = options.accessCondition.condition;\n      } else {\n        headers[Constants.HttpHeaders.IfNoneMatch] = options.accessCondition.condition;\n      }\n    }\n\n    if (options.useIncrementalFeed) {\n      headers[Constants.HttpHeaders.A_IM] = \"Incremental Feed\";\n    }\n\n    if (options.indexingDirective) {\n      headers[Constants.HttpHeaders.IndexingDirective] = options.indexingDirective;\n    }\n\n    if (options.consistencyLevel) {\n      headers[Constants.HttpHeaders.ConsistencyLevel] = options.consistencyLevel;\n    }\n\n    if (options.resourceTokenExpirySeconds) {\n      headers[Constants.HttpHeaders.ResourceTokenExpiry] = options.resourceTokenExpirySeconds;\n    }\n\n    if (options.sessionToken) {\n      headers[Constants.HttpHeaders.SessionToken] = options.sessionToken;\n    }\n\n    if (options.enableScanInQuery) {\n      headers[Constants.HttpHeaders.EnableScanInQuery] = options.enableScanInQuery;\n    }\n\n    if (options.populateQuotaInfo) {\n      headers[Constants.HttpHeaders.PopulateQuotaInfo] = options.populateQuotaInfo;\n    }\n\n    if (options.populateQueryMetrics) {\n      headers[Constants.HttpHeaders.PopulateQueryMetrics] = options.populateQueryMetrics;\n    }\n\n    if (options.maxDegreeOfParallelism !== undefined) {\n      headers[Constants.HttpHeaders.ParallelizeCrossPartitionQuery] = true;\n    }\n\n    if (options.populateQuotaInfo) {\n      headers[Constants.HttpHeaders.PopulateQuotaInfo] = true;\n    }\n\n    if (partitionKey !== undefined && !headers[Constants.HttpHeaders.PartitionKey]) {\n      if (partitionKey === null || !Array.isArray(partitionKey)) {\n        partitionKey = [partitionKey];\n      }\n\n      headers[Constants.HttpHeaders.PartitionKey] = jsonStringifyAndEscapeNonASCII(partitionKey);\n    }\n\n    if (clientOptions.key || clientOptions.tokenProvider) {\n      headers[Constants.HttpHeaders.XDate] = new Date().toUTCString();\n    }\n\n    if (verb === HTTPMethod.post || verb === HTTPMethod.put) {\n      if (!headers[Constants.HttpHeaders.ContentType]) {\n        headers[Constants.HttpHeaders.ContentType] = JsonContentType;\n      }\n    }\n\n    if (!headers[Constants.HttpHeaders.Accept]) {\n      headers[Constants.HttpHeaders.Accept] = JsonContentType;\n    }\n\n    if (partitionKeyRangeId !== undefined) {\n      headers[Constants.HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;\n    }\n\n    if (options.enableScriptLogging) {\n      headers[Constants.HttpHeaders.EnableScriptLogging] = options.enableScriptLogging;\n    }\n\n    if (options.disableRUPerMinuteUsage) {\n      headers[Constants.HttpHeaders.DisableRUPerMinuteUsage] = true;\n    }\n\n    if (clientOptions.key || clientOptions.resourceTokens || clientOptions.tokenProvider || clientOptions.permissionFeed) {\n      yield setAuthorizationHeader(clientOptions, verb, path, resourceId, resourceType, headers);\n    }\n\n    return headers;\n  });\n}","map":{"version":3,"sources":["../../src/request/request.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { setAuthorizationHeader } from \"../auth\";\nimport { Constants, HTTPMethod, jsonStringifyAndEscapeNonASCII, ResourceType } from \"../common\";\nimport { CosmosClientOptions } from \"../CosmosClientOptions\";\nimport { PartitionKey } from \"../documents\";\nimport { CosmosHeaders } from \"../queryExecutionContext\";\nimport { FeedOptions, RequestOptions } from \"./index\";\n\n// ----------------------------------------------------------------------------\n// Utility methods\n//\n\n/** @hidden */\nfunction javaScriptFriendlyJSONStringify(s: object) {\n  // two line terminators (Line separator and Paragraph separator) are not needed to be escaped in JSON\n  // but are needed to be escaped in JavaScript.\n  return JSON.stringify(s)\n    .replace(/\\u2028/g, \"\\\\u2028\")\n    .replace(/\\u2029/g, \"\\\\u2029\");\n}\n\n/** @hidden */\nexport function bodyFromData(data: Buffer | string | object) {\n  if (typeof data === \"object\") {\n    return javaScriptFriendlyJSONStringify(data);\n  }\n  return data;\n}\n\n/**\n * @ignore\n */\ninterface GetHeadersOptions {\n  clientOptions: CosmosClientOptions;\n  defaultHeaders: CosmosHeaders;\n  verb: HTTPMethod;\n  path: string;\n  resourceId: string;\n  resourceType: ResourceType;\n  options: RequestOptions & FeedOptions;\n  partitionKeyRangeId?: string;\n  useMultipleWriteLocations?: boolean;\n  partitionKey?: PartitionKey;\n}\n\nconst JsonContentType = \"application/json\";\n\n/**\n * @ignore\n * @param param0\n */\nexport async function getHeaders({\n  clientOptions,\n  defaultHeaders,\n  verb,\n  path,\n  resourceId,\n  resourceType,\n  options = {},\n  partitionKeyRangeId,\n  useMultipleWriteLocations,\n  partitionKey\n}: GetHeadersOptions): Promise<CosmosHeaders> {\n  const headers: CosmosHeaders = {\n    [Constants.HttpHeaders.ResponseContinuationTokenLimitInKB]: 1,\n    [Constants.HttpHeaders.EnableCrossPartitionQuery]: true,\n    ...defaultHeaders\n  };\n\n  if (useMultipleWriteLocations) {\n    headers[Constants.HttpHeaders.ALLOW_MULTIPLE_WRITES] = true;\n  }\n\n  if (options.continuationTokenLimitInKB) {\n    headers[Constants.HttpHeaders.ResponseContinuationTokenLimitInKB] =\n      options.continuationTokenLimitInKB;\n  }\n  if (options.continuationToken) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuationToken;\n  } else if (options.continuation) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuation;\n  }\n\n  if (options.preTriggerInclude) {\n    headers[Constants.HttpHeaders.PreTriggerInclude] =\n      options.preTriggerInclude.constructor === Array\n        ? (options.preTriggerInclude as string[]).join(\",\")\n        : (options.preTriggerInclude as string);\n  }\n\n  if (options.postTriggerInclude) {\n    headers[Constants.HttpHeaders.PostTriggerInclude] =\n      options.postTriggerInclude.constructor === Array\n        ? (options.postTriggerInclude as string[]).join(\",\")\n        : (options.postTriggerInclude as string);\n  }\n\n  if (options.offerType) {\n    headers[Constants.HttpHeaders.OfferType] = options.offerType;\n  }\n\n  if (options.offerThroughput) {\n    headers[Constants.HttpHeaders.OfferThroughput] = options.offerThroughput;\n  }\n\n  if (options.maxItemCount) {\n    headers[Constants.HttpHeaders.PageSize] = options.maxItemCount;\n  }\n\n  if (options.accessCondition) {\n    if (options.accessCondition.type === \"IfMatch\") {\n      headers[Constants.HttpHeaders.IfMatch] = options.accessCondition.condition;\n    } else {\n      headers[Constants.HttpHeaders.IfNoneMatch] = options.accessCondition.condition;\n    }\n  }\n\n  if (options.useIncrementalFeed) {\n    headers[Constants.HttpHeaders.A_IM] = \"Incremental Feed\";\n  }\n\n  if (options.indexingDirective) {\n    headers[Constants.HttpHeaders.IndexingDirective] = options.indexingDirective;\n  }\n\n  if (options.consistencyLevel) {\n    headers[Constants.HttpHeaders.ConsistencyLevel] = options.consistencyLevel;\n  }\n\n  if (options.resourceTokenExpirySeconds) {\n    headers[Constants.HttpHeaders.ResourceTokenExpiry] = options.resourceTokenExpirySeconds;\n  }\n\n  if (options.sessionToken) {\n    headers[Constants.HttpHeaders.SessionToken] = options.sessionToken;\n  }\n\n  if (options.enableScanInQuery) {\n    headers[Constants.HttpHeaders.EnableScanInQuery] = options.enableScanInQuery;\n  }\n\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = options.populateQuotaInfo;\n  }\n\n  if (options.populateQueryMetrics) {\n    headers[Constants.HttpHeaders.PopulateQueryMetrics] = options.populateQueryMetrics;\n  }\n\n  if (options.maxDegreeOfParallelism !== undefined) {\n    headers[Constants.HttpHeaders.ParallelizeCrossPartitionQuery] = true;\n  }\n\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = true;\n  }\n\n  if (partitionKey !== undefined && !headers[Constants.HttpHeaders.PartitionKey]) {\n    if (partitionKey === null || !Array.isArray(partitionKey)) {\n      partitionKey = [partitionKey as string];\n    }\n    headers[Constants.HttpHeaders.PartitionKey] = jsonStringifyAndEscapeNonASCII(partitionKey);\n  }\n\n  if (clientOptions.key || clientOptions.tokenProvider) {\n    headers[Constants.HttpHeaders.XDate] = new Date().toUTCString();\n  }\n\n  if (verb === HTTPMethod.post || verb === HTTPMethod.put) {\n    if (!headers[Constants.HttpHeaders.ContentType]) {\n      headers[Constants.HttpHeaders.ContentType] = JsonContentType;\n    }\n  }\n\n  if (!headers[Constants.HttpHeaders.Accept]) {\n    headers[Constants.HttpHeaders.Accept] = JsonContentType;\n  }\n\n  if (partitionKeyRangeId !== undefined) {\n    headers[Constants.HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;\n  }\n\n  if (options.enableScriptLogging) {\n    headers[Constants.HttpHeaders.EnableScriptLogging] = options.enableScriptLogging;\n  }\n\n  if (options.disableRUPerMinuteUsage) {\n    headers[Constants.HttpHeaders.DisableRUPerMinuteUsage] = true;\n  }\n  if (\n    clientOptions.key ||\n    clientOptions.resourceTokens ||\n    clientOptions.tokenProvider ||\n    clientOptions.permissionFeed\n  ) {\n    await setAuthorizationHeader(clientOptions, verb, path, resourceId, resourceType, headers);\n  }\n  return headers;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}