{"ast":null,"code":"import { OperationType } from \"./constants\";\nconst trimLeftSlashes = new RegExp(\"^[/]+\");\nconst trimRightSlashes = new RegExp(\"[/]+$\");\nconst illegalResourceIdCharacters = new RegExp(\"[/\\\\\\\\?#]\");\n/** @hidden */\n\nexport function jsonStringifyAndEscapeNonASCII(arg) {\n  // TODO: better way for this? Not sure.\n  // escapes non-ASCII characters as \\uXXXX\n  return JSON.stringify(arg).replace(/[\\u007F-\\uFFFF]/g, m => {\n    return \"\\\\u\" + (\"0000\" + m.charCodeAt(0).toString(16)).slice(-4);\n  });\n}\n/**\n * @ignore\n */\n\nexport function parseLink(resourcePath) {\n  if (resourcePath.length === 0) {\n    /* for DatabaseAccount case, both type and objectBody will be undefined. */\n    return {\n      type: undefined,\n      objectBody: undefined\n    };\n  }\n\n  if (resourcePath[resourcePath.length - 1] !== \"/\") {\n    resourcePath = resourcePath + \"/\";\n  }\n\n  if (resourcePath[0] !== \"/\") {\n    resourcePath = \"/\" + resourcePath;\n  }\n  /*\n         The path will be in the form of /[resourceType]/[resourceId]/ ....\n         /[resourceType]//[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/\n         or /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/[resourceType]/[resourceId]/ ....\n          /[resourceType]/[resourceId]/\n         The result of split will be in the form of\n         [[[resourceType], [resourceId] ... ,[resourceType], [resourceId], \"\"]\n         In the first case, to extract the resourceId it will the element before last ( at length -2 )\n         and the type will be before it ( at length -3 )\n         In the second case, to extract the resource type it will the element before last ( at length -2 )\n        */\n\n\n  const pathParts = resourcePath.split(\"/\");\n  let id;\n  let type;\n\n  if (pathParts.length % 2 === 0) {\n    // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId].\n    id = pathParts[pathParts.length - 2];\n    type = pathParts[pathParts.length - 3];\n  } else {\n    // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/.\n    id = pathParts[pathParts.length - 3];\n    type = pathParts[pathParts.length - 2];\n  }\n\n  const result = {\n    type,\n    objectBody: {\n      id,\n      self: resourcePath\n    }\n  };\n  return result;\n}\n/**\n * @ignore\n */\n\nexport function isReadRequest(operationType) {\n  return operationType === OperationType.Read || operationType === OperationType.Query;\n}\n/**\n * @ignore\n */\n\nexport function sleep(time) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n/**\n * @ignore\n */\n\nexport function getContainerLink(link) {\n  return link.split(\"/\").slice(0, 4).join(\"/\");\n}\n/**\n * @ignore\n */\n\nexport function trimSlashes(source) {\n  return source.replace(trimLeftSlashes, \"\").replace(trimRightSlashes, \"\");\n}\n/**\n * @ignore\n */\n\nexport function getHexaDigit() {\n  return Math.floor(Math.random() * 16).toString(16);\n}\n/**\n * @ignore\n */\n\nexport function parsePath(path) {\n  const pathParts = [];\n  let currentIndex = 0;\n\n  const throwError = () => {\n    throw new Error(\"Path \" + path + \" is invalid at index \" + currentIndex);\n  };\n\n  const getEscapedToken = () => {\n    const quote = path[currentIndex];\n    let newIndex = ++currentIndex;\n\n    while (true) {\n      newIndex = path.indexOf(quote, newIndex);\n\n      if (newIndex === -1) {\n        throwError();\n      }\n\n      if (path[newIndex - 1] !== \"\\\\\") {\n        break;\n      }\n\n      ++newIndex;\n    }\n\n    const token = path.substr(currentIndex, newIndex - currentIndex);\n    currentIndex = newIndex + 1;\n    return token;\n  };\n\n  const getToken = () => {\n    const newIndex = path.indexOf(\"/\", currentIndex);\n    let token = null;\n\n    if (newIndex === -1) {\n      token = path.substr(currentIndex);\n      currentIndex = path.length;\n    } else {\n      token = path.substr(currentIndex, newIndex - currentIndex);\n      currentIndex = newIndex;\n    }\n\n    token = token.trim();\n    return token;\n  };\n\n  while (currentIndex < path.length) {\n    if (path[currentIndex] !== \"/\") {\n      throwError();\n    }\n\n    if (++currentIndex === path.length) {\n      break;\n    }\n\n    if (path[currentIndex] === '\"' || path[currentIndex] === \"'\") {\n      pathParts.push(getEscapedToken());\n    } else {\n      pathParts.push(getToken());\n    }\n  }\n\n  return pathParts;\n}\n/**\n * @ignore\n */\n\nexport function isResourceValid(resource, err) {\n  // TODO: any TODO: code smell\n  if (resource.id) {\n    if (typeof resource.id !== \"string\") {\n      err.message = \"Id must be a string.\";\n      return false;\n    }\n\n    if (resource.id.indexOf(\"/\") !== -1 || resource.id.indexOf(\"\\\\\") !== -1 || resource.id.indexOf(\"?\") !== -1 || resource.id.indexOf(\"#\") !== -1) {\n      err.message = \"Id contains illegal chars.\";\n      return false;\n    }\n\n    if (resource.id[resource.id.length - 1] === \" \") {\n      err.message = \"Id ends with a space.\";\n      return false;\n    }\n  }\n\n  return true;\n}\n/** @ignore */\n\nexport function getIdFromLink(resourceLink) {\n  resourceLink = trimSlashes(resourceLink);\n  return resourceLink;\n}\n/** @ignore */\n\nexport function getPathFromLink(resourceLink, resourceType) {\n  resourceLink = trimSlashes(resourceLink);\n\n  if (resourceType) {\n    return \"/\" + encodeURI(resourceLink) + \"/\" + resourceType;\n  } else {\n    return \"/\" + encodeURI(resourceLink);\n  }\n}\n/**\n * @ignore\n */\n\nexport function isStringNullOrEmpty(inputString) {\n  // checks whether string is null, undefined, empty or only contains space\n  return !inputString || /^\\s*$/.test(inputString);\n}\n/**\n * @ignore\n */\n\nexport function trimSlashFromLeftAndRight(inputString) {\n  if (typeof inputString !== \"string\") {\n    throw new Error(\"invalid input: input is not string\");\n  }\n\n  return inputString.replace(trimLeftSlashes, \"\").replace(trimRightSlashes, \"\");\n}\n/**\n * @ignore\n */\n\nexport function validateResourceId(resourceId) {\n  // if resourceId is not a string or is empty throw an error\n  if (typeof resourceId !== \"string\" || isStringNullOrEmpty(resourceId)) {\n    throw new Error(\"Resource Id must be a string and cannot be undefined, null or empty\");\n  } // if resourceId starts or ends with space throw an error\n\n\n  if (resourceId[resourceId.length - 1] === \" \") {\n    throw new Error(\"Resource Id cannot end with space\");\n  } // if resource id contains illegal characters throw an error\n\n\n  if (illegalResourceIdCharacters.test(resourceId)) {\n    throw new Error(\"Illegal characters ['/', '\\\\', '?', '#'] cannot be used in resourceId\");\n  }\n\n  return true;\n}\n/**\n * @ignore\n * @param resourcePath\n */\n\nexport function getResourceIdFromPath(resourcePath) {\n  if (!resourcePath || typeof resourcePath !== \"string\") {\n    return null;\n  }\n\n  const trimmedPath = trimSlashFromLeftAndRight(resourcePath);\n  const pathSegments = trimmedPath.split(\"/\"); // number of segments of a path must always be even\n\n  if (pathSegments.length % 2 !== 0) {\n    return null;\n  }\n\n  return pathSegments[pathSegments.length - 1];\n}\n/**\n * @ignore\n */\n\nexport function parseConnectionString(connectionString) {\n  const keyValueStrings = connectionString.split(\";\");\n  const {\n    AccountEndpoint,\n    AccountKey\n  } = keyValueStrings.reduce((connectionObject, keyValueString) => {\n    const [key, ...value] = keyValueString.split(\"=\");\n    connectionObject[key] = value.join(\"=\");\n    return connectionObject;\n  }, {});\n\n  if (!AccountEndpoint || !AccountKey) {\n    throw new Error(\"Could not parse the provided connection string\");\n  }\n\n  return {\n    endpoint: AccountEndpoint,\n    key: AccountKey\n  };\n}\n/**\n * @ignore\n */\n// https://github.com/iliakan/detect-node/blob/master/index.js\n\nexport const isNode = Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\";","map":{"version":3,"sources":["../../src/common/helper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosClientOptions } from \"../CosmosClientOptions\";\nimport { OperationType, ResourceType } from \"./constants\";\n\nconst trimLeftSlashes = new RegExp(\"^[/]+\");\nconst trimRightSlashes = new RegExp(\"[/]+$\");\nconst illegalResourceIdCharacters = new RegExp(\"[/\\\\\\\\?#]\");\n\n/** @hidden */\nexport function jsonStringifyAndEscapeNonASCII(arg: any) {\n  // TODO: better way for this? Not sure.\n  // escapes non-ASCII characters as \\uXXXX\n  return JSON.stringify(arg).replace(/[\\u007F-\\uFFFF]/g, (m) => {\n    return \"\\\\u\" + (\"0000\" + m.charCodeAt(0).toString(16)).slice(-4);\n  });\n}\n\n/**\n * @ignore\n */\nexport function parseLink(resourcePath: string) {\n  if (resourcePath.length === 0) {\n    /* for DatabaseAccount case, both type and objectBody will be undefined. */\n    return {\n      type: undefined,\n      objectBody: undefined\n    };\n  }\n\n  if (resourcePath[resourcePath.length - 1] !== \"/\") {\n    resourcePath = resourcePath + \"/\";\n  }\n\n  if (resourcePath[0] !== \"/\") {\n    resourcePath = \"/\" + resourcePath;\n  }\n\n  /*\n         The path will be in the form of /[resourceType]/[resourceId]/ ....\n         /[resourceType]//[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/\n         or /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/[resourceType]/[resourceId]/ ....\n          /[resourceType]/[resourceId]/\n         The result of split will be in the form of\n         [[[resourceType], [resourceId] ... ,[resourceType], [resourceId], \"\"]\n         In the first case, to extract the resourceId it will the element before last ( at length -2 )\n         and the type will be before it ( at length -3 )\n         In the second case, to extract the resource type it will the element before last ( at length -2 )\n        */\n  const pathParts = resourcePath.split(\"/\");\n  let id;\n  let type: ResourceType;\n  if (pathParts.length % 2 === 0) {\n    // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId].\n    id = pathParts[pathParts.length - 2];\n    type = pathParts[pathParts.length - 3] as ResourceType;\n  } else {\n    // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/.\n    id = pathParts[pathParts.length - 3];\n    type = pathParts[pathParts.length - 2] as ResourceType;\n  }\n\n  const result = {\n    type,\n    objectBody: {\n      id,\n      self: resourcePath\n    }\n  };\n\n  return result;\n}\n\n/**\n * @ignore\n */\nexport function isReadRequest(operationType: OperationType): boolean {\n  return operationType === OperationType.Read || operationType === OperationType.Query;\n}\n\n/**\n * @ignore\n */\nexport function sleep(time: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n\n/**\n * @ignore\n */\nexport function getContainerLink(link: string) {\n  return link\n    .split(\"/\")\n    .slice(0, 4)\n    .join(\"/\");\n}\n\n/**\n * @ignore\n */\nexport function trimSlashes(source: string) {\n  return source.replace(trimLeftSlashes, \"\").replace(trimRightSlashes, \"\");\n}\n\n/**\n * @ignore\n */\nexport function getHexaDigit() {\n  return Math.floor(Math.random() * 16).toString(16);\n}\n\n/**\n * @ignore\n */\nexport function parsePath(path: string) {\n  const pathParts = [];\n  let currentIndex = 0;\n\n  const throwError = () => {\n    throw new Error(\"Path \" + path + \" is invalid at index \" + currentIndex);\n  };\n\n  const getEscapedToken = () => {\n    const quote = path[currentIndex];\n    let newIndex = ++currentIndex;\n\n    while (true) {\n      newIndex = path.indexOf(quote, newIndex);\n      if (newIndex === -1) {\n        throwError();\n      }\n\n      if (path[newIndex - 1] !== \"\\\\\") {\n        break;\n      }\n\n      ++newIndex;\n    }\n\n    const token = path.substr(currentIndex, newIndex - currentIndex);\n    currentIndex = newIndex + 1;\n    return token;\n  };\n\n  const getToken = () => {\n    const newIndex = path.indexOf(\"/\", currentIndex);\n    let token = null;\n    if (newIndex === -1) {\n      token = path.substr(currentIndex);\n      currentIndex = path.length;\n    } else {\n      token = path.substr(currentIndex, newIndex - currentIndex);\n      currentIndex = newIndex;\n    }\n\n    token = token.trim();\n    return token;\n  };\n\n  while (currentIndex < path.length) {\n    if (path[currentIndex] !== \"/\") {\n      throwError();\n    }\n\n    if (++currentIndex === path.length) {\n      break;\n    }\n\n    if (path[currentIndex] === '\"' || path[currentIndex] === \"'\") {\n      pathParts.push(getEscapedToken());\n    } else {\n      pathParts.push(getToken());\n    }\n  }\n\n  return pathParts;\n}\n\n/**\n * @ignore\n */\nexport function isResourceValid(resource: any, err: any) {\n  // TODO: any TODO: code smell\n  if (resource.id) {\n    if (typeof resource.id !== \"string\") {\n      err.message = \"Id must be a string.\";\n      return false;\n    }\n\n    if (\n      resource.id.indexOf(\"/\") !== -1 ||\n      resource.id.indexOf(\"\\\\\") !== -1 ||\n      resource.id.indexOf(\"?\") !== -1 ||\n      resource.id.indexOf(\"#\") !== -1\n    ) {\n      err.message = \"Id contains illegal chars.\";\n      return false;\n    }\n    if (resource.id[resource.id.length - 1] === \" \") {\n      err.message = \"Id ends with a space.\";\n      return false;\n    }\n  }\n  return true;\n}\n\n/** @ignore */\nexport function getIdFromLink(resourceLink: string) {\n  resourceLink = trimSlashes(resourceLink);\n  return resourceLink;\n}\n\n/** @ignore */\nexport function getPathFromLink(resourceLink: string, resourceType?: string) {\n  resourceLink = trimSlashes(resourceLink);\n  if (resourceType) {\n    return \"/\" + encodeURI(resourceLink) + \"/\" + resourceType;\n  } else {\n    return \"/\" + encodeURI(resourceLink);\n  }\n}\n\n/**\n * @ignore\n */\nexport function isStringNullOrEmpty(inputString: string) {\n  // checks whether string is null, undefined, empty or only contains space\n  return !inputString || /^\\s*$/.test(inputString);\n}\n\n/**\n * @ignore\n */\nexport function trimSlashFromLeftAndRight(inputString: string) {\n  if (typeof inputString !== \"string\") {\n    throw new Error(\"invalid input: input is not string\");\n  }\n\n  return inputString.replace(trimLeftSlashes, \"\").replace(trimRightSlashes, \"\");\n}\n\n/**\n * @ignore\n */\nexport function validateResourceId(resourceId: string) {\n  // if resourceId is not a string or is empty throw an error\n  if (typeof resourceId !== \"string\" || isStringNullOrEmpty(resourceId)) {\n    throw new Error(\"Resource Id must be a string and cannot be undefined, null or empty\");\n  }\n\n  // if resourceId starts or ends with space throw an error\n  if (resourceId[resourceId.length - 1] === \" \") {\n    throw new Error(\"Resource Id cannot end with space\");\n  }\n\n  // if resource id contains illegal characters throw an error\n  if (illegalResourceIdCharacters.test(resourceId)) {\n    throw new Error(\"Illegal characters ['/', '\\\\', '?', '#'] cannot be used in resourceId\");\n  }\n\n  return true;\n}\n\n/**\n * @ignore\n * @param resourcePath\n */\nexport function getResourceIdFromPath(resourcePath: string) {\n  if (!resourcePath || typeof resourcePath !== \"string\") {\n    return null;\n  }\n\n  const trimmedPath = trimSlashFromLeftAndRight(resourcePath);\n  const pathSegments = trimmedPath.split(\"/\");\n\n  // number of segments of a path must always be even\n  if (pathSegments.length % 2 !== 0) {\n    return null;\n  }\n\n  return pathSegments[pathSegments.length - 1];\n}\n\n/**\n * @ignore\n */\ninterface ConnectionObject {\n  AccountEndpoint: string;\n  AccountKey: string;\n}\n\n/**\n * @ignore\n */\nexport function parseConnectionString(connectionString: string): CosmosClientOptions {\n  const keyValueStrings = connectionString.split(\";\");\n  const { AccountEndpoint, AccountKey } = keyValueStrings.reduce(\n    (connectionObject, keyValueString: string) => {\n      const [key, ...value] = keyValueString.split(\"=\");\n      (connectionObject as any)[key] = value.join(\"=\");\n      return connectionObject;\n    },\n    {} as ConnectionObject\n  );\n  if (!AccountEndpoint || !AccountKey) {\n    throw new Error(\"Could not parse the provided connection string\");\n  }\n  return {\n    endpoint: AccountEndpoint,\n    key: AccountKey\n  };\n}\n\n/**\n * @ignore\n */\n// https://github.com/iliakan/detect-node/blob/master/index.js\nexport const isNode: boolean =\n  Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) ===\n  \"[object process]\";\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}