{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Represents the consistency levels supported for Azure Cosmos DB client operations.<br>\n * The requested ConsistencyLevel must match or be weaker than that provisioned for the database account.\n * Consistency levels.\n *\n * Consistency levels by order of strength are Strong, BoundedStaleness, Session, Consistent Prefix, and Eventual.\n *\n * See https://aka.ms/cosmos-consistency for more detailed documentation on Consistency Levels.\n */\nexport var ConsistencyLevel;\n\n(function (ConsistencyLevel) {\n  /**\n   * Strong Consistency guarantees that read operations always return the value that was last written.\n   */\n  ConsistencyLevel[\"Strong\"] = \"Strong\";\n  /**\n   * Bounded Staleness guarantees that reads are not too out-of-date.\n   * This can be configured based on number of operations (MaxStalenessPrefix) or time (MaxStalenessIntervalInSeconds).\n   */\n\n  ConsistencyLevel[\"BoundedStaleness\"] = \"BoundedStaleness\";\n  /**\n   * Session Consistency guarantees monotonic reads (you never read old data, then new, then old again),\n   * monotonic writes (writes are ordered) and read your writes (your writes are immediately visible to your reads)\n   * within any single session.\n   */\n\n  ConsistencyLevel[\"Session\"] = \"Session\";\n  /**\n   * Eventual Consistency guarantees that reads will return a subset of writes.\n   * All writes will be eventually be available for reads.\n   */\n\n  ConsistencyLevel[\"Eventual\"] = \"Eventual\";\n  /**\n   * ConsistentPrefix Consistency guarantees that reads will return some prefix of all writes with no gaps.\n   * All writes will be eventually be available for reads.`\n   */\n\n  ConsistencyLevel[\"ConsistentPrefix\"] = \"ConsistentPrefix\";\n})(ConsistencyLevel || (ConsistencyLevel = {}));","map":{"version":3,"sources":["../../src/documents/ConsistencyLevel.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;;;;;;;;;AASA,OAAA,IAAY,gBAAZ;;AAAA,CAAA,UAAY,gBAAZ,EAA4B;AAC1B;;;AAGA,EAAA,gBAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA;;;;;AAIA,EAAA,gBAAA,CAAA,kBAAA,CAAA,GAAA,kBAAA;AACA;;;;;;AAKA,EAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA;;;;;AAIA,EAAA,gBAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA;;;;;AAIA,EAAA,gBAAA,CAAA,kBAAA,CAAA,GAAA,kBAAA;AACD,CA1BD,EAAY,gBAAgB,KAAhB,gBAAgB,GAAA,EAAA,CAA5B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Represents the consistency levels supported for Azure Cosmos DB client operations.<br>\n * The requested ConsistencyLevel must match or be weaker than that provisioned for the database account.\n * Consistency levels.\n *\n * Consistency levels by order of strength are Strong, BoundedStaleness, Session, Consistent Prefix, and Eventual.\n *\n * See https://aka.ms/cosmos-consistency for more detailed documentation on Consistency Levels.\n */\nexport enum ConsistencyLevel {\n  /**\n   * Strong Consistency guarantees that read operations always return the value that was last written.\n   */\n  Strong = \"Strong\",\n  /**\n   * Bounded Staleness guarantees that reads are not too out-of-date.\n   * This can be configured based on number of operations (MaxStalenessPrefix) or time (MaxStalenessIntervalInSeconds).\n   */\n  BoundedStaleness = \"BoundedStaleness\",\n  /**\n   * Session Consistency guarantees monotonic reads (you never read old data, then new, then old again),\n   * monotonic writes (writes are ordered) and read your writes (your writes are immediately visible to your reads)\n   * within any single session.\n   */\n  Session = \"Session\",\n  /**\n   * Eventual Consistency guarantees that reads will return a subset of writes.\n   * All writes will be eventually be available for reads.\n   */\n  Eventual = \"Eventual\",\n  /**\n   * ConsistentPrefix Consistency guarantees that reads will return some prefix of all writes with no gaps.\n   * All writes will be eventually be available for reads.`\n   */\n  ConsistentPrefix = \"ConsistentPrefix\"\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}