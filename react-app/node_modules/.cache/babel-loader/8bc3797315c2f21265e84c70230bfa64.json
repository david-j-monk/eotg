{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientSideMetrics } from \"./clientSideMetrics\";\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { QueryPreparationTimes } from \"./queryPreparationTime\";\nimport { RuntimeExecutionTimes } from \"./runtimeExecutionTimes\";\nimport { TimeSpan } from \"./timeSpan\";\nexport class QueryMetrics {\n  constructor(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitDocumentCount, totalQueryExecutionTime, queryPreparationTimes, indexLookupTime, documentLoadTime, vmExecutionTime, runtimeExecutionTimes, documentWriteTime, clientSideMetrics) {\n    this.retrievedDocumentCount = retrievedDocumentCount;\n    this.retrievedDocumentSize = retrievedDocumentSize;\n    this.outputDocumentCount = outputDocumentCount;\n    this.outputDocumentSize = outputDocumentSize;\n    this.indexHitDocumentCount = indexHitDocumentCount;\n    this.totalQueryExecutionTime = totalQueryExecutionTime;\n    this.queryPreparationTimes = queryPreparationTimes;\n    this.indexLookupTime = indexLookupTime;\n    this.documentLoadTime = documentLoadTime;\n    this.vmExecutionTime = vmExecutionTime;\n    this.runtimeExecutionTimes = runtimeExecutionTimes;\n    this.documentWriteTime = documentWriteTime;\n    this.clientSideMetrics = clientSideMetrics;\n  }\n  /**\n   * Gets the IndexHitRatio\n   * @memberof QueryMetrics\n   * @instance\n   * @ignore\n   */\n\n\n  get indexHitRatio() {\n    return this.retrievedDocumentCount === 0 ? 1 : this.indexHitDocumentCount / this.retrievedDocumentCount;\n  }\n  /**\n   * returns a new QueryMetrics instance that is the addition of this and the arguments.\n   */\n\n\n  add(queryMetricsArray) {\n    let retrievedDocumentCount = 0;\n    let retrievedDocumentSize = 0;\n    let outputDocumentCount = 0;\n    let outputDocumentSize = 0;\n    let indexHitDocumentCount = 0;\n    let totalQueryExecutionTime = TimeSpan.zero;\n    const queryPreparationTimesArray = [];\n    let indexLookupTime = TimeSpan.zero;\n    let documentLoadTime = TimeSpan.zero;\n    let vmExecutionTime = TimeSpan.zero;\n    const runtimeExecutionTimesArray = [];\n    let documentWriteTime = TimeSpan.zero;\n    const clientSideQueryMetricsArray = [];\n    queryMetricsArray.push(this);\n\n    for (const queryMetrics of queryMetricsArray) {\n      if (queryMetrics) {\n        retrievedDocumentCount += queryMetrics.retrievedDocumentCount;\n        retrievedDocumentSize += queryMetrics.retrievedDocumentSize;\n        outputDocumentCount += queryMetrics.outputDocumentCount;\n        outputDocumentSize += queryMetrics.outputDocumentSize;\n        indexHitDocumentCount += queryMetrics.indexHitDocumentCount;\n        totalQueryExecutionTime = totalQueryExecutionTime.add(queryMetrics.totalQueryExecutionTime);\n        queryPreparationTimesArray.push(queryMetrics.queryPreparationTimes);\n        indexLookupTime = indexLookupTime.add(queryMetrics.indexLookupTime);\n        documentLoadTime = documentLoadTime.add(queryMetrics.documentLoadTime);\n        vmExecutionTime = vmExecutionTime.add(queryMetrics.vmExecutionTime);\n        runtimeExecutionTimesArray.push(queryMetrics.runtimeExecutionTimes);\n        documentWriteTime = documentWriteTime.add(queryMetrics.documentWriteTime);\n        clientSideQueryMetricsArray.push(queryMetrics.clientSideMetrics);\n      }\n    }\n\n    return new QueryMetrics(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitDocumentCount, totalQueryExecutionTime, QueryPreparationTimes.createFromArray(queryPreparationTimesArray), indexLookupTime, documentLoadTime, vmExecutionTime, RuntimeExecutionTimes.createFromArray(runtimeExecutionTimesArray), documentWriteTime, ClientSideMetrics.createFromArray(...clientSideQueryMetricsArray));\n  }\n  /**\n   * Output the QueryMetrics as a delimited string.\n   * @memberof QueryMetrics\n   * @instance\n   * @ignore\n   */\n\n\n  toDelimitedString() {\n    return QueryMetricsConstants.RetrievedDocumentCount + \"=\" + this.retrievedDocumentCount + \";\" + QueryMetricsConstants.RetrievedDocumentSize + \"=\" + this.retrievedDocumentSize + \";\" + QueryMetricsConstants.OutputDocumentCount + \"=\" + this.outputDocumentCount + \";\" + QueryMetricsConstants.OutputDocumentSize + \"=\" + this.outputDocumentSize + \";\" + QueryMetricsConstants.IndexHitRatio + \"=\" + this.indexHitRatio + \";\" + QueryMetricsConstants.TotalQueryExecutionTimeInMs + \"=\" + this.totalQueryExecutionTime.totalMilliseconds() + \";\" + this.queryPreparationTimes.toDelimitedString() + \";\" + QueryMetricsConstants.IndexLookupTimeInMs + \"=\" + this.indexLookupTime.totalMilliseconds() + \";\" + QueryMetricsConstants.DocumentLoadTimeInMs + \"=\" + this.documentLoadTime.totalMilliseconds() + \";\" + QueryMetricsConstants.VMExecutionTimeInMs + \"=\" + this.vmExecutionTime.totalMilliseconds() + \";\" + this.runtimeExecutionTimes.toDelimitedString() + \";\" + QueryMetricsConstants.DocumentWriteTimeInMs + \"=\" + this.documentWriteTime.totalMilliseconds();\n  }\n  /**\n   * Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.\n   * @memberof QueryMetrics\n   * @instance\n   */\n\n\n  static createFromArray(queryMetricsArray) {\n    if (!queryMetricsArray) {\n      throw new Error(\"queryMetricsArray is null or undefined item(s)\");\n    }\n\n    return QueryMetrics.zero.add(queryMetricsArray);\n  }\n  /**\n   * Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.\n   * @memberof QueryMetrics\n   * @instance\n   */\n\n\n  static createFromDelimitedString(delimitedString, clientSideMetrics) {\n    const metrics = parseDelimitedString(delimitedString);\n    const indexHitRatio = metrics[QueryMetricsConstants.IndexHitRatio] || 0;\n    const retrievedDocumentCount = metrics[QueryMetricsConstants.RetrievedDocumentCount] || 0;\n    const indexHitCount = indexHitRatio * retrievedDocumentCount;\n    const outputDocumentCount = metrics[QueryMetricsConstants.OutputDocumentCount] || 0;\n    const outputDocumentSize = metrics[QueryMetricsConstants.OutputDocumentSize] || 0;\n    const retrievedDocumentSize = metrics[QueryMetricsConstants.RetrievedDocumentSize] || 0;\n    const totalQueryExecutionTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.TotalQueryExecutionTimeInMs);\n    return new QueryMetrics(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitCount, totalQueryExecutionTime, QueryPreparationTimes.createFromDelimitedString(delimitedString), timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs), RuntimeExecutionTimes.createFromDelimitedString(delimitedString), timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs), clientSideMetrics || ClientSideMetrics.zero);\n  }\n\n}\nQueryMetrics.zero = new QueryMetrics(0, 0, 0, 0, 0, TimeSpan.zero, QueryPreparationTimes.zero, TimeSpan.zero, TimeSpan.zero, TimeSpan.zero, RuntimeExecutionTimes.zero, TimeSpan.zero, ClientSideMetrics.zero);","map":{"version":3,"sources":["../../src/queryMetrics/queryMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientSideMetrics } from \"./clientSideMetrics\";\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { QueryPreparationTimes } from \"./queryPreparationTime\";\nimport { RuntimeExecutionTimes } from \"./runtimeExecutionTimes\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class QueryMetrics {\n  constructor(\n    public readonly retrievedDocumentCount: number,\n    public readonly retrievedDocumentSize: number,\n    public readonly outputDocumentCount: number,\n    public readonly outputDocumentSize: number,\n    public readonly indexHitDocumentCount: number,\n    public readonly totalQueryExecutionTime: TimeSpan,\n    public readonly queryPreparationTimes: QueryPreparationTimes,\n    public readonly indexLookupTime: TimeSpan,\n    public readonly documentLoadTime: TimeSpan,\n    public readonly vmExecutionTime: TimeSpan,\n    public readonly runtimeExecutionTimes: RuntimeExecutionTimes,\n    public readonly documentWriteTime: TimeSpan,\n    public readonly clientSideMetrics: ClientSideMetrics\n  ) {}\n\n  /**\n   * Gets the IndexHitRatio\n   * @memberof QueryMetrics\n   * @instance\n   * @ignore\n   */\n  public get indexHitRatio() {\n    return this.retrievedDocumentCount === 0\n      ? 1\n      : this.indexHitDocumentCount / this.retrievedDocumentCount;\n  }\n\n  /**\n   * returns a new QueryMetrics instance that is the addition of this and the arguments.\n   */\n  public add(queryMetricsArray: QueryMetrics[]) {\n    let retrievedDocumentCount = 0;\n    let retrievedDocumentSize = 0;\n    let outputDocumentCount = 0;\n    let outputDocumentSize = 0;\n    let indexHitDocumentCount = 0;\n    let totalQueryExecutionTime = TimeSpan.zero;\n    const queryPreparationTimesArray = [];\n    let indexLookupTime = TimeSpan.zero;\n    let documentLoadTime = TimeSpan.zero;\n    let vmExecutionTime = TimeSpan.zero;\n    const runtimeExecutionTimesArray = [];\n    let documentWriteTime = TimeSpan.zero;\n    const clientSideQueryMetricsArray = [];\n\n    queryMetricsArray.push(this);\n\n    for (const queryMetrics of queryMetricsArray) {\n      if (queryMetrics) {\n        retrievedDocumentCount += queryMetrics.retrievedDocumentCount;\n        retrievedDocumentSize += queryMetrics.retrievedDocumentSize;\n        outputDocumentCount += queryMetrics.outputDocumentCount;\n        outputDocumentSize += queryMetrics.outputDocumentSize;\n        indexHitDocumentCount += queryMetrics.indexHitDocumentCount;\n        totalQueryExecutionTime = totalQueryExecutionTime.add(queryMetrics.totalQueryExecutionTime);\n        queryPreparationTimesArray.push(queryMetrics.queryPreparationTimes);\n        indexLookupTime = indexLookupTime.add(queryMetrics.indexLookupTime);\n        documentLoadTime = documentLoadTime.add(queryMetrics.documentLoadTime);\n        vmExecutionTime = vmExecutionTime.add(queryMetrics.vmExecutionTime);\n        runtimeExecutionTimesArray.push(queryMetrics.runtimeExecutionTimes);\n        documentWriteTime = documentWriteTime.add(queryMetrics.documentWriteTime);\n        clientSideQueryMetricsArray.push(queryMetrics.clientSideMetrics);\n      }\n    }\n\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitDocumentCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromArray(queryPreparationTimesArray),\n      indexLookupTime,\n      documentLoadTime,\n      vmExecutionTime,\n      RuntimeExecutionTimes.createFromArray(runtimeExecutionTimesArray),\n      documentWriteTime,\n      ClientSideMetrics.createFromArray(...clientSideQueryMetricsArray)\n    );\n  }\n\n  /**\n   * Output the QueryMetrics as a delimited string.\n   * @memberof QueryMetrics\n   * @instance\n   * @ignore\n   */\n  public toDelimitedString() {\n    return (\n      QueryMetricsConstants.RetrievedDocumentCount +\n      \"=\" +\n      this.retrievedDocumentCount +\n      \";\" +\n      QueryMetricsConstants.RetrievedDocumentSize +\n      \"=\" +\n      this.retrievedDocumentSize +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentCount +\n      \"=\" +\n      this.outputDocumentCount +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentSize +\n      \"=\" +\n      this.outputDocumentSize +\n      \";\" +\n      QueryMetricsConstants.IndexHitRatio +\n      \"=\" +\n      this.indexHitRatio +\n      \";\" +\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs +\n      \"=\" +\n      this.totalQueryExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.queryPreparationTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.IndexLookupTimeInMs +\n      \"=\" +\n      this.indexLookupTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.DocumentLoadTimeInMs +\n      \"=\" +\n      this.documentLoadTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.VMExecutionTimeInMs +\n      \"=\" +\n      this.vmExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.runtimeExecutionTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.DocumentWriteTimeInMs +\n      \"=\" +\n      this.documentWriteTime.totalMilliseconds()\n    );\n  }\n\n  public static readonly zero = new QueryMetrics(\n    0,\n    0,\n    0,\n    0,\n    0,\n    TimeSpan.zero,\n    QueryPreparationTimes.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    RuntimeExecutionTimes.zero,\n    TimeSpan.zero,\n    ClientSideMetrics.zero\n  );\n\n  /**\n   * Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.\n   * @memberof QueryMetrics\n   * @instance\n   */\n  public static createFromArray(queryMetricsArray: QueryMetrics[]) {\n    if (!queryMetricsArray) {\n      throw new Error(\"queryMetricsArray is null or undefined item(s)\");\n    }\n\n    return QueryMetrics.zero.add(queryMetricsArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.\n   * @memberof QueryMetrics\n   * @instance\n   */\n  public static createFromDelimitedString(\n    delimitedString: string,\n    clientSideMetrics?: ClientSideMetrics\n  ) {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const indexHitRatio = metrics[QueryMetricsConstants.IndexHitRatio] || 0;\n    const retrievedDocumentCount = metrics[QueryMetricsConstants.RetrievedDocumentCount] || 0;\n    const indexHitCount = indexHitRatio * retrievedDocumentCount;\n    const outputDocumentCount = metrics[QueryMetricsConstants.OutputDocumentCount] || 0;\n    const outputDocumentSize = metrics[QueryMetricsConstants.OutputDocumentSize] || 0;\n    const retrievedDocumentSize = metrics[QueryMetricsConstants.RetrievedDocumentSize] || 0;\n    const totalQueryExecutionTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs\n    );\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs),\n      RuntimeExecutionTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs),\n      clientSideMetrics || ClientSideMetrics.zero\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}