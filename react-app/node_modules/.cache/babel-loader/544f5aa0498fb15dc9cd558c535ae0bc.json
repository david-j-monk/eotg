{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OrderByDocumentProducerComparator } from \"../orderByDocumentProducerComparator\";\n/** @hidden */\n\nexport class MaxAggregator {\n  /**\n   * Represents an aggregator for MAX operator.\n   * @constructor MaxAggregator\n   * @ignore\n   */\n  constructor() {\n    this.value = undefined;\n    this.comparer = new OrderByDocumentProducerComparator([\"Ascending\"]);\n  }\n  /**\n   * Add the provided item to aggregation result.\n   * @memberof MaxAggregator\n   * @instance\n   * @param other\n   */\n\n\n  aggregate(other) {\n    if (this.value === undefined) {\n      this.value = other.max;\n    } else if (this.comparer.compareValue(other.max, typeof other.max, this.value, typeof this.value) > 0) {\n      this.value = other.max;\n    }\n  }\n  /**\n   * Get the aggregation result.\n   * @memberof MaxAggregator\n   * @instance\n   */\n\n\n  getResult() {\n    return this.value;\n  }\n\n}","map":{"version":3,"sources":["../../../src/queryExecutionContext/Aggregators/MaxAggregator.ts"],"names":[],"mappings":"AAAA;AACA;AACA,SAAS,iCAAT,QAAkD,sCAAlD;AAQA;;AACA,OAAM,MAAO,aAAP,CAAoB;AAGxB;;;;;AAKA,EAAA,WAAA,GAAA;AACE,SAAK,KAAL,GAAa,SAAb;AACA,SAAK,QAAL,GAAgB,IAAI,iCAAJ,CAAsC,CAAC,WAAD,CAAtC,CAAhB;AACD;AACD;;;;;;;;AAMO,EAAA,SAAS,CAAC,KAAD,EAA0B;AACxC,QAAI,KAAK,KAAL,KAAe,SAAnB,EAA8B;AAC5B,WAAK,KAAL,GAAa,KAAK,CAAC,GAAnB;AACD,KAFD,MAEO,IACL,KAAK,QAAL,CAAc,YAAd,CAA2B,KAAK,CAAC,GAAjC,EAAsC,OAAO,KAAK,CAAC,GAAnD,EAAwD,KAAK,KAA7D,EAAoE,OAAO,KAAK,KAAhF,IAAyF,CADpF,EAEL;AACA,WAAK,KAAL,GAAa,KAAK,CAAC,GAAnB;AACD;AACF;AAED;;;;;;;AAKO,EAAA,SAAS,GAAA;AACd,WAAO,KAAK,KAAZ;AACD;;AAnCuB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OrderByDocumentProducerComparator } from \"../orderByDocumentProducerComparator\";\nimport { Aggregator } from \"./Aggregator\";\n\ninterface MaxAggregateResult {\n  count: number;\n  max?: number;\n}\n\n/** @hidden */\nexport class MaxAggregator implements Aggregator {\n  private value: number;\n  private comparer: OrderByDocumentProducerComparator;\n  /**\n   * Represents an aggregator for MAX operator.\n   * @constructor MaxAggregator\n   * @ignore\n   */\n  constructor() {\n    this.value = undefined;\n    this.comparer = new OrderByDocumentProducerComparator([\"Ascending\"]);\n  }\n  /**\n   * Add the provided item to aggregation result.\n   * @memberof MaxAggregator\n   * @instance\n   * @param other\n   */\n  public aggregate(other: MaxAggregateResult) {\n    if (this.value === undefined) {\n      this.value = other.max;\n    } else if (\n      this.comparer.compareValue(other.max, typeof other.max, this.value, typeof this.value) > 0\n    ) {\n      this.value = other.max;\n    }\n  }\n\n  /**\n   * Get the aggregation result.\n   * @memberof MaxAggregator\n   * @instance\n   */\n  public getResult() {\n    return this.value;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}