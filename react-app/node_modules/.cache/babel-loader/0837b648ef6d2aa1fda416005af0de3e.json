{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createUserDefinedFunctionUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\n/**\n * Used to read, replace, or delete a specified User Definied Function by id.\n *\n * @see {@link UserDefinedFunction} to create, upsert, query, read all User Defined Functions.\n */\n\nexport class UserDefinedFunction {\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link UserDefinedFunction}.\n   */\n  constructor(container, id, clientContext) {\n    this.container = container;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n\n\n  get url() {\n    return createUserDefinedFunctionUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Read the {@link UserDefinedFunctionDefinition} for the given {@link UserDefinedFunction}.\n   * @param options\n   */\n\n\n  read(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.read({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options\n      });\n      return new UserDefinedFunctionResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Replace the given {@link UserDefinedFunction} with the specified {@link UserDefinedFunctionDefinition}.\n   * @param body The specified {@link UserDefinedFunctionDefinition}.\n   * @param options\n   */\n\n\n  replace(body, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options\n      });\n      return new UserDefinedFunctionResponse(response.result, response.headers, response.code, this);\n    });\n  }\n  /**\n   * Delete the given {@link UserDefined}.\n   * @param options\n   */\n\n\n  delete(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = yield this.clientContext.delete({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options\n      });\n      return new UserDefinedFunctionResponse(response.result, response.headers, response.code, this);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/client/UserDefinedFunction/UserDefinedFunction.ts"],"names":[],"mappings":";AAGA,SACE,4BADF,EAEE,aAFF,EAGE,eAHF,EAIE,eAJF,EAKE,YALF,QAMO,cANP;AAUA,SAAS,2BAAT,QAA4C,+BAA5C;AAEA;;;;;;AAKA,OAAM,MAAO,mBAAP,CAA0B;AAO9B;;;;;AAKA,EAAA,WAAA,CACkB,SADlB,EAEkB,EAFlB,EAGmB,aAHnB,EAG+C;AAF7B,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,EAAA,GAAA,EAAA;AACC,SAAA,aAAA,GAAA,aAAA;AACf;AAfJ;;;;;AAGA,MAAW,GAAX,GAAc;AACZ,WAAO,4BAA4B,CAAC,KAAK,SAAL,CAAe,QAAf,CAAwB,EAAzB,EAA6B,KAAK,SAAL,CAAe,EAA5C,EAAgD,KAAK,EAArD,CAAnC;AACD;AAYD;;;;;;AAIa,EAAA,IAAI,CAAC,OAAD,EAAyB;;AACxC,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,IAAnB,CAAuD;AAC5E,QAAA,IAD4E;AAE5E,QAAA,YAAY,EAAE,YAAY,CAAC,GAFiD;AAG5E,QAAA,UAAU,EAAE,EAHgE;AAI5E,QAAA;AAJ4E,OAAvD,CAAvB;AAMA,aAAO,IAAI,2BAAJ,CAAgC,QAAQ,CAAC,MAAzC,EAAiD,QAAQ,CAAC,OAA1D,EAAmE,QAAQ,CAAC,IAA5E,EAAkF,IAAlF,CAAP;AACD,K;AAAA;AAED;;;;;;;AAKa,EAAA,OAAO,CAClB,IADkB,EAElB,OAFkB,EAEM;;AAExB,UAAI,IAAI,CAAC,IAAT,EAAe;AACb,QAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAL,CAAU,QAAV,EAAZ;AACD;;AAED,YAAM,GAAG,GAAG,EAAZ;;AACA,UAAI,CAAC,eAAe,CAAC,IAAD,EAAO,GAAP,CAApB,EAAiC;AAC/B,cAAM,GAAN;AACD;;AAED,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,OAAnB,CAA0D;AAC/E,QAAA,IAD+E;AAE/E,QAAA,IAF+E;AAG/E,QAAA,YAAY,EAAE,YAAY,CAAC,GAHoD;AAI/E,QAAA,UAAU,EAAE,EAJmE;AAK/E,QAAA;AAL+E,OAA1D,CAAvB;AAOA,aAAO,IAAI,2BAAJ,CAAgC,QAAQ,CAAC,MAAzC,EAAiD,QAAQ,CAAC,OAA1D,EAAmE,QAAQ,CAAC,IAA5E,EAAkF,IAAlF,CAAP;AACD,K;AAAA;AAED;;;;;;AAIa,EAAA,MAAM,CAAC,OAAD,EAAyB;;AAC1C,YAAM,IAAI,GAAG,eAAe,CAAC,KAAK,GAAN,CAA5B;AACA,YAAM,EAAE,GAAG,aAAa,CAAC,KAAK,GAAN,CAAxB;AAEA,YAAM,QAAQ,GAAG,MAAM,KAAK,aAAL,CAAmB,MAAnB,CAA0B;AAC/C,QAAA,IAD+C;AAE/C,QAAA,YAAY,EAAE,YAAY,CAAC,GAFoB;AAG/C,QAAA,UAAU,EAAE,EAHmC;AAI/C,QAAA;AAJ+C,OAA1B,CAAvB;AAMA,aAAO,IAAI,2BAAJ,CAAgC,QAAQ,CAAC,MAAzC,EAAiD,QAAQ,CAAC,OAA1D,EAAmE,QAAQ,CAAC,IAA5E,EAAkF,IAAlF,CAAP;AACD,K;AAAA;;AAjF6B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  createUserDefinedFunctionUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType\n} from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\n\n/**\n * Used to read, replace, or delete a specified User Definied Function by id.\n *\n * @see {@link UserDefinedFunction} to create, upsert, query, read all User Defined Functions.\n */\nexport class UserDefinedFunction {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return createUserDefinedFunctionUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link UserDefinedFunction}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link UserDefinedFunctionDefinition} for the given {@link UserDefinedFunction}.\n   * @param options\n   */\n  public async read(options?: RequestOptions): Promise<UserDefinedFunctionResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.read<UserDefinedFunctionDefinition>({\n      path,\n      resourceType: ResourceType.udf,\n      resourceId: id,\n      options\n    });\n    return new UserDefinedFunctionResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Replace the given {@link UserDefinedFunction} with the specified {@link UserDefinedFunctionDefinition}.\n   * @param body The specified {@link UserDefinedFunctionDefinition}.\n   * @param options\n   */\n  public async replace(\n    body: UserDefinedFunctionDefinition,\n    options?: RequestOptions\n  ): Promise<UserDefinedFunctionResponse> {\n    if (body.body) {\n      body.body = body.body.toString();\n    }\n\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.replace<UserDefinedFunctionDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.udf,\n      resourceId: id,\n      options\n    });\n    return new UserDefinedFunctionResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Delete the given {@link UserDefined}.\n   * @param options\n   */\n  public async delete(options?: RequestOptions): Promise<UserDefinedFunctionResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete({\n      path,\n      resourceType: ResourceType.udf,\n      resourceId: id,\n      options\n    });\n    return new UserDefinedFunctionResponse(response.result, response.headers, response.code, this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}